/* jshint ignore:start */

/* jshint ignore:end */

define('fusor-ember-cli/adapters/application', ['exports', 'ember-data'], function (exports, DS) {

    'use strict';

    var token = $('meta[name="csrf-token"]').attr('content');
    exports['default'] = DS['default'].ActiveModelAdapter.extend({
        namespace: 'api/v21',
        headers: {
            'X-CSRF-Token': token
        }
    });

});
define('fusor-ember-cli/adapters/deployment', ['exports', 'ember-data'], function (exports, DS) {

    'use strict';

    var token = $('meta[name="csrf-token"]').attr('content');
    exports['default'] = DS['default'].ActiveModelAdapter.extend({
        namespace: 'fusor/api/v21',
        headers: {
            'X-CSRF-Token': token
        }
    });

});
define('fusor-ember-cli/adapters/foreman-task', ['exports'], function (exports) {

    'use strict';

    var token = $('meta[name="csrf-token"]').attr('content');
    exports['default'] = DS.ActiveModelAdapter.extend({
        namespace: 'api/v21',
        headers: {
            'X-CSRF-Token': token
        }
    });

});
define('fusor-ember-cli/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'fusor-ember-cli/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {

  'use strict';

  var App;

  Ember['default'].MODEL_FACTORY_INJECTIONS = true;

  App = Ember['default'].Application.extend({
    modulePrefix: config['default'].modulePrefix,
    podModulePrefix: config['default'].podModulePrefix,
    Resolver: Resolver['default']
  });

  loadInitializers['default'](App, config['default'].modulePrefix);

  exports['default'] = App;

});
define('fusor-ember-cli/components/accordion-item', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    isOpen: false,
    actions: {
      openItem: function openItem() {
        this.set('isOpen', this.toggleProperty('isOpen'));
      }
    }
  });

});
define('fusor-ember-cli/components/base-f', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    labelClassSize: (function () {
      return this.getWithDefault('labelSize', 'col-md-2');
    }).property(),
    inputClassSize: (function () {
      return this.getWithDefault('inputSize', 'col-md-4');
    }).property()
  });

});
define('fusor-ember-cli/components/button-f', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    tagName: 'button',
    classNames: ['btn btn-primary'],
    attributeBindings: ['disabled'],
    click: function click() {
      this.sendAction();
    }
  });

});
define('fusor-ember-cli/components/em-button', ['exports', 'ember-idx-button/button'], function (exports, ButtonComponent) {

	'use strict';

	exports['default'] = ButtonComponent['default'];

});
define('fusor-ember-cli/components/em-checkbox', ['exports', 'ember', 'ember-idx-forms/checkbox'], function (exports, Ember, CheckboxComponent) {

	'use strict';

	exports['default'] = CheckboxComponent['default'];

});
define('fusor-ember-cli/components/em-form-control-help', ['exports', 'ember', 'ember-idx-forms/control_help'], function (exports, Ember, FormControlHelperComponent) {

	'use strict';

	exports['default'] = FormControlHelperComponent['default'];

});
define('fusor-ember-cli/components/em-form-group', ['exports', 'ember', 'ember-idx-forms/group'], function (exports, Ember, FormGroupComponent) {

	'use strict';

	exports['default'] = FormGroupComponent['default'];

});
define('fusor-ember-cli/components/em-form-label', ['exports', 'ember', 'ember-idx-forms/label'], function (exports, Ember, FormLabelComponent) {

	'use strict';

	exports['default'] = FormLabelComponent['default'];

});
define('fusor-ember-cli/components/em-form-submit', ['exports', 'ember', 'ember-idx-forms/submit_button'], function (exports, Ember, SubmitButtonComponent) {

	'use strict';

	exports['default'] = SubmitButtonComponent['default'];

});
define('fusor-ember-cli/components/em-form', ['exports', 'ember', 'ember-idx-forms/form'], function (exports, Ember, FormComponent) {

	'use strict';

	exports['default'] = FormComponent['default'];

});
define('fusor-ember-cli/components/em-input', ['exports', 'ember', 'ember-idx-forms/input'], function (exports, Ember, InputComponent) {

	'use strict';

	exports['default'] = InputComponent['default'];

});
define('fusor-ember-cli/components/em-modal-body', ['exports', 'ember-idx-modal/modal-body'], function (exports, BodyComponent) {

	'use strict';

	exports['default'] = BodyComponent['default'];

});
define('fusor-ember-cli/components/em-modal-confirm-with-reason', ['exports', 'ember-idx-modal/modal-confirm-with-reason'], function (exports, ConfirmWithReasonModal) {

	'use strict';

	exports['default'] = ConfirmWithReasonModal['default'];

});
define('fusor-ember-cli/components/em-modal-confirm', ['exports', 'ember-idx-modal/modal-confirm'], function (exports, ModalConfirm) {

	'use strict';

	exports['default'] = ModalConfirm['default'];

});
define('fusor-ember-cli/components/em-modal-emform', ['exports', 'ember-idx-modal/modal-emform'], function (exports, ModalEmFormComponent) {

	'use strict';

	exports['default'] = ModalEmFormComponent['default'];

});
define('fusor-ember-cli/components/em-modal-footer', ['exports', 'ember-idx-modal/modal-footer'], function (exports, FooterComponent) {

	'use strict';

	exports['default'] = FooterComponent['default'];

});
define('fusor-ember-cli/components/em-modal-form', ['exports', 'ember-idx-modal/modal-form'], function (exports, ModalFormComponent) {

	'use strict';

	exports['default'] = ModalFormComponent['default'];

});
define('fusor-ember-cli/components/em-modal-title', ['exports', 'ember-idx-modal/modal-title'], function (exports, TitleComponent) {

	'use strict';

	exports['default'] = TitleComponent['default'];

});
define('fusor-ember-cli/components/em-modal-toggler', ['exports', 'ember-idx-modal/modal-toggler'], function (exports, TogglerComponent) {

	'use strict';

	exports['default'] = TogglerComponent['default'];

});
define('fusor-ember-cli/components/em-modal', ['exports', 'ember-idx-modal/modal'], function (exports, ModalComponent) {

	'use strict';

	exports['default'] = ModalComponent['default'];

});
define('fusor-ember-cli/components/em-select', ['exports', 'ember', 'ember-idx-forms/select'], function (exports, Ember, SelectComponent) {

	'use strict';

	exports['default'] = SelectComponent['default'];

});
define('fusor-ember-cli/components/em-text', ['exports', 'ember', 'ember-idx-forms/text'], function (exports, Ember, TextComponent) {

	'use strict';

	exports['default'] = TextComponent['default'];

});
define('fusor-ember-cli/components/env-path-list-item', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    tagName: 'li',
    classNames: ['path-list-item', 'list_item_active'],

    isChecked: (function () {
      return this.get('selectedEnvironment') === this.get('env');
    }).property('selectedEnvironment', 'env'),

    bgColor: (function () {
      if (this.get('isChecked')) {
        return 'env_path_active';
      } else {
        return null;
      }
    }).property('isChecked'),

    envCssId: (function () {
      return 'env_' + this.get('env.id');
    }).property('env'),

    click: function click(event) {
      this.sendAction('action', this.get('env'));
    }

  });

});
define('fusor-ember-cli/components/labeled-radio-button', ['exports', 'ember-radio-button/components/labeled-radio-button'], function (exports, LabeledRadioButton) {

	'use strict';

	exports['default'] = LabeledRadioButton['default'];

});
define('fusor-ember-cli/components/markdown-to-html', ['exports', 'ember-cli-showdown/components/markdown-to-html'], function (exports, MarkdownToHtml) {

	'use strict';

	exports['default'] = MarkdownToHtml['default'];

});
define('fusor-ember-cli/components/modal-confirm', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({

    dismissButtonLabel: (function () {
      return this.getWithDefault('dismissLabel', 'Close');
    }).property('dismissLabel'),

    okButtonLabel: (function () {
      return this.getWithDefault('okLabel', 'Yes');
    }).property('okLabel'),

    actions: {
      ok: function ok() {
        this.$('.modal').modal('hide');
        this.sendAction('ok');
      }
    },

    show: (function () {
      this.$('.modal').modal().on('hidden.bs.modal', (function () {
        this.sendAction('close');
      }).bind(this));
    }).on('didInsertElement')

  });

});
define('fusor-ember-cli/components/radio-button-f', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Component.extend({});

});
define('fusor-ember-cli/components/radio-button', ['exports', 'ember-radio-button/components/radio-button'], function (exports, RadioButton) {

	'use strict';

	exports['default'] = RadioButton['default'];

});
define('fusor-ember-cli/components/rchi-item', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNames: ['rhci-item'],
    classNameBindings: ['isChecked:rhci-item-selected:rhci-item-deselected', 'isHover:rhci-item-hover'],

    click: function click() {
      this.set('isChecked', this.toggleProperty('isChecked'));
    },

    isHover: false,

    showMsgToSelect: (function () {
      return this.get('isHover') && !this.get('isChecked');
    }).property('isHover', 'isChecked'),

    showMsgToDeselect: (function () {
      return this.get('isHover') && this.get('isChecked');
    }).property('isHover', 'isChecked'),

    mouseEnter: function mouseEnter() {
      this.set('isHover', true);
    },

    mouseLeave: function mouseLeave() {
      this.set('isHover', false);
    } });

});
define('fusor-ember-cli/components/rhci-hover-text', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNames: ['rhci-footer-hover'] });

});
define('fusor-ember-cli/components/rhci-start', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Component.extend({});

});
define('fusor-ember-cli/components/rhci-wizard', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Component.extend({});

});
define('fusor-ember-cli/components/select-f', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Component.extend({});

});
define('fusor-ember-cli/components/select-simple-f', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Component.extend({});

});
define('fusor-ember-cli/components/step-number', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    tagName: 'span',
    classNames: ['badge'],
    classNameBindings: ['badgeInverse'],
    badgeInverse: false
  });

});
define('fusor-ember-cli/components/subnet-drop-area', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNames: ['subnet-drop-zone', 'panel', 'panel-default']

  });

});
define('fusor-ember-cli/components/text-f', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({

    typeInput: (function () {
      return this.get('type') ? this.get('type') : 'text';
    }).property('type'),

    actions: {
      showErrors: function showErrors() {
        this.set('showError', true);
      }
    }

  });

});
define('fusor-ember-cli/components/textarea-f', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({

    rowsPassed: (function () {
      if (this.get('rows')) {
        if (this.get('rows') > 0) {
          return true;
        }
      }
    }).property('rows'),

    numRows: (function () {
      return this.getWithDefault('rows', '');
    }).property(),

    numCols: (function () {
      return this.getWithDefault('cols', '');
    }).property() });

});
define('fusor-ember-cli/components/tr-engine', ['exports', 'ember', 'fusor-ember-cli/mixins/save-hostname-mixin'], function (exports, Ember, SaveHostnameMixin) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend(SaveHostnameMixin['default'], {
    tagName: 'tr',

    actions: {
      engineHostChanged: function engineHostChanged(host) {
        var self = this.get('targetObject');
        var controller = self.get('controllers.deployment');
        return self.store.find('discovered-host', host.get('id')).then(function (result) {
          return controller.set('discovered_host', result);
        });
      } }

  });

});
define('fusor-ember-cli/components/tr-hypervisor', ['exports', 'ember', 'fusor-ember-cli/mixins/save-hostname-mixin'], function (exports, Ember, SaveHostnameMixin) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend(SaveHostnameMixin['default'], {
    tagName: 'tr' });

});
define('fusor-ember-cli/components/tr-organization', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({

    tagName: 'tr',

    isChecked: (function () {
      return this.get('selectedOrganization') == this.get('org');
    }).property('selectedOrganization', 'org'),

    actions: {
      organizationChanged: function organizationChanged(event) {
        this.sendAction('action', this.get('org'));
      }
    }

  });

});
define('fusor-ember-cli/components/tr-task', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({

    tagName: 'tr' });

});
define('fusor-ember-cli/components/traffic-type', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNames: ['subnet-type-pull', 'existing ui-draggable']
  });

});
define('fusor-ember-cli/components/upstream-downstream', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNames: ['pull-left', 'toggle_updown'],

    actions: {

      showUpstream: function showUpstream() {
        this.set('isUpstream', true);
      },

      showDownstream: function showDownstream() {
        this.set('isUpstream', false);
      } }
  });

});
define('fusor-ember-cli/components/vertical-tab', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    tagName: 'li'
  });

});
define('fusor-ember-cli/components/wizard-item', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    tagName: 'li',
    classNames: ['wizard-item'],

    classNameBindings: 'active',

    active: (function () {
      return this.get('childViews.firstObject.active');
    }).property() });

  // isReviewTab: function() {
  //   return (this.get('routeName') == 'review')
  // }.property('routeName')

});
define('fusor-ember-cli/controllers/application', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({
    needs: ['side-menu', 'deployment'],

    deployAsPlugin: true,
    isEmberCliMode: Ember['default'].computed.not('deployAsPlugin'),
    isUpstream: false,

    isContainer: Ember['default'].computed.alias('isUpstream'),

    showMainMenu: Ember['default'].computed.and('isLoggedIn', 'isEmberCliMode'),
    showSideMenu: Ember['default'].computed.alias('controllers.side-menu.showSideMenu'),

    isLoggedIn: true, //Ember.computed.alias("session.isAuthenticated"),

    loginUsername: Ember['default'].computed.alias('session.currentUser.login'),

    nameRHCI: Ember['default'].computed.alias('controllers.deployment.nameRHCI'),
    nameRhev: Ember['default'].computed.alias('controllers.deployment.nameRhev'),
    nameOpenStack: Ember['default'].computed.alias('controllers.deployment.nameOpenStack'),
    nameCloudForms: Ember['default'].computed.alias('controllers.deployment.nameCloudForms'),
    nameSatellite: Ember['default'].computed.alias('controllers.deployment.nameSatellite'),
    logoPath: Ember['default'].computed.alias('controllers.deployment.logoPath'),

    actions: {
      invalidate: function invalidate(data) {
        return this.transitionTo('login');
      },

      signOut: function signOut() {
        return this.transitionTo('login');
      } }
  });

});
define('fusor-ember-cli/controllers/cancel-modal', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].ObjectController.extend({
    actions: {
      save: function save() {
        return this.transitionTo('deployments');
      }
    }
  });

});
define('fusor-ember-cli/controllers/cloudforms-storage-domain', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({
    nfsShare: '/export/export_domain'
  });

});
define('fusor-ember-cli/controllers/cloudforms-vm', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Controller.extend({});

});
define('fusor-ember-cli/controllers/cloudforms', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({
    needs: ['deployment'],
    stepNumberCloudForms: Ember['default'].computed.alias('controllers.deployment.stepNumberCloudForms') });

});
define('fusor-ember-cli/controllers/configure-environment', ['exports', 'ember', 'fusor-ember-cli/mixins/configure-environment-mixin'], function (exports, Ember, ConfigureEnvironmentMixin) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend(ConfigureEnvironmentMixin['default'], {

    needs: ['deployment'],

    disableNextOnLifecycleEnvironment: Ember['default'].computed.alias('controllers.deployment.disableNextOnLifecycleEnvironment'),

    organizationTabRouteName: Ember['default'].computed.alias('controllers.deployment.organizationTabRouteName'),

    selectedOrganization: Ember['default'].computed.alias('controllers.deployment.organization'),

    step2RouteName: Ember['default'].computed.alias('controllers.deployment.step2RouteName'),

    actions: {
      selectEnvironment: function selectEnvironment(environment) {
        this.set('showAlertMessage', false);
        this.set('selectedEnvironment', environment);
        return this.get('controllers.deployment').set('lifecycle_environment', environment);
      },

      createEnvironment: function createEnvironment() {
        var self = this;
        var selectedOrganization = this.get('selectedOrganization');
        this.set('fields_env.name', this.get('name'));
        this.set('fields_env.label', this.get('label'));
        this.set('fields_env.description', this.get('description'));
        this.set('fields_env.organization', selectedOrganization);

        // TODO - refactor DRY
        if (this.get('hasLibrary')) {
          var library = this.get('libraryEnvForOrg');
          // assign library to prior db attribute
          this.set('fields_env.prior', library.get('id'));
          var environment = this.store.createRecord('lifecycle-environment', this.get('fields_env'));
          environment.save().then(function (result) {
            //success
            self.get('nonLibraryEnvironments').pushObject(result);
            self.set('selectedEnvironment', environment);
            self.get('controllers.deployment').set('lifecycle_environment', environment);
            return self.set('showAlertMessage', true);
          }, function (response) {
            alert('error saving environment');
          });
        } else {
          // create library
          var library = this.store.createRecord('lifecycle-environment', { name: 'Library', label: 'Library', library: true, organization: selectedOrganization });
          // save library first and then save environment
          library.save().then(function (response) {
            self.set('fields_env.prior', response.get('id'));
            var environment = this.store.createRecord('lifecycle-environment', this.get('fields_env'));
            environment.save().then(function (result) {
              //success
              self.get('nonLibraryEnvironments').pushObject(result);
              self.set('selectedEnvironment', environment);
              return self.set('showAlertMessage', true);
            }, function (response) {
              alert('error saving environment');
            });
          });
        }
      } }

  });

});
define('fusor-ember-cli/controllers/configure-organization', ['exports', 'ember', 'fusor-ember-cli/mixins/configure-organization-mixin'], function (exports, Ember, ConfigureOrganizationMixin) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend(ConfigureOrganizationMixin['default'], {

    needs: ['deployment'],

    organization: Ember['default'].computed.alias('controllers.deployment.organization'),

    disableNextOnConfigureOrganization: Ember['default'].computed.alias('controllers.deployment.disableNextOnConfigureOrganization'),
    satelliteTabRouteName: Ember['default'].computed.alias('controllers.deployment.satelliteTabRouteName'),
    lifecycleEnvironmentTabRouteName: Ember['default'].computed.alias('controllers.deployment.lifecycleEnvironmentTabRouteName'),
    deploymentName: Ember['default'].computed.alias('controllers.deployment.name'),

    actions: {
      selectOrganization: function selectOrganization(organization) {
        this.set('showAlertMessage', false);
        this.set('selectedOrganization', organization);
        return this.get('controllers.deployment').set('organization', organization);
      }
    } });

});
define('fusor-ember-cli/controllers/deployment-new', ['exports', 'ember', 'fusor-ember-cli/mixins/deployment-controller-mixin', 'fusor-ember-cli/mixins/disable-tab-mixin'], function (exports, Ember, DeploymentControllerMixin, DisableTabMixin) {

  'use strict';

  exports['default'] = Ember['default'].ObjectController.extend(DeploymentControllerMixin['default'], DisableTabMixin['default'], {

    // these tabs will always be disabled within deployment-new
    isDisabledRhev: true,
    isDisabledOpenstack: true,
    isDisabledCloudForms: true,
    isDisabledSubscriptions: true,
    isDisabledReview: true });

});
define('fusor-ember-cli/controllers/deployment-new/satellite', ['exports', 'ember', 'fusor-ember-cli/mixins/satellite-controller-mixin'], function (exports, Ember, SatelliteControllerMixin) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend(SatelliteControllerMixin['default'], {

    needs: ['deployment-new'],

    satelliteTabRouteName: Ember['default'].computed.alias('controllers.deployment-new.satelliteTabRouteName'),
    organizationTabRouteName: Ember['default'].computed.alias('controllers.deployment-new.organizationTabRouteName'),
    lifecycleEnvironmentTabRouteName: Ember['default'].computed.alias('controllers.deployment-new.lifecycleEnvironmentTabRouteName'),

    disableTabDeploymentName: Ember['default'].computed.alias('controllers.deployment-new.disableTabDeploymentName'),
    disableTabConfigureOrganization: Ember['default'].computed.alias('controllers.deployment-new.disableTabConfigureOrganization'),
    disableTabLifecycleEnvironment: Ember['default'].computed.alias('controllers.deployment-new.disableTabLifecycleEnvironment') });

});
define('fusor-ember-cli/controllers/deployment-new/satellite/configure-environment', ['exports', 'ember', 'fusor-ember-cli/mixins/configure-environment-mixin'], function (exports, Ember, ConfigureEnvironmentMixin) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend(ConfigureEnvironmentMixin['default'], {

    needs: ['deployment-new'],

    disableNextOnLifecycleEnvironment: Ember['default'].computed.alias('controllers.deployment-new.disableNextOnLifecycleEnvironment'),

    organizationTabRouteName: Ember['default'].computed.alias('controllers.deployment-new.organizationTabRouteName'),

    selectedOrganization: Ember['default'].computed.alias('controllers.deployment-new.organization'),

    step2RouteName: Ember['default'].computed.alias('controllers.deployment-new.step2RouteName'),

    actions: {
      selectEnvironment: function selectEnvironment(environment) {
        this.set('showAlertMessage', false);
        this.set('selectedEnvironment', environment);
        return this.get('controllers.deployment-new').set('lifecycle_environment', environment);
      },

      createEnvironment: function createEnvironment() {
        var self = this;
        var selectedOrganization = this.get('selectedOrganization');
        this.set('fields_env.name', this.get('name'));
        this.set('fields_env.label', this.get('label'));
        this.set('fields_env.description', this.get('description'));
        this.set('fields_env.organization', selectedOrganization);

        // TODO - refactor DRY
        if (this.get('hasLibrary')) {
          var library = this.get('libraryEnvForOrg');
          // assign library to prior db attribute
          this.set('fields_env.prior', library.get('id'));
          var environment = this.store.createRecord('lifecycle-environment', this.get('fields_env'));
          environment.save().then(function (result) {
            //success
            self.get('nonLibraryEnvironments').pushObject(result);
            self.set('selectedEnvironment', environment);
            self.get('controllers.deployment-new').set('lifecycle_environment', environment);
            return self.set('showAlertMessage', true);
          }, function (response) {
            alert('error saving environment');
          });
        } else {
          // create library
          var library = this.store.createRecord('lifecycle-environment', { name: 'Library', label: 'Library', library: true, organization: selectedOrganization });
          // save library first and then save environment
          library.save().then(function (response) {
            self.set('fields_env.prior', response.get('id'));
            var environment = this.store.createRecord('lifecycle-environment', this.get('fields_env'));
            environment.save().then(function (result) {
              //success
              self.get('nonLibraryEnvironments').pushObject(result);
              self.set('selectedEnvironment', environment);
              return self.set('showAlertMessage', true);
            }, function (response) {
              alert('error saving environment');
            });
          });
        }
      } }
  });

});
define('fusor-ember-cli/controllers/deployment-new/satellite/configure-organization', ['exports', 'ember', 'fusor-ember-cli/mixins/configure-organization-mixin'], function (exports, Ember, ConfigureOrganizationMixin) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend(ConfigureOrganizationMixin['default'], {

    needs: ['deployment-new'],

    organization: Ember['default'].computed.alias('controllers.deployment-new.organization'),

    disableNextOnConfigureOrganization: Ember['default'].computed.alias('controllers.deployment-new.disableNextOnConfigureOrganization'),
    satelliteTabRouteName: Ember['default'].computed.alias('controllers.deployment-new.satelliteTabRouteName'),
    lifecycleEnvironmentTabRouteName: Ember['default'].computed.alias('controllers.deployment-new.lifecycleEnvironmentTabRouteName'),
    deploymentName: Ember['default'].computed.alias('controllers.deployment-new.name'),

    actions: {
      selectOrganization: function selectOrganization(organization) {
        this.set('showAlertMessage', false);
        return this.get('controllers.deployment-new').set('organization', organization);
      }
    } });

});
define('fusor-ember-cli/controllers/deployment-new/satellite/index', ['exports', 'ember', 'fusor-ember-cli/mixins/satellite-controller-mixin'], function (exports, Ember, SatelliteControllerMixin) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend(SatelliteControllerMixin['default'], {

    needs: ['deployment-new', 'deployment-new/satellite'],

    validations: {
      name: {
        presence: true } },

    name: Ember['default'].computed.alias('controllers.deployment-new.name'),
    description: Ember['default'].computed.alias('controllers.deployment-new.description'),

    organizationTabRouteName: Ember['default'].computed.alias('controllers.deployment-new/satellite.organizationTabRouteName'),

    disableNextOnDeploymentName: Ember['default'].computed.alias('controllers.deployment-new.disableNextOnDeploymentName'),

    idSatName: 'deployment_new_sat_name',
    idSatDesc: 'deployment_new_sat_desc' });

});
define('fusor-ember-cli/controllers/deployment-new/start', ['exports', 'ember', 'fusor-ember-cli/mixins/start-controller-mixin'], function (exports, Ember, StartControllerMixin) {

  'use strict';

  exports['default'] = Ember['default'].ObjectController.extend(StartControllerMixin['default'], {

    needs: ['deployment-new'],

    isRhev: Ember['default'].computed.alias('controllers.deployment-new.deploy_rhev'),
    isOpenStack: Ember['default'].computed.alias('controllers.deployment-new.deploy_openstack'),
    isCloudForms: Ember['default'].computed.alias('controllers.deployment-new.deploy_cfme'),
    isSubscriptions: Ember['default'].computed.alias('controllers.deployment-new.isSubscriptions') });

});
define('fusor-ember-cli/controllers/deployment', ['exports', 'ember', 'fusor-ember-cli/mixins/deployment-controller-mixin', 'fusor-ember-cli/mixins/disable-tab-mixin'], function (exports, Ember, DeploymentControllerMixin, DisableTabMixin) {

  'use strict';

  exports['default'] = Ember['default'].ObjectController.extend(DeploymentControllerMixin['default'], DisableTabMixin['default'], {

    validations: {
      name: {
        presence: true,
        length: { minimum: 2 }
      } },

    selectedRhevEngine: null,

    satelliteInvalid: Ember['default'].computed.or("hasNoName", "hasNoOrganization", "hasNoLifecycleEnvironment"),

    // disable Steps 2, 3, 4, etc on wizard
    isDisabledRhev: Ember['default'].computed.alias("satelliteInvalid"),
    isDisabledOpenstack: Ember['default'].computed.alias("satelliteInvalid"),
    isDisabledCloudForms: Ember['default'].computed.alias("satelliteInvalid"),
    isDisabledSubscriptions: Ember['default'].computed.alias("satelliteInvalid"),
    isDisabledReview: Ember['default'].computed.alias("satelliteInvalid"),

    skipContent: false,

    isStarted: (function () {
      return !!this.get("model.foreman_task_uuid");
    }).property("model.foreman_task_uuid") });

});
define('fusor-ember-cli/controllers/deployment/start', ['exports', 'ember', 'fusor-ember-cli/mixins/start-controller-mixin'], function (exports, Ember, StartControllerMixin) {

  'use strict';

  exports['default'] = Ember['default'].ObjectController.extend(StartControllerMixin['default'], {

    needs: ['deployment'],

    isRhev: Ember['default'].computed.alias('controllers.deployment.deploy_rhev'),
    isOpenStack: Ember['default'].computed.alias('controllers.deployment.deploy_openstack'),
    isCloudForms: Ember['default'].computed.alias('controllers.deployment.deploy_cfme'),
    isSubscriptions: Ember['default'].computed.alias('controllers.deployment.isSubscriptions') });

});
define('fusor-ember-cli/controllers/deployments', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].ArrayController.extend({

    sortProperties: ['name'],
    sortAscending: true,

    sortedDeployments: Ember['default'].computed.sort('model', 'sortProperties'),

    searchDeploymentString: '',

    filteredDeployments: (function () {
      var searchDeploymentString = this.get('searchDeploymentString');
      var rx = new RegExp(searchDeploymentString, 'gi');
      var model = this.get('sortedDeployments');

      if (model.get('length') > 0) {
        return model.filter(function (record) {
          return record.get('name').match(rx);
        });
      } else {
        return model;
      }
    }).property('sortedDeployments', 'searchDeploymentString') });

});
define('fusor-ember-cli/controllers/discovered-host', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].ObjectController.extend({

    needs: ['deployment', 'hypervisor/discovered-host', 'engine/discovered-host'],

    cssHostHostId: (function () {
      return 'host_' + this.get('id');
    }).property('id'),

    cssIdHostId: (function () {
      return 'id_' + this.get('id');
    }).property('id'),

    allDiscoveredHosts: Ember['default'].computed.alias('controllers.hypervisor/discovered-host.allDiscoveredHosts'),
    // same as controllers.deployment.discovered_hosts
    selectedRhevHypervisorHosts: Ember['default'].computed.alias('controllers.hypervisor/discovered-host.model'),
    // same as controllers.deployment.discovered_host
    selectedRhevEngineHost: Ember['default'].computed.alias('controllers.engine/discovered-host.model'),

    isAllChecked: Ember['default'].computed.alias('controllers.hypervisor/discovered-host.isAllChecked'),
    allChecked: Ember['default'].computed.alias('controllers.hypervisor/discovered-host.allChecked'),

    addOrRemoveHypervisor: (function (row) {
      if (row.get('isSelectedAsHypervisor')) {
        this.get('controllers.hypervisor/discovered-host.model').addObject(row.get('model'));
      } else {
        this.get('controllers.hypervisor/discovered-host.model').removeObject(row.get('model'));
      }
    }).observes('isSelectedAsHypervisor'),

    isSelectedAsHypervisor: (function () {
      if (this.get('selectedRhevHypervisorHosts')) {
        var selectedIds = this.get('selectedRhevHypervisorHosts').getEach('id');
        return selectedIds.contains(this.get('id'));
      } else {
        return false;
      }
    }).property('selectedRhevHypervisorHosts.[]'),

    isSelectedAsEngine: (function () {
      return this.get('selectedRhevEngineHost.id') === this.get('id');
    }).property('selectedRhevEngineHost'),

    actions: {
      engineHostChanged: function engineHostChanged(host) {
        var engine_hostname = host.get('name');
        var controller = this.get('controllers.deployment');
        return this.store.find('discovered-host', host.get('id')).then(function (result) {
          return controller.set('discovered_host', result);
          //TODO save hostname on discovered host on save deploy
        });
      }
    }

  });

});
define('fusor-ember-cli/controllers/engine', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({
    needs: ['rhev'],
    engineTabName: Ember['default'].computed.alias('controllers.rhev.engineTabName'),
    engineTabNameLowercase: (function () {
      return this.get('engineTabName').toLowerCase();
    }).property('engineTabName')
  });

});
define('fusor-ember-cli/controllers/engine/discovered-host', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({

    needs: ['deployment', 'hypervisor/discovered-host'],

    selectedRhevEngineHost: Ember['default'].computed.alias('model'),
    hypervisorModelIds: Ember['default'].computed.alias('controllers.hypervisor/discovered-host.hypervisorModelIds'),

    // Set by route's setupController. Needed since hypervisorModelIds is
    // only available after route hypervisor/discovered hosts is activated
    selectedHypervisors: [],
    allDiscoveredHosts: [],

    // Filter out hosts selected as Hypervisor
    availableHosts: Ember['default'].computed.filter('allDiscoveredHosts', function (item, index, array) {
      var hypervisorsIds = this.get('selectedHypervisors').getEach('id');
      console.log(hypervisorsIds);
      return !hypervisorsIds.contains(item.get('id'));
    }).property('selectedHypervisors', 'allDiscoveredHosts') });

});
define('fusor-ember-cli/controllers/host', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].ObjectController.extend({});

});
define('fusor-ember-cli/controllers/hostgroup', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].ObjectController.extend({});

});
define('fusor-ember-cli/controllers/hypervisor', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({
    needs: ['rhev'] });

});
define('fusor-ember-cli/controllers/hypervisor/discovered-host', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].ArrayController.extend({
    needs: ['deployment'],

    itemController: ['discovered-host'],

    selectedRhevEngine: Ember['default'].computed.alias('controllers.deployment.discovered_host'),

    // Filter out hosts selected as Hypervisor
    availableHosts: Ember['default'].computed.filter('allDiscoveredHosts', function (host, index, array) {
      return host.get('id') != this.get('selectedRhevEngine.id');
    }).property('allDiscoveredHosts', 'selectedRhevEngine'),

    hypervisorModelIds: (function () {
      if (this.get('model')) {
        var allIds = this.get('model').getEach('id');
        return allIds.removeObject(this.get('selectedRhevEngine').get('id'));
      } else {
        return [];
      }
    }).property('model.[]', 'selectedRhevEngine'),

    cntSelectedHypervisorHosts: Ember['default'].computed.alias('hypervisorModelIds.length'),

    hostInflection: (function () {
      return this.get('cntSelectedHypervisorHosts') === 1 ? 'host' : 'hosts';
    }).property('cntSelectedHypervisorHosts'),

    isAllChecked: (function (key, value) {
      if (this.get('cntSelectedHypervisorHosts') === this.get('availableHosts.length')) {
        return this.set('allChecked', true);
      } else {
        return this.set('allChecked', false);
      }
    }).property('availableHosts.@each.isSelectedAsHypervisor', 'cntSelectedHypervisorHosts'),

    allChecked: (function (key, value) {
      // get
      if (arguments.length === 1) {
        var availableHosts = this.get('availableHosts');
        var isAllChecked = this.get('model.length') === this.get('availableHosts.length');
        return availableHosts && isAllChecked;
        // setter
      } else {}
    }).property('model.@each.isSelectedAsHypervisor', 'model.[]', 'availableHosts'),

    checkAll: (function (row) {
      // TODO
      if (this.get('allChecked')) {
        // var hosts = this.get('model');
        // hosts.clear();
        // hosts.addObjects(this.get('availableHosts'));
        // return true;
        console.log('all checked true');
      } else {
        // var hosts = this.get('model');
        // return hosts.clear();
        // return false;
        console.log('all checked FALSE');
      }
    }).observes('allChecked'),

    idsChecked: (function (key) {
      var model = this.get('model');
      if (model && model.isAny('isSelectedAsHypervisor')) {
        return this.get('model').getEach('id');
      } else {
        return '';
      }
    }).property('model.@each.isSelectedAsHypervisor') });

  // TODO - this is running when each host is individually checked as well????
  // Problem because isSelectedAsHypervisor is on the itemController and not model ???
  // console.log('setter only');

});
define('fusor-ember-cli/controllers/lifecycle-environment', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].ObjectController.extend({});

});
define('fusor-ember-cli/controllers/lifecycle-environments', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].ArrayController.extend({});

});
define('fusor-ember-cli/controllers/login', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].ObjectController.extend({
    needs: ['application'],

    identification: null,
    password: null,
    errorMessage: null });

});
define('fusor-ember-cli/controllers/logout-model', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({
    actions: {
      logout: function logout() {
        alert('logout');
      }
    }
  });

});
define('fusor-ember-cli/controllers/networking', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({
    dnsName: null
  });

});
define('fusor-ember-cli/controllers/new-environment', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Controller.extend({});

});
define('fusor-ember-cli/controllers/new-organization', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Controller.extend({});

});
define('fusor-ember-cli/controllers/openstack', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({
    needs: ['deployment'],
    stepNumberOpenstack: Ember['default'].computed.alias('controllers.deployment.stepNumberOpenstack') });

});
define('fusor-ember-cli/controllers/organization', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].ObjectController.extend({});

});
define('fusor-ember-cli/controllers/organizations', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].ArrayController.extend({});

});
define('fusor-ember-cli/controllers/products', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].ArrayController.extend({

    syncingInProgress: false,
    showSuccessMessage: false,
    disableSyncButton: false,

    prog: 20,
    incrementBy: 20,

    actions: {
      syncProducts: function syncProducts() {
        this.set('syncingInProgress', true);
        this.set('disableSyncButton', true);
        this.send('incrementProgressBar');
      },

      incrementProgressBar: function incrementProgressBar() {
        var self = this;
        Ember['default'].run.later(function () {
          return self.incrementProperty('prog', self.incrementBy);
        }, 1000);
        Ember['default'].run.later(function () {
          return self.incrementProperty('prog', self.incrementBy);
        }, 2000);
        Ember['default'].run.later(function () {
          return self.incrementProperty('prog', self.incrementBy);
        }, 3000);
        Ember['default'].run.later(function () {
          return self.incrementProperty('prog', self.incrementBy);
        }, 4000);
        Ember['default'].run.later(function () {
          self.set('syncingInProgress', false);
          self.set('showSuccessMessage', true);
        }, 4500);
      }

    } });

});
define('fusor-ember-cli/controllers/review', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({

    needs: ['subscriptions', 'rhci', 'application', 'deployment'],

    isUpstream: Ember['default'].computed.alias('controllers.application.isUpstream'),
    disableNext: Ember['default'].computed.alias('controllers.subscriptions.disableNext'),

    disableTabProgress: (function () {
      return !this.get('controllers.deployment.isStarted');
    }).property('controllers.deployment.isStarted'),

    disableTabInstallation: (function () {
      return this.get('disableNext') && !this.get('isUpstream');
    }).property('disableNext', 'isUpstream'),

    nameSelectSubscriptions: Ember['default'].computed.alias('controllers.rhci.nameSelectSubscriptions'),

    stepNumberReview: Ember['default'].computed.alias('controllers.deployment.stepNumberReview') });

});
define('fusor-ember-cli/controllers/review/installation', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({
    needs: ['application', 'rhci', 'deployment', 'satellite', 'configure-organization', 'configure-environment', 'rhev-setup', 'hypervisor', 'hypervisor/discovered-host', 'engine/discovered-host', 'storage', 'networking', 'rhev-options', 'where-install', 'cloudforms-storage-domain', 'cloudforms-vm', 'review'],

    // TODO - DRY and update while deployment is finished and button should say "Deployed"
    buttonDeployTitle: (function () {
      if (this.get('controllers.deployment.isStarted')) {
        return 'Deploying ...';
      } else {
        return 'Deploy';
      }
    }).property('controllers.deployment.isStarted'),

    buttonDeployDisabled: (function () {
      return this.get('controllers.deployment.isStarted');
    }).property('controllers.deployment.isStarted'),

    showErrorMessage: false,
    errorMsg: null,
    foremanTasksURL: null,
    skipContent: Ember['default'].computed.alias('controllers.deployment.skipContent'),

    isRhevOpen: true,
    isOpenStackOpen: false,
    isCloudFormsOpen: false,

    engineHostAddressDefault: 'ovirt-hypervisor.rhci.redhat.com',
    hostAddress: Ember['default'].computed.alias('controllers.rhev-options.hostAddress'),
    engineHostName: Ember['default'].computed.alias('controllers.rhev-options.engineHostName'),

    nameDeployment: Ember['default'].computed.alias('controllers.deployment.name'),
    selectedOrganization: Ember['default'].computed.alias('controllers.deployment.selectedOrganzation'),
    selectedEnvironment: Ember['default'].computed.alias('controllers.deployment.selectedEnvironment'),
    rhevSetup: Ember['default'].computed.alias('controllers.deployment.rhevSetup'),

    isRhev: Ember['default'].computed.alias('controllers.deployment.isRhev'),
    isOpenStack: Ember['default'].computed.alias('controllers.deployment.isOpenStack'),
    isCloudForms: Ember['default'].computed.alias('controllers.deployment.isCloudForms'),

    isSelfHosted: Ember['default'].computed.alias('controllers.deployment.rhev_is_self_hosted'),
    selectedHypervisorHosts: Ember['default'].computed.alias('controllers.deployment.discovered_hosts'),

    rhev_engine_host: Ember['default'].computed.alias('controllers.deployment.discovered_host'),
    selectedRhevEngine: Ember['default'].computed.alias('controllers.deployment.discovered_host'),

    nameRHCI: Ember['default'].computed.alias('controllers.rhci.nameRHCI'),
    nameRhev: Ember['default'].computed.alias('controllers.rhci.nameRhev'),
    nameOpenStack: Ember['default'].computed.alias('controllers.rhci.nameOpenStack'),
    nameCloudForms: Ember['default'].computed.alias('controllers.rhci.nameCloudForms'),
    nameSatellite: Ember['default'].computed.alias('controllers.rhci.nameSatellite') });

});
define('fusor-ember-cli/controllers/review/progress', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({

    needs: ['deployment'],

    isRhevOpen: true,
    isOpenStackOpen: false,
    isCloudFormsOpen: false,
    foremanTasksURL: null,

    // TODO - DRY and update while deployment is finished and button should say "Deployed"
    buttonDeployTitle: (function () {
      if (this.get('controllers.deployment.isStarted')) {
        return 'Deploying ...';
      } else {
        return 'Deploy';
      }
    }).property('controllers.deployment.isStarted'),

    buttonDeployDisabled: (function () {
      return this.get('controllers.deployment.isStarted');
    }).property('controllers.deployment.isStarted'),

    showErrorMessage: false,
    errorMsg: null, // this should be overwritten by API response
    installationInProgress: true,

    prog: 1,

    incrementBy: 20 });

});
define('fusor-ember-cli/controllers/review/progress/details/task', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Controller.extend({});

});
define('fusor-ember-cli/controllers/review/progress/details/task/index', ['exports', 'ember', 'fusor-ember-cli/mixins/progress-bar-mixin'], function (exports, Ember, ProgressBarMixin) {

	'use strict';

	exports['default'] = Ember['default'].Controller.extend(ProgressBarMixin['default'], {});

});
define('fusor-ember-cli/controllers/review/progress/overview', ['exports', 'ember', 'fusor-ember-cli/mixins/progress-bar-mixin'], function (exports, Ember, ProgressBarMixin) {

	'use strict';

	exports['default'] = Ember['default'].Controller.extend(ProgressBarMixin['default'], {});

});
define('fusor-ember-cli/controllers/rhci', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].ObjectController.extend({});

});
define('fusor-ember-cli/controllers/rhev-options', ['exports', 'ember'], function (exports, Ember) {

   'use strict';

   exports['default'] = Ember['default'].Controller.extend({

      needs: ['deployment'],

      rhev_engine_admin_password: Ember['default'].computed.alias('controllers.deployment.rhev_engine_admin_password'),
      rhev_database_name: Ember['default'].computed.alias('controllers.deployment.rhev_database_name'),
      rhev_cluster_name: Ember['default'].computed.alias('controllers.deployment.rhev_cluster_name'),
      rhev_storage_name: Ember['default'].computed.alias('controllers.deployment.rhev_storage_name'),
      rhev_cpu_type: Ember['default'].computed.alias('controllers.deployment.rhev_cpu_type'),

      applicationModes: ['Both', 'Virt', 'Gluster'],
      engineLocation: ['Local', 'Remote'],
      dbSetup: ['Automatic', 'Manual'],
      yesNo: ['Yes', 'No'],
      applicationModes2: [{
         id: 1,
         name: 'Both' }, {
         id: 2,
         name: 'Virt' }, {
         id: 3,
         name: 'Gluster' }] });

});
define('fusor-ember-cli/controllers/rhev-setup', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({

    needs: ['deployment'],

    rhev_is_self_hosted: Ember['default'].computed.alias('controllers.deployment.rhev_is_self_hosted'),

    rhevSetup: (function () {
      return this.get('rhev_is_self_hosted') ? 'selfhost' : 'rhevhost';
    }).property('rhev_is_self_hosted'),

    rhevSetupTitle: (function () {
      return this.get('rhev_is_self_hosted') ? 'Self Hosted' : 'Host + Engine';
    }).property('rhev_is_self_hosted'),

    isSelfHosted: (function () {
      return this.get('rhevSetup') === 'selfhost';
    }).property('rhevSetup'),

    actions: {
      rhevSetupChanged: function rhevSetupChanged(value) {
        return this.get('controllers.deployment').set('rhev_is_self_hosted', this.get('isSelfHosted'));
      }
    }

  });

});
define('fusor-ember-cli/controllers/rhev', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({
    needs: ['application', 'rhev-setup', 'side-menu'],

    rhevSetup: Ember['default'].computed.alias('controllers.rhev-setup.rhevSetup'),

    isSelfHost: (function () {
      return this.get('rhevSetup') === 'selfhost';
    }).property('rhevSetup'),

    engineTabName: (function () {
      if (this.get('isSelfHost')) {
        return 'Hypervisor/engine';
      } else {
        return 'Engine';
      }
    }).property('isSelfHost') });

});
define('fusor-ember-cli/controllers/satellite', ['exports', 'ember', 'fusor-ember-cli/mixins/satellite-controller-mixin'], function (exports, Ember, SatelliteControllerMixin) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend(SatelliteControllerMixin['default'], {

    needs: ['deployment'],

    satelliteTabRouteName: Ember['default'].computed.alias('controllers.deployment.satelliteTabRouteName'),
    organizationTabRouteName: Ember['default'].computed.alias('controllers.deployment.organizationTabRouteName'),
    lifecycleEnvironmentTabRouteName: Ember['default'].computed.alias('controllers.deployment.lifecycleEnvironmentTabRouteName'),

    disableTabDeploymentName: Ember['default'].computed.alias('controllers.deployment.disableTabDeploymentName'),
    disableTabConfigureOrganization: Ember['default'].computed.alias('controllers.deployment.disableTabConfigureOrganization'),
    disableTabLifecycleEnvironment: Ember['default'].computed.alias('controllers.deployment.disableTabLifecycleEnvironment') });

});
define('fusor-ember-cli/controllers/satellite/index', ['exports', 'ember', 'fusor-ember-cli/mixins/satellite-controller-mixin'], function (exports, Ember, SatelliteControllerMixin) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend(SatelliteControllerMixin['default'], {

    needs: ['satellite', 'deployment'],

    validations: {
      name: {
        presence: true } },

    name: Ember['default'].computed.alias('controllers.deployment.name'),
    description: Ember['default'].computed.alias('controllers.deployment.description'),

    organizationTabRouteName: Ember['default'].computed.alias('controllers.deployment.organizationTabRouteName'),

    disableNextOnDeploymentName: Ember['default'].computed.alias('controllers.deployment.disableNextOnDeploymentName'),

    idSatName: 'deployment_sat_name',
    idSatDesc: 'deployment_sat_desc' });

});
define('fusor-ember-cli/controllers/satellite/subscription', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].ObjectController.extend({
    isChecked: false,

    registerOnParent: (function () {
      this.send('registerToggle', this);
    }).on('init') });

});
define('fusor-ember-cli/controllers/side-menu', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({
    showSideMenu: false,

    uxDefaultNote: 'Note: Please write notes on [etherpad](http://rhci.pad.engineering.redhat.com/wireframe-mtg-10-30-2014), since this pad is ready-only and will note save anything.\n\n',
    uxHeaderNote: '\n\n\n**UX Notes / Specs** for this route\n\n',
    uxHeaderTodo: '\n\n\n\n\n\n\n**UX Todos / Questions** for this route\n\n',
    uxNotes: 'none', //this should be overwritten by controller
    uxTodos: 'none', //this should be overwritten by controller
    uxNotesDisplay: (function () {
      return this.get('uxDefaultNote') + this.get('uxHeaderNote') + this.get('uxNotes') + this.get('uxHeaderTodo') + this.get('uxTodos');
    }).property('uxNotes'),

    etherpadBaseUrl: 'http://rhci.pad.engineering.redhat.com/',
    etherpadName: '',
    etherpadUrl: (function () {
      return this.get('etherpadBaseUrl') + this.get('etherpadName');
    }).property('etherpadName'),

    actions: {
      toggleSideMenu: function toggleSideMenu() {
        this.set('showSideMenu', this.toggleProperty('showSideMenu'));
      }
    }
  });

});
define('fusor-ember-cli/controllers/storage', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({

    needs: ['deployment'],

    rhev_storage_type: Ember['default'].computed.alias('controllers.deployment.rhev_storage_type'),
    rhev_storage_address: Ember['default'].computed.alias('controllers.deployment.rhev_storage_address'),
    rhev_share_path: Ember['default'].computed.alias('controllers.deployment.rhev_share_path'),
    step3RouteName: Ember['default'].computed.alias('controllers.deployment.step3RouteName'),

    isNFS: (function () {
      return this.get('rhev_storage_type') === 'NFS';
    }).property('rhev_storage_type') });

});
define('fusor-ember-cli/controllers/subscription', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].ObjectController.extend({
    isChecked: false,

    registerOnParent: (function () {
      this.send('registerToggle', this);
    }).on('init') });

});
define('fusor-ember-cli/controllers/subscriptions', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Controller.extend({});

});
define('fusor-ember-cli/controllers/subscriptions/credentials', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].ObjectController.extend({

    username: '',
    password: '',
    disableCredentialsNext: (function () {
      return this.get('username.length') === 0 || this.get('password.length') === 0;
    }).property('username', 'password')

  });

});
define('fusor-ember-cli/controllers/subscriptions/select-subscriptions', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].ArrayController.extend({
    needs: ['application', 'deployment'],

    isUpstream: Ember['default'].computed.alias('controllers.application.isUpstream'),
    stepNumberSubscriptions: Ember['default'].computed.alias('controllers.deployment.stepNumberSubscriptions'),

    isOnlyShowSubscriptions: true,

    toggles: (function () {
      return Ember['default'].A([]);
    }).property(),

    /* boolean, computed getter and setter */
    allChecked: (function (key, value) {
      if (arguments.length === 1) {
        var toggles = this.get('toggles');
        return toggles && toggles.isEvery('isChecked');
      } else {
        this.get('toggles').setEach('isChecked', value);
        return value;
      }
    }).property('toggles.@each.isChecked'),

    totalCountSubscriptions: Ember['default'].computed.alias('model.length'),

    allSelectedItems: Ember['default'].computed.filterBy('toggles', 'isChecked', true),
    totalSelectedCount: Ember['default'].computed.alias('allSelectedItems.length'),

    disableSubscriptionsNext: true, // CHANGE to true when deploying
    attachingInProgress: false,
    showAttachedSuccessMessage: false,

    prog: 20,
    incrementBy: 20,

    disableAttachButton: (function () {
      return this.get('totalSelectedCount') === 0;
    }).property('totalSelectedCount'),

    actions: {
      registerToggle: function registerToggle(toggle) {
        this.get('toggles').addObject(toggle);
      },
      deregisterToggle: function deregisterToggle(toggle) {
        this.get('toggles').removeObject(toggle);
      },
      attachSubscriptions: function attachSubscriptions() {
        this.set('attachingInProgress', true);
        this.set('disableAttachButton', true);
        this.send('incrementProgressBar');
      },

      incrementProgressBar: function incrementProgressBar() {
        var self = this;
        Ember['default'].run.later(function () {
          return self.incrementProperty('prog', self.incrementBy);
        }, 1000);
        Ember['default'].run.later(function () {
          return self.incrementProperty('prog', self.incrementBy);
        }, 2000);
        Ember['default'].run.later(function () {
          return self.incrementProperty('prog', self.incrementBy);
        }, 3000);
        Ember['default'].run.later(function () {
          return self.incrementProperty('prog', self.incrementBy);
        }, 4000);
        Ember['default'].run.later(function () {
          self.set('disableSubscriptionsNext', false);
          self.set('disableAttachButton', false);
          self.set('attachingInProgress', false);
          self.set('showAttachedSuccessMessage', true);
        }, 4500);
      } } });

});
define('fusor-ember-cli/controllers/where-install', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].ObjectController.extend({

    needs: ['deployment'],

    cfme_install_loc: Ember['default'].computed.alias('controllers.deployment.cfme_install_loc'),

    disableRHEV: false,
    disableOpenStack: false,

    actions: {
      cfmeLocationChanged: function cfmeLocationChanged() {}
    }

  });

});
define('fusor-ember-cli/helpers/fa-icon', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var FA_PREFIX = /^fa\-.+/;

  var warn = Ember['default'].Logger.warn;

  /**
   * Handlebars helper for generating HTML that renders a FontAwesome icon.
   *
   * @param  {String} name    The icon name. Note that the `fa-` prefix is optional.
   *                          For example, you can pass in either `fa-camera` or just `camera`.
   * @param  {Object} options Options passed to helper.
   * @return {Ember.Handlebars.SafeString} The HTML markup.
   */
  var faIcon = function faIcon(name, options) {
    if (Ember['default'].typeOf(name) !== 'string') {
      var message = 'fa-icon: no icon specified';
      warn(message);
      return Ember['default'].String.htmlSafe(message);
    }

    var params = options.hash,
        classNames = [],
        html = '';

    classNames.push('fa');
    if (!name.match(FA_PREFIX)) {
      name = 'fa-' + name;
    }
    classNames.push(name);
    if (params.spin) {
      classNames.push('fa-spin');
    }
    if (params.flip) {
      classNames.push('fa-flip-' + params.flip);
    }
    if (params.rotate) {
      classNames.push('fa-rotate-' + params.rotate);
    }
    if (params.lg) {
      warn('fa-icon: the \'lg\' parameter is deprecated. Use \'size\' instead. I.e. {{fa-icon size="lg"}}');
      classNames.push('fa-lg');
    }
    if (params.x) {
      warn('fa-icon: the \'x\' parameter is deprecated. Use \'size\' instead. I.e. {{fa-icon size="' + params.x + '"}}');
      classNames.push('fa-' + params.x + 'x');
    }
    if (params.size) {
      if (Ember['default'].typeOf(params.size) === 'string' && params.size.match(/\d+/)) {
        params.size = Number(params.size);
      }
      if (Ember['default'].typeOf(params.size) === 'number') {
        classNames.push('fa-' + params.size + 'x');
      } else {
        classNames.push('fa-' + params.size);
      }
    }
    if (params.fixedWidth) {
      classNames.push('fa-fw');
    }
    if (params.listItem) {
      classNames.push('fa-li');
    }
    if (params.pull) {
      classNames.push('pull-' + params.pull);
    }
    if (params.border) {
      classNames.push('fa-border');
    }
    if (params.classNames && !Ember['default'].isArray(params.classNames)) {
      params.classNames = [params.classNames];
    }
    if (!Ember['default'].isEmpty(params.classNames)) {
      Array.prototype.push.apply(classNames, params.classNames);
    }

    html += '<';
    var tagName = params.tagName || 'i';
    html += tagName;
    html += ' class=\'' + classNames.join(' ') + '\'';
    if (params.title) {
      html += ' title=\'' + params.title + '\'';
    }
    if (params.ariaHidden === undefined || params.ariaHidden) {
      html += ' aria-hidden="true"';
    }
    html += '></' + tagName + '>';
    return Ember['default'].String.htmlSafe(html);
  };

  exports['default'] = Ember['default'].Handlebars.makeBoundHelper(faIcon);

  exports.faIcon = faIcon;

});
define('fusor-ember-cli/helpers/raw-text', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports.rawText = rawText;

  function rawText(input) {
    return new Handlebars.SafeString(input);
  }

  exports['default'] = Ember['default'].Handlebars.makeBoundHelper(rawText);

});
define('fusor-ember-cli/initialize', ['exports', 'ember', 'ember-idx-utils/config'], function (exports, Em, IdxConfig) {

  'use strict';

  exports['default'] = {
    name: 'ember-idx-utils',
    initialize: function initialize() {
      if (!Em['default'].IdxConfig) {
        Em['default'].IdxConfig = IdxConfig['default'].create();
      }
    }
  };

});
define('fusor-ember-cli/initializers/app-version', ['exports', 'fusor-ember-cli/config/environment', 'ember'], function (exports, config, Ember) {

  'use strict';

  var classify = Ember['default'].String.classify;
  var registered = false;

  exports['default'] = {
    name: 'App Version',
    initialize: function initialize(container, application) {
      if (!registered) {
        var appName = classify(application.toString());
        Ember['default'].libraries.register(appName, config['default'].APP.version);
        registered = true;
      }
    }
  };

});
define('fusor-ember-cli/initializers/ember-idx-modal', ['exports', 'ember', 'ember-idx-utils/config'], function (exports, Em, IdxConfig) {

    'use strict';

    exports['default'] = {
        name: 'ember-idx-modal',
        initialize: function initialize() {
            var Config = Em['default'].IdxConfig = Em['default'].IdxConfig ? Em['default'].IdxConfig : IdxConfig['default'].create();

            var defaultConfig = Config.getConfig('bs');
            if (!defaultConfig) {
                Config.addConfig('bs');
                defaultConfig = Config.getConfig('bs');
            }

            defaultConfig.modal = {
                classes: ['em-modal', 'modal', 'fade'],
                bodyClasses: ['modal-body'],
                titleClasses: ['modal-header'],
                footerClasses: ['modal-footer']
            };
        }
    };

});
define('fusor-ember-cli/initializers/export-application-global', ['exports', 'ember', 'fusor-ember-cli/config/environment'], function (exports, Ember, config) {

  'use strict';

  exports.initialize = initialize;

  function initialize(container, application) {
    var classifiedName = Ember['default'].String.classify(config['default'].modulePrefix);

    if (config['default'].exportApplicationGlobal && !window[classifiedName]) {
      window[classifiedName] = application;
    }
  }

  ;

  exports['default'] = {
    name: 'export-application-global',

    initialize: initialize
  };

});
define('fusor-ember-cli/mixins/configure-environment-mixin', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Mixin.create({

    selectedEnvironment: Ember['default'].computed.alias('model'),

    nonLibraryEnvironments: Ember['default'].computed.filterBy('lifecycleEnvironments', 'library', false),
    libraryEnvironments: Ember['default'].computed.filterBy('lifecycleEnvironments', 'library', true),

    hasLibrary: (function () {
      return this.get('libraryEnvironments.length') > 0;
    }).property('libraryEnvironments'),
    libraryEnvForOrg: (function () {
      if (this.get('hasLibrary')) {
        return this.get('libraryEnvironments.firstObject');
      }
    }).property('libraryEnvironments', 'hasLibrary'),

    fields_env: {},

    showAlertMessage: false,

    envLabelName: (function () {
      if (this.get('name')) {
        return this.get('name').underscore();
      }
    }).property('name'),
    label: Ember['default'].computed.alias('envLabelName') });

});
define('fusor-ember-cli/mixins/configure-organization-mixin', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Mixin.create({

    needs: ['application'],

    selectedOrganization: Ember['default'].computed.alias('model'),

    fields_org: {},

    showAlertMessage: false,

    // default Organization name for New Organizations
    defaultOrgName: (function () {
      return this.getWithDefault('defaultOrg', this.get('deploymentName'));
    }).property(),

    orgLabelName: (function () {
      if (this.get('fields_org.name')) {
        return this.get('defaultOrgName').underscore();
      }
    }).property('defaultOrgName'),

    actions: {
      createOrganization: function createOrganization() {
        //if (this.get('fields_org.isDirty')) {
        var self = this;
        this.set('fields_org.name', this.get('defaultOrgName'));
        var organization = this.store.createRecord('organization', this.get('fields_org'));
        self.set('fields_org', {});
        self.set('defaultOrgName', null);
        self.set('selectedOrganization', organization);
        organization.save().then(function (org) {
          //success
          self.set('organization', org);
          return self.set('showAlertMessage', true);
        }, function (error) {
          alert('There was an error trying to save: ' + error);
          //organization.destroyRecord();
          //organization.rollback()
          //organization.reload();
          //organization.unloadRecord();
        });
        //}
      } }

  });

});
define('fusor-ember-cli/mixins/deployment-controller-mixin', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Mixin.create({

    needs: ['application', 'subscriptions', 'configure-organization', 'configure-environment', 'subscriptions/select-subscriptions'],

    isRhev: Ember['default'].computed.alias('deploy_rhev'),
    isOpenStack: Ember['default'].computed.alias('deploy_openstack'),
    isCloudForms: Ember['default'].computed.alias('deploy_cfme'),

    // default is downstream
    isUpstream: false,
    hideSubscriptions: true,
    isSubscriptions: (function () {
      return !(this.get('hideSubscriptions') && !this.get('isUpstream'));
    }).property('isUpstream', 'hideSubscriptions'),

    // will be overwritten be routes
    isHideWizard: null,

    // declared in controllers, and not in mixin
    // isRhev
    // isOpenStack
    // isCloudForms

    // route names will be overwrriten by active hook in routes/deployment.js
    // and routes/deployment-new.js and routes/start.js and routes/deployment-new/start.js
    satelliteTabRouteName: null,
    organizationTabRouteName: null,
    lifecycleEnvironmentTabRouteName: null,

    // nameSelectSubscriptions: function() {
    //   if (this.get('isUpstream')) { return "Select Content Source"; } else { return "Select Subscriptions"; }
    // }.property('isUpstream'),

    disableNextOnStart: (function () {
      return !(this.get('isRhev') || this.get('isOpenStack') || this.get('isCloudForms'));
    }).property('isRhev', 'isOpenStack', 'isCloudForms'),

    // names
    nameRHCI: (function () {
      if (this.get('isUpstream')) {
        return 'Fusor';
      } else {
        return 'RHCI';
      }
    }).property('isUpstream'),

    nameRedHat: (function () {
      if (this.get('isUpstream')) {
        return '';
      } else {
        return 'Red Hat';
      }
    }).property('isUpstream'),

    nameSatellite: (function () {
      if (this.get('isUpstream')) {
        return 'Foreman';
      } else {
        return 'Satellite';
      }
    }).property('isUpstream'),

    nameRhev: (function () {
      if (this.get('isUpstream')) {
        return 'oVirt';
      } else {
        return 'RHEV';
      }
    }).property('isUpstream'),

    nameOpenStack: (function () {
      if (this.get('isUpstream')) {
        return 'RDO';
      } else {
        return 'RHELOSP';
      }
    }).property('isUpstream'),

    nameCloudForms: (function () {
      if (this.get('isUpstream')) {
        return 'ManageIQ';
      } else {
        return 'CloudForms';
      }
    }).property('isUpstream'),

    // logo
    logoPath: (function () {
      if (this.get('isUpstream')) {
        return 'assets/foreman.png';
      } else {
        return 'assets/Header-logotype.png';
      }
    }).property('isUpstream'),

    // steps
    stepNumberRhev: 2,

    stepNumberOpenstack: (function () {
      if (this.get('isRhev')) {
        return 3;
      } else {
        return 2;
      }
    }).property('isRhev'),

    stepNumberCloudForms: (function () {
      if (this.get('isRhev') && this.get('isOpenStack')) {
        return 4;
      } else if (this.get('isRhev') || this.get('isOpenStack')) {
        return 3;
      } else {
        return 2;
      }
    }).property('isRhev', 'isOpenStack'),

    stepNumberSubscriptions: (function () {
      if (this.get('isRhev') && this.get('isOpenStack') && this.get('isCloudForms')) {
        return 5;
      } else if (this.get('isRhev') && this.get('isOpenStack') || this.get('isRhev') && this.get('isCloudForms') || this.get('isOpenStack') && this.get('isCloudForms')) {
        return 4;
      } else if (this.get('isRhev') || this.get('isOpenStack') || this.get('isCloudForms')) {
        return 3;
      } else {
        return 2;
      }
    }).property('isRhev', 'isOpenStack', 'isCloudForms'),

    // calculate temporary without isSubscriptions
    stepNumberReviewTemp: (function () {
      if (this.get('isRhev') && this.get('isOpenStack') && this.get('isCloudForms')) {
        return 6;
      } else if (this.get('isRhev') && this.get('isOpenStack') || this.get('isRhev') && this.get('isCloudForms') || this.get('isOpenStack') && this.get('isCloudForms')) {
        return 5;
      } else if (this.get('isRhev') || this.get('isOpenStack') || this.get('isCloudForms')) {
        return 4;
      } else {
        return 3;
      }
    }).property('isRhev', 'isOpenStack', 'isCloudForms'),

    stepNumberReview: (function () {
      if (this.get('isSubscriptions')) {
        return this.get('stepNumberReviewTemp');
      } else {
        return this.get('stepNumberReviewTemp') - 1;
      }
    }).property('stepNumberReviewTemp', 'isSubscriptions'),

    step2RouteName: (function () {
      if (this.get('isRhev')) {
        return 'rhev';
      } else if (this.get('isOpenStack')) {
        return 'openstack';
      } else if (this.get('isCloudForms')) {
        return 'cloudforms';
      }
    }).property('isRhev', 'isOpenStack', 'isCloudForms'),

    step3RouteName: (function () {
      if (this.get('step2RouteName') === 'rhev') {
        if (this.get('isOpenStack')) {
          return 'openstack';
        } else if (this.get('isCloudForms')) {
          return 'cloudforms';
        } else if (this.get('isSubscriptions')) {
          return 'subscriptions';
        } else {
          return 'review';
        }
      } else if (this.get('step2RouteName') === 'openstack') {
        if (this.get('isCloudForms')) {
          return 'cloudforms';
        } else if (this.get('isSubscriptions')) {
          return 'subscriptions';
        } else {
          return 'review';
        }
      } else if (this.get('step2RouteName') === 'cloudforms') {
        if (this.get('isSubscriptions')) {
          return 'subscriptions';
        } else {
          return 'review';
        }
      }
    }).property('step2RouteName', 'isOpenStack', 'isCloudForms', 'isSubscriptions') });

});
define('fusor-ember-cli/mixins/deployment-new-controller-mixin', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Mixin.create({

    beforeModel: function beforeModel() {
      if (this.controllerFor('deployment-new').get('disableNextOnStart')) {
        return this.transitionTo('deployment-new.start');
      }
    } });

});
define('fusor-ember-cli/mixins/deployment-new-satellite-route-mixin', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Mixin.create({

    beforeModel: function beforeModel() {
      if (this.controllerFor('deployment-new').get('disableNextOnStart')) {
        return this.transitionTo('deployment-new.start');
      }
    } });

});
define('fusor-ember-cli/mixins/deployment-route-mixin', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Mixin.create({

    actions: {
      saveDeployment: function saveDeployment(routeNameForTransition) {
        var deployment = this.get('controller.model');
        var self = this;
        deployment.save().then(function (result) {
          if (routeNameForTransition) {
            self.transitionTo(routeNameForTransition, result);
          }
        }, function (error) {
          alert('There was an error trying to save: ' + error);
        });
      } }

  });

});
define('fusor-ember-cli/mixins/disable-tab-mixin', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Mixin.create({

    needs: ['deployment', 'configure-organization', 'configure-environment'],

    hasName: (function () {
      return this.get('name.length') > 0;
    }).property('name'),
    hasNoName: Ember['default'].computed.not('hasName'),

    hasOrganization: (function () {
      return !!this.get('organization').get('id'); // without .get('id') returns promise that is true
    }).property('organization'),
    hasNoOrganization: Ember['default'].computed.not('hasOrganization'),

    hasLifecycleEnvironment: (function () {
      return !!this.get('lifecycle_environment').get('id'); // without .get('id') returns promise that is true
    }).property('lifecycle_environment'),
    hasNoLifecycleEnvironment: Ember['default'].computed.not('hasLifecycleEnvironment'),

    // disable All if there is no deployment name
    disableAll: Ember['default'].computed.alias('hasNoName'),

    // disable Next on Deployment Name if there is no deployment name
    disableNextOnDeploymentName: Ember['default'].computed.alias('hasNoName'),

    // disable Next on Configure Organization if no organization is selected
    disableNextOnConfigureOrganization: Ember['default'].computed.or('hasNoOrganization', 'disableAll'),

    // disable Next on Lifecycle Environment if no lifecycle environment is selected
    disableNextOnLifecycleEnvironment: Ember['default'].computed.or('hasNoLifecycleEnvironment', 'disableAll'),

    // Satellite Tabs Only
    disableTabDeploymentName: false, // always enable tab for entering deployment name
    disableTabConfigureOrganization: Ember['default'].computed.alias('disableNextOnDeploymentName'),
    disableTabLifecycleEnvironment: Ember['default'].computed.alias('disableNextOnConfigureOrganization') });

});
define('fusor-ember-cli/mixins/meta', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Mixin.create({
    meta: (function () {
      return this.store.metadataFor(this.get('model').type);
    }).property('')
  });

});
define('fusor-ember-cli/mixins/progress-bar-mixin', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Mixin.create({

    // START REFRESH
    intervalPolling: (function () {
      return 5000; // Time between refreshing (in ms)
    }).property().readOnly(),

    scheduleNextRefresh: function scheduleNextRefresh(f) {
      return Ember['default'].run.later(this, function () {
        f.apply(this);
        this.set('timer', this.scheduleNextRefresh(f));
      }, this.get('intervalPolling'));
    },

    // executes `refreshModel` for every intervalPolling.
    startPolling: function startPolling() {
      this.get('model').reload(); // run immediately
      this.set('timer', this.scheduleNextRefresh(this.get('refreshModel'))); //and then repeats
    },

    stopPolling: function stopPolling() {
      Ember['default'].run.cancel(this.get('timer'));
    },

    refreshModel: function refreshModel() {
      return this.get('model').reload();
    },
    // END REFRESH

    percentProgress: (function () {
      return (this.get('model.progress') * 100).toFixed(1);
    }).property('model.progress'),

    percentProgressInt: (function () {
      return (this.get('model.progress') * 100).toFixed(0);
    }).property('model.progress'),

    styleWidth: (function () {
      return 'width: ' + (this.get('model.progress') * 100).toFixed(1) + '%;';
    }).property('model.progress'),

    progressBarClass: (function () {
      var result = this.get('model.result');
      if (result === 'success') {
        return 'progress-bar progress-bar-success';
      } else if (result === 'error') {
        return 'progress-bar progress-bar-danger';
      } else if (result === 'warning') {
        return 'progress-bar progress-bar-warning';
      } else {
        return 'progress-bar';
      }
    }).property('model.result'),

    deploymentStatus: (function () {
      var progress = this.get('model.progress');
      if (progress) {
        if (progress === 1) {
          return 'Finished';
        } else {
          return 'In Process';
        }
      } else {
        return 'Not Started';
      }
    }).property('model.progress'),

    isSpin: (function () {
      return this.get('deploymentStatus') === 'In Process' && this.get('model.result') === 'pending';
    }).property('deploymentStatus', 'model.result'),

    progressBarMsg: (function () {
      if (this.get('deploymentStatus') === 'In Process' && this.get('model.result') === 'pending') {
        return 'Downloading';
      } else if (this.get('deploymentStatus') === 'Finished') {
        return 'Deployment successful';
      } else if (this.get('model.result') === 'error') {
        return 'Error';
      } else if (this.get('model.result') === 'warning') {
        return 'Warning';
      }
    }).property('deploymentStatus', 'model.result'),

    progressBarSubMsg: (function () {
      if (this.get('deploymentStatus') === 'In Process' && this.get('model.result') === 'pending') {
        return 'Installing components';
      }
    }).property('deploymentStatus', 'model.result') });

});
define('fusor-ember-cli/mixins/satellite-controller-mixin', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Mixin.create({

    needs: ['configure-organization', 'configure-environment'],

    rhciModalButtons: [Ember['default'].Object.create({ title: 'No', clicked: 'cancel', dismiss: 'modal' }), Ember['default'].Object.create({ title: 'Yes', clicked: 'redirectToDeployments', type: 'primary' })],

    actions: {
      redirectToDeployments: function redirectToDeployments() {
        this.transitionTo('deployments');
      }
    }

  });

});
define('fusor-ember-cli/mixins/save-hostname-mixin', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Mixin.create({

    actions: {
      saveHostname: function saveHostname() {
        var host = this.get('host');
        console.log(host);
        var self = this;
        var token = $('meta[name="csrf-token"]').attr('content');

        return new Ember['default'].RSVP.Promise(function (resolve, reject) {
          Ember['default'].$.ajax({
            url: '/api/v21/discovered_hosts/' + host.get('id') + '/rename',
            type: 'PUT',
            data: JSON.stringify({ discovered_host: { name: host.get('name') } }),
            headers: {
              Accept: 'application/json',
              'Content-Type': 'application/json',
              'X-CSRF-Token': token,
              Authorization: 'Basic ' + self.get('session.basicAuthToken')
            },
            success: function success(response) {
              resolve(response);
            },

            error: function error(response) {
              reject(response);
            }
          });
        });
      }
    }

  });

});
define('fusor-ember-cli/mixins/start-controller-mixin', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Mixin.create({

    isUpstream: false,

    // declared in controllers, and not in mixin
    // isRhev
    // isOpenStack
    // isCloudForms

    // route of Next button. It will be overwrriten by active hook in routes/start.js and routes/deployment-new/start.js
    satelliteTabRouteName: null,

    // disable Next button if none selected
    disableNextOnStart: (function () {
      return !(this.get('isRhev') || this.get('isOpenStack') || this.get('isCloudForms'));
    }).property('isRhev', 'isOpenStack', 'isCloudForms'),

    // names
    nameRHCI: (function () {
      if (this.get('isUpstream')) {
        return 'Fusor';
      } else {
        return 'RHCI';
      }
    }).property('isUpstream'),

    nameRedHat: (function () {
      if (this.get('isUpstream')) {
        return '';
      } else {
        return 'Red Hat';
      }
    }).property('isUpstream'),

    nameSatellite: (function () {
      if (this.get('isUpstream')) {
        return 'Foreman';
      } else {
        return 'Satellite';
      }
    }).property('isUpstream'),

    nameRhev: (function () {
      if (this.get('isUpstream')) {
        return 'oVirt';
      } else {
        return 'RHEV';
      }
    }).property('isUpstream'),

    nameOpenStack: (function () {
      if (this.get('isUpstream')) {
        return 'RDO';
      } else {
        return 'RHELOSP';
      }
    }).property('isUpstream'),

    nameCloudForms: (function () {
      if (this.get('isUpstream')) {
        return 'ManageIQ';
      } else {
        return 'CloudForms';
      }
    }).property('isUpstream'),

    // images
    imgRhev: (function () {
      if (this.get('isUpstream')) {
        return '/assets/r/ovirt-640-210.png';
      } else {
        return '/assets/r/rhci-rhev-640-210.png';
      }
    }).property('isUpstream'),

    imgOpenStack: (function () {
      if (this.get('isUpstream')) {
        return '/assets/r/rdo-640-210.png';
      } else {
        return '/assets/r/rhci-openstack-640-210.png';
      }
    }).property('isUpstream'),

    imgCloudForms: (function () {
      if (this.get('isUpstream')) {
        return '/assets/r/manageiq-640-210.png';
      } else {
        return '/assets/r/rhci-cloudforms-640-210.png';
      }
    }).property('isUpstream') });

});
define('fusor-ember-cli/models/deployment', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    name: DS['default'].attr('string'),
    description: DS['default'].attr('string'),
    organization: DS['default'].belongsTo('organization', { async: true }),
    lifecycle_environment: DS['default'].belongsTo('lifecycle-environment', { async: true }),
    foreman_task_uuid: DS['default'].attr('string'),

    deploy_rhev: DS['default'].attr('boolean'),
    deploy_cfme: DS['default'].attr('boolean'),
    deploy_openstack: DS['default'].attr('boolean'),

    rhev_is_self_hosted: DS['default'].attr('boolean'),

    rhev_engine_admin_password: DS['default'].attr('string'),
    rhev_database_name: DS['default'].attr('string'),
    rhev_cluster_name: DS['default'].attr('string'),
    rhev_storage_name: DS['default'].attr('string'),
    rhev_storage_type: DS['default'].attr('string'),
    rhev_storage_address: DS['default'].attr('string'),
    rhev_cpu_type: DS['default'].attr('string'),
    rhev_share_path: DS['default'].attr('string'),

    cfme_install_loc: DS['default'].attr('string'),

    created_at: DS['default'].attr('date'),
    updated_at: DS['default'].attr('date'),

    // has one Engine
    discovered_host: DS['default'].belongsTo('discovered-host', { inverse: 'deployment', async: true }),

    // has many Hypervisors
    discovered_hosts: DS['default'].hasMany('discovered-host', { inverse: 'deployments', async: true }) });

});
define('fusor-ember-cli/models/discovered-host', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    name: DS['default'].attr('string'),
    mac: DS['default'].attr('string'),
    subnet_id: DS['default'].attr('string'),
    subnet_name: DS['default'].attr('string'),
    organization_id: DS['default'].attr('string'),
    organization_name: DS['default'].attr('string'),
    location_id: DS['default'].attr('string'),
    location_name: DS['default'].attr('string'),
    memory: DS['default'].attr('string'),
    disk_count: DS['default'].attr('string'),
    disks_size: DS['default'].attr('string'),
    cpus: DS['default'].attr('string'),

    // relationship to Engine
    deployment: DS['default'].belongsTo('deployment', { inverse: 'discovered_host', async: true }),

    // relationship to Hypervisors
    deployments: DS['default'].hasMany('deployment', { inverse: 'discovered_hosts', async: true }),

    created_at: DS['default'].attr('date'),
    updated_at: DS['default'].attr('date') });

});
define('fusor-ember-cli/models/environment', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    name: DS['default'].attr('string')
    //  organization: DS.belongsTo('organization')
  });

});
define('fusor-ember-cli/models/foreman-task', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    type: DS['default'].attr('string'),
    label: DS['default'].attr('string'),
    pending: DS['default'].attr('boolean'),
    humanized_name: DS['default'].attr('string'),
    username: DS['default'].attr('string'),
    started_at: DS['default'].attr('string'),
    ended_at: DS['default'].attr('string'),
    state: DS['default'].attr('string'),
    result: DS['default'].attr('string'),
    external_id: DS['default'].attr('string'),
    progress: DS['default'].attr('string'),
    parent_task_id: DS['default'].attr('string'),
    humanized_errors: DS['default'].attr('string'),
    humanized_output: DS['default'].attr('string'),
    humanized_input: DS['default'].attr('string'),
    taskUrl: (function () {
      return '/foreman_tasks/tasks/' + this.get('id');
    }).property('id')
  });

});
define('fusor-ember-cli/models/host', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    name: DS['default'].attr('string'),
    hostgroup: DS['default'].attr('string'),
    mac: DS['default'].attr('string'),
    domain: DS['default'].attr('string'),
    subnet: DS['default'].attr('string'),
    operatingsystem: DS['default'].attr('string'),
    environment: DS['default'].attr('string'),
    model: DS['default'].attr('string'),
    location: DS['default'].attr('string'),
    organization: DS['default'].attr('string'),
    cpu: DS['default'].attr('string'),
    memory: DS['default'].attr('string'),
    vendor: DS['default'].attr('string') });

});
define('fusor-ember-cli/models/hostgroup', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    name: DS['default'].attr('string') });

  // hostgroup: DS.attr('string'),
  // mac: DS.attr('string'),
  // domain: DS.attr('string'),
  // subnet: DS.attr('string'),
  // operatingsystem: DS.attr('string'),
  // environment: DS.attr('string'),
  // model: DS.attr('string'),
  // location: DS.attr('string'),
  // organization: DS.attr('string')

});
define('fusor-ember-cli/models/lifecycle-environment', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    name: DS['default'].attr('string'),
    label: DS['default'].attr('string'),
    description: DS['default'].attr('string'),
    library: DS['default'].attr('boolean'),
    prior: DS['default'].attr('number'),
    created_at: DS['default'].attr('date'),
    updated_at: DS['default'].attr('date'),
    organization: DS['default'].belongsTo('organization', { async: true })
  });

});
define('fusor-ember-cli/models/location', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    name: DS['default'].attr('string'),
    title: DS['default'].attr('string')
  });

});
define('fusor-ember-cli/models/organization', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    name: DS['default'].attr('string'),
    title: DS['default'].attr('string'),
    label: DS['default'].attr('string'),
    description: DS['default'].attr('string'),
    lifecycle_environments: DS['default'].hasMany('lifecycle-environment', { async: true }) });

  //  subnets: DS.hasMany('subnet', { async: true })

});
define('fusor-ember-cli/models/product', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    name: DS['default'].attr('string'),
    state_time: DS['default'].attr('string'),
    duration: DS['default'].attr('string'),
    size: DS['default'].attr('string'),
    result: DS['default'].attr('string') });

});
define('fusor-ember-cli/models/subnet', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    network: DS['default'].attr('string'),
    mask: DS['default'].attr('string'),
    priority: DS['default'].attr('number'),
    name: DS['default'].attr('string'),
    vlanid: DS['default'].attr('string'),
    created_at: DS['default'].attr('date'),
    updated_at: DS['default'].attr('date'),
    dhcp_id: DS['default'].attr('number'),
    tftp_id: DS['default'].attr('number'),
    from: DS['default'].attr('string'),
    to: DS['default'].attr('string'),
    gateway: DS['default'].attr('string'),
    dns_primary: DS['default'].attr('string'),
    dns_secondary: DS['default'].attr('string'),
    dns_id: DS['default'].attr('number'),
    sort_network_id: DS['default'].attr('number'),
    boot_mode: DS['default'].attr('string'),
    ipam: DS['default'].attr('string'),
    trafficTypes: DS['default'].hasMany('trafficType', { async: true }),
    organization: DS['default'].belongsTo('organization')
  });

});
define('fusor-ember-cli/models/subscription', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    name: DS['default'].attr('string'),
    contract_number: DS['default'].attr('string'),
    available: DS['default'].attr('string'),
    subscription_type: DS['default'].attr('string'),
    start_date: DS['default'].attr('date'),
    end_date: DS['default'].attr('date'),
    quantity: DS['default'].attr('number')
  });

});
define('fusor-ember-cli/models/traffic-type', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    name: DS['default'].attr('string'),
    subnets: DS['default'].hasMany('subnet', { async: true })
  });

});
define('fusor-ember-cli/models/user', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    login: DS['default'].attr('string'),
    mail: DS['default'].attr('string'),
    firstname: DS['default'].attr('string'),
    lastname: DS['default'].attr('string'),
    admin: DS['default'].attr('boolean'),
    auth_source_id: DS['default'].attr('number'),
    lastLoginOn: DS['default'].attr('date'),
    fullName: (function () {
      return this.get('firstname') + ' ' + this.get('lastname');
    }).property('firstname', 'lastname')
  });

});
define('fusor-ember-cli/router', ['exports', 'ember', 'fusor-ember-cli/config/environment'], function (exports, Ember, config) {

  'use strict';

  var Router = Ember['default'].Router.extend({
    location: config['default'].locationType,
    // log when Ember generates a controller or a route from a generic class
    LOG_ACTIVE_GENERATION: true,
    // log when Ember looks up a template or a view
    LOG_VIEW_LOOKUPS: true
  });

  exports['default'] = Router.map(function () {
    this.route('login');
    this.route('loggedin');

    this.resource('rhci', { path: '/old-deployments/new-old' }, function () {
      this.route('satellite', function () {
        this.route('configure-organization');
        this.route('configure-environment');
      });
    });

    this.resource('deployments');

    this.resource('deployment-new', { path: '/deployments/new' }, function () {
      this.route('start');
      this.route('satellite', function () {
        this.route('configure-environment');
        this.route('configure-organization');
      });
    });

    this.resource('deployment', { path: '/deployments/:deployment_id' }, function () {

      this.route('start');

      this.resource('satellite', function () {
        this.resource('configure-organization');
        this.resource('configure-environment');
      });

      this.resource('rhev', function () {
        this.resource('rhev-setup', { path: 'setup' });
        this.resource('hypervisor', function () {
          this.route('discovered-host');
          this.route('existing-host');
          this.route('new-host');
        });
        this.resource('engine', function () {
          this.route('hypervisor');
          this.route('discovered-host');
          this.route('existing-host');
          this.route('new-host');
        });
        this.resource('rhev-options', { path: 'configuration' });
        this.resource('storage');
        this.resource('networking');
      });

      this.resource('openstack', function () {
        this.resource('register-nodes');
        this.resource('assign-nodes');
      });
      this.resource('cloudforms', function () {
        this.resource('where-install');
        this.resource('cloudforms-storage-domain', { path: 'storage-domain' });
        this.resource('cloudforms-vm', { path: 'vm' });
      });
      this.resource('subscriptions', function () {
        this.route('credentials');
        this.route('select-subscriptions', { path: 'select' });
      });
      this.resource('products');
      this.resource('review', function () {
        this.route('installation');
        this.route('progress', function () {
          this.route('overview');
          this.route('details', function () {
            this.route('task', { path: '/:task_id' }, function () {
              this.route('running_steps');
              this.route('task_errors');
              this.route('task_locks');
              this.route('task_raw');
            });
          });
        });
      });
    });

    this.resource('hostgroups', function () {
      this.resource('hostgroup', { path: '/:hostgroup_id' }, function () {
        this.route('edit');
      });
    });

    this.route('hostgroup/edit');
    this.route('review/installation');
    this.resource('discovered-hosts', function () {
      this.resource('discovered-host', { path: '/:discovered_hosts_id' });
    });
  });

});
define('fusor-ember-cli/routes/application', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  // app/routes/application.js
  exports['default'] = Ember['default'].Route.extend({

    actions: {
      invalidateSession: function invalidateSession() {
        return this.transitionTo('login');
      },

      notImplemented: function notImplemented() {
        alert('This link is not implemented in the fusor-ember-cli prototype');
      },
      willImplement: function willImplement() {
        alert('Check back soon. This will be implemented soon.');
      } }
  });

});
define('fusor-ember-cli/routes/assign-nodes', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('fusor-ember-cli/routes/cloudforms-storage-domain', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('fusor-ember-cli/routes/cloudforms-vm', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('fusor-ember-cli/routes/cloudforms/index', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      this.transitionTo('where-install');
    }
  });

});
define('fusor-ember-cli/routes/configure-environment', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    model: function model() {
      return this.modelFor('deployment').get('lifecycle_environment');
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      var organization = this.modelFor('deployment').get('organization');
      var lifecycleEnvironments = this.store.find('lifecycle-environment', { organization_id: organization.get('id') });
      lifecycleEnvironments.then(function (results) {
        controller.set('lifecycleEnvironments', results);
        // nullify environment if organization has no environments, it gives validation error if trying to save with no environment
        if (results.get('length') === 0) {
          return controller.set('model', null);
        }
      });
    },

    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    }

  });

});
define('fusor-ember-cli/routes/configure-organization', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    model: function model() {
      return this.modelFor('deployment').get('organization');
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('showAlertMessage', false);
      var organizations = this.store.find('organization');
      controller.set('organizations', organizations);
    },

    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    }

  });

});
define('fusor-ember-cli/routes/deployment-new', ['exports', 'ember', 'fusor-ember-cli/mixins/deployment-route-mixin'], function (exports, Ember, DeploymentRouteMixin) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend(DeploymentRouteMixin['default'], {

    model: function model() {
      return this.store.createRecord('deployment');
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('satelliteTabRouteName', 'deployment-new.satellite.index');
      controller.set('organizationTabRouteName', 'deployment-new.satellite.configure-organization');
      controller.set('lifecycleEnvironmentTabRouteName', 'deployment-new.satellite.configure-environment');
    },

    // rollback if new deployment not saved
    // TODO modal confirm/cancel
    deactivate: function deactivate() {
      var deployment = this.modelFor('deployment-new');
      if (deployment.get('isNew')) {
        return deployment.rollback();
      }
    }

  });

});
define('fusor-ember-cli/routes/deployment-new/index', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    // if user manually hits this route (deployments/news), then redirecto to deployments/news/start
    beforeModel: function beforeModel() {
      return this.transitionTo('deployment-new.start');
    } });

});
define('fusor-ember-cli/routes/deployment-new/satellite', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('fusor-ember-cli/routes/deployment-new/satellite/configure-environment', ['exports', 'ember', 'fusor-ember-cli/mixins/deployment-new-satellite-route-mixin'], function (exports, Ember, DeploymentNewSatelliteRouteMixin) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend(DeploymentNewSatelliteRouteMixin['default'], {

    model: function model() {
      return this.modelFor('deployment-new').get('lifecycle_environment');
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      var organization = this.modelFor('deployment-new').get('organization');
      var lifecycleEnvironments = this.store.find('lifecycle-environment', { organization_id: organization.get('id') });
      lifecycleEnvironments.then(function (results) {
        controller.set('lifecycleEnvironments', results);
        // nullify environment if organization has no environments, it gives validation error if trying to save with no environment
        if (results.get('length') === 0) {
          return controller.set('model', null);
        }
      });
    } });

});
define('fusor-ember-cli/routes/deployment-new/satellite/configure-organization', ['exports', 'ember', 'fusor-ember-cli/mixins/deployment-new-satellite-route-mixin'], function (exports, Ember, DeploymentNewSatelliteRouteMixin) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend(DeploymentNewSatelliteRouteMixin['default'], {

    model: function model() {
      return this.modelFor('deployment-new').get('organization');
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('showAlertMessage', false);
      var organizations = this.store.find('organization');
      controller.set('organizations', organizations);
    } });

});
define('fusor-ember-cli/routes/deployment-new/satellite/index', ['exports', 'ember', 'fusor-ember-cli/mixins/deployment-new-satellite-route-mixin'], function (exports, Ember, DeploymentNewSatelliteRouteMixin) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend(DeploymentNewSatelliteRouteMixin['default'], {});

});
define('fusor-ember-cli/routes/deployment-new/start', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('satelliteTabRouteName', 'deployment-new.satellite.index');
    },

    activate: function activate() {
      this.controllerFor('deployment-new').set('isHideWizard', true);
      this.controllerFor('deployment-new').set('deploy_rhev', true);
      this.controllerFor('deployment-new').set('deploy_openstack', false);
      this.controllerFor('deployment-new').set('deploy_cfme', false);
    },

    deactivate: function deactivate() {
      this.controllerFor('deployment-new').set('isHideWizard', false);
    } });

});
define('fusor-ember-cli/routes/deployment', ['exports', 'ember', 'fusor-ember-cli/mixins/deployment-route-mixin'], function (exports, Ember, DeploymentRouteMixin) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend(DeploymentRouteMixin['default'], {

    model: function model(params) {
      return this.store.find('deployment', params.deployment_id);
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('satelliteTabRouteName', 'satellite.index');
      controller.set('organizationTabRouteName', 'configure-organization');
      controller.set('lifecycleEnvironmentTabRouteName', 'configure-environment');
    },

    actions: {
      installDeployment: function installDeployment(options) {
        var self = this;
        var deployment = this.controllerFor('deployment');
        var token = $('meta[name="csrf-token"]').attr('content');

        // change button text to "Deploying ..." and disable it
        this.controllerFor('review.installation').set('buttonDeployTitle', 'Deploying ...');
        this.controllerFor('review.installation').set('buttonDeployDisabled', true);

        return new Ember['default'].RSVP.Promise(function (resolve, reject) {
          Ember['default'].$.ajax({
            url: '/fusor/api/v21/deployments/' + deployment.get('id') + '/deploy',
            type: 'PUT',
            data: JSON.stringify({ skip_content: deployment.get('skipContent') }),
            headers: {
              Accept: 'application/json',
              'Content-Type': 'application/json',
              'X-CSRF-Token': token,
              Authorization: 'Basic ' + self.get('session.basicAuthToken')
            },
            success: function success(response) {
              resolve(response);
              var uuid = response.id;
              var deployment = self.modelFor('deployment');
              deployment.set('foreman_task_uuid', uuid);
              deployment.save().then(function () {
                return self.transitionTo('review.progress.overview');
              }, function () {
                self.controllerFor('review.installation').set('errorMsg', 'Error is saving UUID of deployment task.');
                self.controllerFor('review.installation').set('showErrorMessage', true);
                self.controllerFor('review.installation').set('buttonDeployTitle', 'Deploy');
                self.controllerFor('review.installation').set('buttonDeployDisabled', false);
              });
            },

            error: function error(response) {
              console.log(response);
              var errorMsg = response.responseJSON.displayMessage;
              self.controllerFor('review.installation').set('errorMsg', errorMsg);
              self.controllerFor('review.installation').set('showErrorMessage', true);
              self.controllerFor('review.installation').set('buttonDeployTitle', 'Deploy');
              self.controllerFor('review.installation').set('buttonDeployDisabled', false);
              reject(response);
            }
          });
        });
      }
    }

  });

});
define('fusor-ember-cli/routes/deployment/index', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    afterModel: function afterModel() {
      this.transitionTo('satellite');
    }
  });

});
define('fusor-ember-cli/routes/deployment/review', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('fusor-ember-cli/routes/deployment/start', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('satelliteTabRouteName', 'satellite.index');
    },

    activate: function activate() {
      this.controllerFor('deployment').set('isHideWizard', true);
    },

    deactivate: function deactivate() {
      this.controllerFor('deployment').set('isHideWizard', false);
    }

  });

});
define('fusor-ember-cli/routes/deployments', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    model: function model() {
      return this.store.find('deployment');
    }
  });

});
define('fusor-ember-cli/routes/discovered-host', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('fusor-ember-cli/routes/discovered-hosts', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('fusor-ember-cli/routes/engine', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      this.transitionTo('engine.discovered-host');
    }
  });

});
define('fusor-ember-cli/routes/engine/discovered-host', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    model: function model() {
      return this.modelFor('deployment').get('discovered_host');
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('allDiscoveredHosts', this.store.find('discovered-host'));
      controller.set('selectedHypervisors', this.modelFor('deployment').get('discovered_hosts'));
    },

    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    } });

});
define('fusor-ember-cli/routes/engine/existing-host', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    model: function model() {
      return this.store.find('host', { type: 'Host::Managed' });
    }
  });

});
define('fusor-ember-cli/routes/engine/hypervisor', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('fusor-ember-cli/routes/engine/new-host', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('organizations', this.store.find('organization'));
      controller.set('locations', this.store.find('location'));
      controller.set('environments', this.store.find('environment'));
      controller.set('hostgroups', this.store.find('hostgroup'));
    },

    activate: function activate() {
      this.controllerFor('side-menu').set('etherpadName', '48'); //route-engine-new-host
    },

    deactivate: function deactivate() {
      this.controllerFor('side-menu').set('etherpadName', '');
    }
  });

});
define('fusor-ember-cli/routes/hostgroup', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    model: function model(params) {
      return this.store.find('hostgroup', params.hostgroup_id);
    },
    activate: function activate() {
      console.log('entered hostgroup route');
      this.controllerFor('hostgroups').set('onShowPage', true);
    },

    deactivate: function deactivate() {
      console.log('left hostgroup route');
      this.controllerFor('hostgroups').set('onShowPage', false);
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      // TODO - how to make parent_id dynamic
      controller.set('parent_hostgroup', this.store.find('hostgroup', 1));
    } });

});
define('fusor-ember-cli/routes/hostgroup/edit', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('fusor-ember-cli/routes/hostgroups', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    model: function model() {
      return this.store.find('hostgroup');
    }
  });

});
define('fusor-ember-cli/routes/hypervisor', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      this.transitionTo('hypervisor.discovered-host');
    }
  });

});
define('fusor-ember-cli/routes/hypervisor/discovered-host', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    model: function model() {
      return this.modelFor('deployment').get('discovered_hosts');
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('allDiscoveredHosts', this.store.find('discovered-host'));
    },

    deactivate: function deactivate() {
      var model = this.modelFor('deployment');
      return this.send('saveHyperVisors', null);
    },

    actions: {
      saveHyperVisors: function saveHyperVisors(redirectPath) {
        var self = this;
        var deployment = this.modelFor('deployment');
        var hypervisorModelIds = this.controllerFor('hypervisor/discovered-host').get('hypervisorModelIds');
        var token = $('meta[name="csrf-token"]').attr('content');

        return new Ember['default'].RSVP.Promise(function (resolve, reject) {
          Ember['default'].$.ajax({
            url: '/fusor/api/v21/deployments/' + deployment.get('id'),
            type: 'PUT',
            data: JSON.stringify({ deployment: { discovered_host_ids: hypervisorModelIds } }),
            headers: {
              Accept: 'application/json',
              'Content-Type': 'application/json',
              'X-CSRF-Token': token,
              Authorization: 'Basic ' + self.get('session.basicAuthToken')
            },
            success: function success(response) {
              resolve(response);
              if (redirectPath) {
                self.transitionTo('rhev-options');
              }
            },

            error: function error(response) {
              reject(response);
            }
          });
        });
      }
    }

  });

});
define('fusor-ember-cli/routes/hypervisor/existing-host', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    model: function model() {
      return this.store.find('host', { type: 'Host::Managed' });
    }
  });

});
define('fusor-ember-cli/routes/hypervisor/new-host', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('organizations', this.store.find('organization'));
      controller.set('locations', this.store.find('location'));
      controller.set('environments', this.store.find('environment'));
      controller.set('hostgroups', this.store.find('hostgroup'));
    }
  });

});
define('fusor-ember-cli/routes/index', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('fusor-ember-cli/routes/loggedin', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('fusor-ember-cli/routes/login', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    beforeModel: function beforeModel(transition) {
      if (this.controllerFor('application').get('deployAsPlugin') || this.get('session.isAuthenticated')) {
        return this.transitionTo('deployment-new.start');
      };
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('errorMessage', null);
    }

  });

});
define('fusor-ember-cli/routes/networking', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    activate: function activate() {
      this.controllerFor('side-menu').set('etherpadName', '51'); //route-rhev-networking
    },

    deactivate: function deactivate() {
      this.controllerFor('side-menu').set('etherpadName', '');
    }
  });

});
define('fusor-ember-cli/routes/new-environment', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('fusor-ember-cli/routes/new-organization', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.set('fields', {});
    }
  });

});
define('fusor-ember-cli/routes/openstack/index', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      this.transitionTo('register-nodes');
    }
  });

});
define('fusor-ember-cli/routes/products', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    model: function model() {
      return this.store.find('product');
    }

  });

});
define('fusor-ember-cli/routes/register-nodes', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('fusor-ember-cli/routes/review/index', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      this.transitionTo('review.installation');
    }
  });

});
define('fusor-ember-cli/routes/review/installation', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    model: function model() {
      return this.modelFor('deployment');
    }

  });

});
define('fusor-ember-cli/routes/review/progress', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('fusor-ember-cli/routes/review/progress/details', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    model: function model(params) {
      //return Ember.$.getJSON('/api/v21/foreman_tasks');
      //var uud = this.modelFor()
      // return this.store.find('foreman-task', {uuid: 'db25a76f-e344-48ba-ac77-f29303586dbe'});
      var foreman_task_uuid = this.modelFor('deployment').get('foreman_task_uuid');
      return this.store.find('foreman-task', foreman_task_uuid);
    }
  });

});
define('fusor-ember-cli/routes/review/progress/details/task', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    model: function model(params) {
      return this.store.find('foreman-task', params.task_id);
    }
  });

});
define('fusor-ember-cli/routes/review/progress/details/task/index', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    setupController: function setupController(controller, model) {
      controller.startPolling();
    },

    deactivate: function deactivate() {
      this.get('controller').stopPolling();
    }

  });

});
define('fusor-ember-cli/routes/review/progress/details/task/running-steps', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('fusor-ember-cli/routes/review/progress/details/task/task-errors', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('fusor-ember-cli/routes/review/progress/details/task/task-locks', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('fusor-ember-cli/routes/review/progress/details/task/task-raw', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('fusor-ember-cli/routes/review/progress/overview', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    model: function model() {
      var deployment = this.modelFor('deployment');
      return this.store.find('foreman-task', deployment.get('foreman_task_uuid'));
    },

    setupController: function setupController(controller, model) {
      controller.set('model', model);
      controller.startPolling();
    },

    deactivate: function deactivate() {
      this.get('controller').stopPolling();
    }

  });

});
define('fusor-ember-cli/routes/rhci', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('fusor-ember-cli/routes/rhev-options', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    } });

});
define('fusor-ember-cli/routes/rhev-setup', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    }
  });

});
define('fusor-ember-cli/routes/rhev', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('fusor-ember-cli/routes/rhev/index', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      this.transitionTo('rhev-setup');
    }
  });

});
define('fusor-ember-cli/routes/satellite', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    deactivate: function deactivate() {
      var deployment = this.modelFor('deployment');
      deployment.save().then(function () {
        return console.log('saved deployment successfully');
      });
    } });

});
define('fusor-ember-cli/routes/satellite/index', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    }

  });

});
define('fusor-ember-cli/routes/setpassword', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      if (this.controllerFor('application').get('isPasswordSet')) {
        this.transitionTo('deployment-new.start');
      }
    },
    actions: {
      updatePassword: function updatePassword() {
        this.controllerFor('application').set('isPasswordSet', true);
        this.transitionTo('deployment-new.start');
      }
    }

  });

});
define('fusor-ember-cli/routes/single-deployment', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    model: function model(params) {
      return this.store.find('deployment', params.deployment_id);
    }
  });

});
define('fusor-ember-cli/routes/storage', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    } });

});
define('fusor-ember-cli/routes/subscriptions', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('fusor-ember-cli/routes/subscriptions/credentials', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('fusor-ember-cli/routes/subscriptions/index', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      this.transitionTo('subscriptions.credentials');
    }
  });

});
define('fusor-ember-cli/routes/subscriptions/select-subscriptions', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    model: function model() {
      return this.store.find('subscription');
    }
  });

});
define('fusor-ember-cli/routes/where-install', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    setupController: function setupController(controller, model) {
      controller.set('model', model);

      var isRhev = this.controllerFor('deployment').get('isRhev');
      var isOpenStack = this.controllerFor('deployment').get('isOpenStack');
      if (isRhev && !isOpenStack) {
        this.controllerFor('where-install').set('disableRHEV', false);
        this.controllerFor('where-install').set('disableOpenStack', true);
        return this.controllerFor('deployment').set('cfme_install_loc', 'RHEV');
      } else if (!isRhev && isOpenStack) {
        this.controllerFor('where-install').set('disableRHEV', true);
        this.controllerFor('where-install').set('disableOpenStack', false);
        return this.controllerFor('deployment').set('cfme_install_loc', 'OpenStack');
      } else {
        this.controllerFor('where-install').set('disableRHEV', false);
        this.controllerFor('where-install').set('disableOpenStack', false);
      }
    },

    deactivate: function deactivate() {
      return this.send('saveDeployment', null);
    } });

});
define('fusor-ember-cli/serializers/foreman-task', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].RESTSerializer.extend({
    attrs: {
      humanized: { embedded: 'always' }
    }
  });

});
define('fusor-ember-cli/serializers/puppetclass', ['exports', 'ember-data'], function (exports, DS) {

   'use strict';

   exports['default'] = DS['default'].RESTSerializer.extend({
      extractArray: function extractArray(store, type, payload) {
         // 'foreman-experimental-ui@model:setting:'
         var wrapped_payload = {};
         var model_name = type.toString().split(':')[1];
         wrapped_payload[model_name] = $.map(payload.results, function (v) {
            return v;
         });
         return this._super(store, type, wrapped_payload);
      } });

});
define('fusor-ember-cli/services/validations', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var set = Ember['default'].set;

  exports['default'] = Ember['default'].Object.extend({
    init: function init() {
      set(this, 'cache', {});
    }
  });

});
define('fusor-ember-cli/templates/application', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          inline(env, morph0, context, "partial", ["mainmenu"], {});
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block, element = hooks.element, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [2]);
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        var morph1 = dom.createMorphAt(element0,1,1);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "isEmberCliMode")], {}, child0, null);
        element(env, element0, context, "bind-attr", [], {"class": "isContainer:container:container-fluid"});
        content(env, morph1, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/application/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/assign-nodes', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("TDB Assign Nodes\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
        content(env, morph0, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/cancel-deployment-modal', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("×Close");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("optional toggler to close the opened modal");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h4");
            dom.setAttribute(el1,"class","modal-title");
            var el2 = dom.createTextNode("Cancel Deployment");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,3,3,contextualElement);
            block(env, morph0, context, "em-modal-toggler", [], {"class": "close"}, child0, null);
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        One fine body…\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }());
      var child2 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("Close");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            block(env, morph0, context, "em-modal-toggler", [], {"class": "btn btn-default"}, child0, null);
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("the content of the modal...");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("optional footer section of the modal, usually contains buttons");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
          var morph1 = dom.createMorphAt(fragment,4,4,contextualElement);
          var morph2 = dom.createMorphAt(fragment,8,8,contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "em-modal-title", [], {}, child0, null);
          block(env, morph1, context, "em-modal-body", [], {}, child1, null);
          block(env, morph2, context, "em-modal-footer", [], {}, child2, null);
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment(" Are you sure you want to cancel? ");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,3,3,contextualElement);
        block(env, morph0, context, "em-modal", [], {"configName": "bs", "id": "cancelDeploymentModal"}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/cancel-modal', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  Are you sure you want to cancel?\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "modal-confirm", [], {"title": "Cancel", "ok": "save", "close": "removeModal"}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/cloudforms-storage-domain', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-12");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("br");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3,"class","form form-horizontal");
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0, 1, 3]),1,1);
        inline(env, morph0, context, "text-f", [], {"label": "NFS Share", "value": get(env, context, "nfsShare")});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/cloudforms-vm', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-12");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("br");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3,"class","form form-horizontal");
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0, 1, 3]),1,1);
        inline(env, morph0, context, "text-f", [], {"label": "VM Name", "value": get(env, context, "vmName")});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/cloudforms', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("A. Installation Location");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          content(env, morph0, context, "stepNumberCloudForms");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row tabbed_side_nav_form");
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2,"class","nav nav-pills nav-stacked col-md-3");
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","tab-content col-md-9");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, block = hooks.block, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var morph0 = dom.createMorphAt(dom.childAt(element0, [1]),1,1);
        var morph1 = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
        block(env, morph0, context, "link-to", ["where-install"], {"tagName": "li"}, child0, null);
        content(env, morph1, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/cloudforms/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/accordion-item', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          content(env, morph0, context, "yield");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-12");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h4");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("i");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","col-md-offset-1");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, element = hooks.element, content = hooks.content, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0, 1]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element1, [1]);
        var morph0 = dom.createMorphAt(element1,3,3);
        var morph1 = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
        element(env, element1, context, "action", ["openItem"], {});
        element(env, element2, context, "bind-attr", [], {"class": ":fa :fa-play isOpen:fa-rotate-90"});
        content(env, morph0, context, "name");
        block(env, morph1, context, "if", [get(env, context, "isOpen")], {}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/base-f', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","clearfix");
        var el2 = dom.createTextNode("\n   ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","form-group");
        var el3 = dom.createTextNode("\n\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","help-block");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n   ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, element = hooks.element, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0, 1]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element0, [3]);
        var morph0 = dom.createMorphAt(element1,1,1);
        var morph1 = dom.createMorphAt(element2,1,1);
        var morph2 = dom.createMorphAt(dom.childAt(element0, [5]),1,1);
        element(env, element1, context, "bind-attr", [], {"class": ":control-label labelClassSize class"});
        content(env, morph0, context, "label");
        element(env, element2, context, "bind-attr", [], {"class": "inputClassSize"});
        content(env, morph1, context, "yield");
        content(env, morph2, context, "help-inline");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/button-f', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "title");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/em-button', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, element = hooks.element;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          element(env, element0, context, "bind-attr", [], {"class": "icon-classes"});
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        var morph1 = dom.createMorphAt(fragment,1,1,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "icon-classes")], {}, child0, null);
        content(env, morph1, context, "label");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/em-form-control-help', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "helpText");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/em-form-group', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, element = hooks.element, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          var morph0 = dom.createMorphAt(element0,1,1);
          element(env, element0, context, "bind-attr", [], {"class": get(env, context, "wrapperClass")});
          inline(env, morph0, context, "partial", ["components/formgroup/form-group"], {});
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          inline(env, morph0, context, "partial", ["components/formgroup/form-group"], {});
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "wrapperClass")], {}, child0, child1);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/em-form-label', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "yield");
        content(env, morph1, context, "text");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/em-form-submit', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, element = hooks.element, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(element1, [1]);
          var morph0 = dom.createMorphAt(element2,0,0);
          element(env, element1, context, "bind-attr", [], {"class": get(env, context, "horiClass")});
          element(env, element2, context, "bind-attr", [], {"class": get(env, context, "classes")});
          element(env, element2, context, "bind-attr", [], {"disabled": get(env, context, "disabled")});
          content(env, morph0, context, "text");
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, element = hooks.element, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          var morph0 = dom.createMorphAt(element0,0,0);
          element(env, element0, context, "bind-attr", [], {"class": get(env, context, "classes")});
          element(env, element0, context, "bind-attr", [], {"disabled": get(env, context, "disabled")});
          content(env, morph0, context, "text");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "form.isHorizontal")], {}, child0, child1);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/em-form', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          content(env, morph0, context, "em-form-submit");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "yield");
        block(env, morph1, context, "if", [get(env, context, "submit_button")], {}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/em-modal-confirm', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"aria-hidden","true");
              var el2 = dom.createTextNode("×");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","sr-only");
              var el2 = dom.createTextNode("Close");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h4");
            dom.setAttribute(el1,"class","modal-title");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, block = hooks.block, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            var morph1 = dom.createMorphAt(dom.childAt(fragment, [3]),0,0);
            block(env, morph0, context, "em-modal-toggler", [], {"class": "close"}, child0, null);
            content(env, morph1, context, "title");
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
              inline(env, morph0, context, "view", [get(env, context, "Ember.Select")], {"valueBinding": "message", "contentBinding": "messages", "optionValuePath": "id", "optionLabelPath": "content.msg"});
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("Confirmation with a reason");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
            var morph2 = dom.createMorphAt(fragment,7,7,contextualElement);
            dom.insertBoundary(fragment, null);
            content(env, morph0, context, "message");
            content(env, morph1, context, "yield");
            block(env, morph2, context, "if", [get(env, context, "reasonModal")], {}, child0, null);
            return fragment;
          }
        };
      }());
      var child2 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","fa fa-thumbs-o-down");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,3,3,contextualElement);
              content(env, morph0, context, "cancel-button-title");
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, inline = hooks.inline, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
            dom.insertBoundary(fragment, null);
            inline(env, morph0, context, "em-button", [], {"class": get(env, context, "cancel-button-classes"), "on-click": "confirmPressed", "default": get(env, context, "submit-button-title"), "icon-default": get(env, context, "submit-button-default-icons"), "icon-executing": get(env, context, "submit-button-execute-icons"), "executing": get(env, context, "submit-button-submitting-title")});
            block(env, morph1, context, "em-modal-toggler", [], {"class": get(env, context, "submit-button-classes")}, child0, null);
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
          var morph1 = dom.createMorphAt(fragment,1,1,contextualElement);
          var morph2 = dom.createMorphAt(fragment,2,2,contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "em-modal-title", [], {"classes": get(env, context, "modal-title-classes")}, child0, null);
          block(env, morph1, context, "em-modal-body", [], {}, child1, null);
          block(env, morph2, context, "em-modal-footer", [], {}, child2, null);
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "em-modal", [], {"id": get(env, context, "confirm-id"), "configName": get(env, context, "configName"), "model-id": get(env, context, "model-id"), "open-if": get(env, context, "open-if"), "close-if": get(env, context, "close-if"), "on-hide": get(env, context, "on-hide")}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/em-modal', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","modal-dialog");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","modal-content");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1]),1,1);
          content(env, morph0, context, "yield");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "is-open")], {}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/env-path-list-item', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("label");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, element = hooks.element, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var morph0 = dom.createMorphAt(element1,1,1);
        element(env, element0, context, "bind-attr", [], {"class": "bgColor"});
        element(env, element1, context, "bind-attr", [], {"id": "envCssId"});
        content(env, morph0, context, "env.name");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/formgroup/control-within-label', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          inline(env, morph0, context, "partial", ["components/formgroup/form-group-control"], {});
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "em-form-label", [], {"text": get(env, context, "label"), "horiClass": "", "inlineClass": "", "viewName": get(env, context, "labelViewName")}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/formgroup/form-group-control', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, element = hooks.element, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          var morph0 = dom.createMorphAt(element0,1,1);
          element(env, element0, context, "bind-attr", [], {"class": get(env, context, "controlWrapper")});
          inline(env, morph0, context, "view", [get(env, context, "controlView")], {"viewName": get(env, context, "controlViewName"), "property": get(env, context, "propertyName"), "id": get(env, context, "cid")});
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          inline(env, morph0, context, "view", [get(env, context, "controlView")], {"viewName": get(env, context, "controlViewName"), "property": get(env, context, "propertyName"), "id": get(env, context, "cid")});
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "controlWrapper")], {}, child0, child1);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/formgroup/form-group', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks, get = hooks.get, element = hooks.element, inline = hooks.inline;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var element2 = dom.childAt(fragment, [1]);
                var morph0 = dom.createMorphAt(element2,1,1);
                element(env, element2, context, "bind-attr", [], {"class": get(env, context, "labelWrapperClass")});
                inline(env, morph0, context, "partial", ["components/formgroup/control-within-label"], {});
                return fragment;
              }
            };
          }());
          var child1 = (function() {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks, inline = hooks.inline;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
                inline(env, morph0, context, "partial", ["components/formgroup/control-within-label"], {});
                return fragment;
              }
            };
          }());
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, get = hooks.get, block = hooks.block;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, null);
              dom.insertBoundary(fragment, 0);
              block(env, morph0, context, "if", [get(env, context, "labelWrapperClass")], {}, child0, child1);
              return fragment;
            }
          };
        }());
        var child1 = (function() {
          var child0 = (function() {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks, get = hooks.get, element = hooks.element, inline = hooks.inline;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var element1 = dom.childAt(fragment, [1]);
                var morph0 = dom.createMorphAt(element1,1,1);
                var morph1 = dom.createMorphAt(element1,3,3);
                element(env, element1, context, "bind-attr", [], {"class": get(env, context, "labelWrapperClass")});
                inline(env, morph0, context, "em-form-label", [], {"text": get(env, context, "label"), "viewName": get(env, context, "labelViewName")});
                inline(env, morph1, context, "partial", ["components/formgroup/form-group-control"], {});
                return fragment;
              }
            };
          }());
          var child1 = (function() {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
                var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
                inline(env, morph0, context, "em-form-label", [], {"text": get(env, context, "label"), "viewName": get(env, context, "labelViewName")});
                inline(env, morph1, context, "partial", ["components/formgroup/form-group-control"], {});
                return fragment;
              }
            };
          }());
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, get = hooks.get, block = hooks.block;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, null);
              dom.insertBoundary(fragment, 0);
              block(env, morph0, context, "if", [get(env, context, "labelWrapperClass")], {}, child0, child1);
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "if", [get(env, context, "yieldInLabel")], {}, child0, child1);
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            inline(env, morph0, context, "partial", ["components/formgroup/form-group-control"], {});
            return fragment;
          }
        };
      }());
      var child2 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","form-control-feedback");
            var el2 = dom.createElement("i");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, element = hooks.element;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [1, 0]);
            element(env, element0, context, "bind-attr", [], {"class": get(env, context, "v_icon")});
            return fragment;
          }
        };
      }());
      var child3 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
              inline(env, morph0, context, "em-form-control-help", [], {"text": get(env, context, "help"), "viewName": get(env, context, "helpViewName")});
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "if", [get(env, context, "canShowErrors")], {}, child0, null);
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
          var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);
          var morph2 = dom.createMorphAt(fragment,4,4,contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "if", [get(env, context, "label")], {}, child0, child1);
          block(env, morph1, context, "if", [get(env, context, "v_icons")], {}, child2, null);
          block(env, morph2, context, "unless", [get(env, context, "form.isInline")], {}, child3, null);
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          content(env, morph0, context, "yield");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "unless", [get(env, context, "template")], {}, child0, child1);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/labeled-radio-button', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "radio-button", [], {"changed": "innerRadioChanged", "disabled": get(env, context, "disabled"), "groupValue": get(env, context, "groupValue"), "name": get(env, context, "name"), "required": get(env, context, "required"), "value": get(env, context, "value")});
        content(env, morph1, context, "yield");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/markdown-to-html', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "html");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/modal-confirm', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","modal fade");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","modal-dialog");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","modal-content");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","modal-header");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("button");
        dom.setAttribute(el5,"type","button");
        dom.setAttribute(el5,"class","close");
        dom.setAttribute(el5,"data-dismiss","modal");
        dom.setAttribute(el5,"aria-hidden","true");
        var el6 = dom.createTextNode("×");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("h4");
        dom.setAttribute(el5,"class","modal-title");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","modal-body");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","modal-footer");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("button");
        dom.setAttribute(el5,"type","button");
        dom.setAttribute(el5,"class","btn btn-default");
        dom.setAttribute(el5,"data-dismiss","modal");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("button");
        dom.setAttribute(el5,"type","button");
        dom.setAttribute(el5,"class","btn btn-primary");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content, element = hooks.element;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0, 1, 1]);
        var element1 = dom.childAt(element0, [5]);
        var element2 = dom.childAt(element1, [3]);
        var morph0 = dom.createMorphAt(dom.childAt(element0, [1, 3]),0,0);
        var morph1 = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
        var morph2 = dom.createMorphAt(dom.childAt(element1, [1]),0,0);
        var morph3 = dom.createMorphAt(element2,0,0);
        content(env, morph0, context, "title");
        content(env, morph1, context, "yield");
        content(env, morph2, context, "dismissButtonLabel");
        element(env, element2, context, "action", ["ok"], {});
        content(env, morph3, context, "okButtonLabel");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/radio-button-f', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        var morph1 = dom.createMorphAt(fragment,1,1,contextualElement);
        var morph2 = dom.createMorphAt(fragment,3,3,contextualElement);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "radio-button", [], {"name": get(env, context, "name"), "value": get(env, context, "value"), "checked": get(env, context, "checked"), "id": get(env, context, "cssId")});
        content(env, morph1, context, "value");
        content(env, morph2, context, "label");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/rchi-item', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("           ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","fa fa-1x fa-check");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n           Deploy this product\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("img");
        dom.setAttribute(el2,"class","img-responsive");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n       ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","rhci-install-footer");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("       ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, element = hooks.element, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element0, [3]);
        var morph0 = dom.createMorphAt(dom.childAt(element2, [1]),1,1);
        element(env, element0, context, "bind-attr", [], {"id": get(env, context, "cssId")});
        element(env, element1, context, "bind-attr", [], {"src": get(env, context, "srcImage")});
        element(env, element2, context, "bind-attr", [], {"class": ":rhci-footer isChecked:rhci-footer-selected:rhci-footer-unselected"});
        block(env, morph0, context, "if", [get(env, context, "isChecked")], {}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/rhci-hover-text', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "yield");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/rhci-start', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","subscriptions_needed");
          var el2 = dom.createTextNode("\n\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2,"class","fa fa-info-circle");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("strong");
          var el3 = dom.createTextNode("Before you begin:");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("strong");
          var el4 = dom.createTextNode("Subscriptions required to complete this deployment.");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" Check your account in the ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("a");
          dom.setAttribute(el3,"href","https://access.redhat.com/home");
          dom.setAttribute(el3,"target","_blank");
          var el4 = dom.createTextNode("Red Hat Customer Portal");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" to verify you have subscriptions available to cover the selected products.\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("br");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("strong");
          var el4 = dom.createTextNode("Start up host machines.");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" Ensure that the bare-metal computers and the virtual machines that you plan to use are turned on and discoverable.\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("br");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("strong");
          var el4 = dom.createTextNode("Configure your network.");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" Ensure that the network and subnets are set up and available.\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Cancel");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Select");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-12");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("br");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        var el4 = dom.createTextNode("New Deployment: Select Cloud Infrastructure Products");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    Choose the products to deploy. This wizard guides you through creating a new ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode(" Cloud Infrastructure deployment.\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("br");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("br");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        dom.setAttribute(el1,"style","height:370px;");
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-4");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-4");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-4");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-12");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"style","float:right;");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content, get = hooks.get, inline = hooks.inline, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [2]);
        var element1 = dom.childAt(fragment, [8, 1, 1]);
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0, 1]),5,5);
        var morph1 = dom.createMorphAt(dom.childAt(element0, [1]),1,1);
        var morph2 = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
        var morph3 = dom.createMorphAt(dom.childAt(element0, [5]),1,1);
        var morph4 = dom.createMorphAt(fragment,4,4,contextualElement);
        var morph5 = dom.createMorphAt(element1,1,1);
        var morph6 = dom.createMorphAt(element1,3,3);
        content(env, morph0, context, "nameRedHat");
        inline(env, morph1, context, "rchi-item", [], {"srcImage": get(env, context, "imgRhev"), "isChecked": get(env, context, "isRhev"), "name": get(env, context, "nameRhev"), "cssId": "is_rhev"});
        inline(env, morph2, context, "rchi-item", [], {"srcImage": get(env, context, "imgOpenStack"), "isChecked": get(env, context, "isOpenStack"), "name": get(env, context, "nameOpenStack"), "cssId": "is_openstack"});
        inline(env, morph3, context, "rchi-item", [], {"srcImage": get(env, context, "imgCloudForms"), "isChecked": get(env, context, "isCloudForms"), "name": get(env, context, "nameCloudForms"), "cssId": "is_cloudforms"});
        block(env, morph4, context, "unless", [get(env, context, "isUpstream")], {}, child0, null);
        block(env, morph5, context, "link-to", ["deployments"], {"class": "btn btn-default"}, child1, null);
        block(env, morph6, context, "link-to", [get(env, context, "satelliteTabRouteName")], {"class": "btn btn-primary", "disabled": get(env, context, "disableNextOnStart")}, child2, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/rhci-wizard', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          inline(env, morph0, context, "wizard-item", [], {"num": get(env, context, "stepNumberRhev"), "name": get(env, context, "nameRhev"), "routeName": "rhev", "isDisabled": get(env, context, "isDisabledRhev")});
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          inline(env, morph0, context, "wizard-item", [], {"num": get(env, context, "stepNumberOpenstack"), "name": get(env, context, "nameOpenStack"), "routeName": "openstack", "isDisabled": get(env, context, "isDisabledOpenstack")});
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          inline(env, morph0, context, "wizard-item", [], {"num": get(env, context, "stepNumberCloudForms"), "name": get(env, context, "nameCloudForms"), "routeName": "cloudforms", "isDisabled": get(env, context, "isDisabledCloudForms")});
          return fragment;
        }
      };
    }());
    var child3 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          inline(env, morph0, context, "wizard-item", [], {"num": get(env, context, "stepNumberSubscriptions"), "name": "Subscriptions", "routeName": "subscriptions", "isDisabled": get(env, context, "isDisabledSubscriptions")});
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","wizard-block");
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","white-wizard-line");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","wizard-line");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2,"class","deployment-wizard");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0, 5]);
        var morph0 = dom.createMorphAt(element0,1,1);
        var morph1 = dom.createMorphAt(element0,3,3);
        var morph2 = dom.createMorphAt(element0,5,5);
        var morph3 = dom.createMorphAt(element0,7,7);
        var morph4 = dom.createMorphAt(element0,9,9);
        var morph5 = dom.createMorphAt(element0,11,11);
        inline(env, morph0, context, "wizard-item", [], {"num": 1, "name": get(env, context, "nameSatellite"), "routeName": "satellite", "isDisabled": false});
        block(env, morph1, context, "if", [get(env, context, "isRhev")], {}, child0, null);
        block(env, morph2, context, "if", [get(env, context, "isOpenStack")], {}, child1, null);
        block(env, morph3, context, "if", [get(env, context, "isCloudForms")], {}, child2, null);
        block(env, morph4, context, "if", [get(env, context, "isSubscriptions")], {}, child3, null);
        inline(env, morph5, context, "wizard-item", [], {"num": get(env, context, "stepNumberReview"), "name": "Review", "routeName": "review", "isDisabled": get(env, context, "isDisabledReview")});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/select-f', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
          inline(env, morph0, context, "view", [get(env, context, "Ember.Select")], {"content": get(env, context, "content"), "value": get(env, context, "value"), "optionLabelPath": get(env, context, "optionLabelPath"), "optionValuePath": get(env, context, "optionValuePath"), "selection": get(env, context, "selection"), "prompt": get(env, context, "prompt"), "class": "form-control", "id": get(env, context, "cssId")});
          content(env, morph1, context, "yield");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "base-f", [], {"label": get(env, context, "label"), "labelSize": get(env, context, "labelSize"), "inputSize": get(env, context, "inputSize")}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/select-simple-f', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
          inline(env, morph0, context, "view", [get(env, context, "Ember.Select")], {"content": get(env, context, "content"), "value": get(env, context, "value"), "selection": get(env, context, "selection"), "prompt": get(env, context, "prompt"), "class": "form-control", "id": get(env, context, "cssId")});
          content(env, morph1, context, "yield");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "base-f", [], {"label": get(env, context, "label"), "labelSize": get(env, context, "labelSize"), "inputSize": get(env, context, "inputSize")}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/step-number', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "value");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/subnet-drop-area', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","panel-heading");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h3");
          dom.setAttribute(el2,"class","panel-title");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("small");
          var el4 = dom.createTextNode(" - ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1, 1]);
          var morph0 = dom.createMorphAt(element0,1,1);
          var morph1 = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
          content(env, morph0, context, "subnet.name");
          content(env, morph1, context, "subnet.network");
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            inline(env, morph0, context, "traffic-type", [], {"trafficType": get(env, context, "trafficType")});
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "draggable-object", [], {"content": get(env, context, "trafficType")}, child0, null);
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","empty-zone");
          var el2 = dom.createTextNode(" ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class"," ui-droppable");
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","panel-body subnet-types");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element1 = dom.childAt(fragment, [0]);
        var element2 = dom.childAt(element1, [3]);
        var morph0 = dom.createMorphAt(element1,1,1);
        var morph1 = dom.createMorphAt(element2,1,1);
        var morph2 = dom.createMorphAt(element2,2,2);
        block(env, morph0, context, "unless", [get(env, context, "hidePanelHeading")], {}, child0, null);
        block(env, morph1, context, "each", [get(env, context, "trafficTypes")], {"keyword": "trafficType"}, child1, null);
        block(env, morph2, context, "unless", [get(env, context, "hideEmptyZone")], {}, child2, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/text-f', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","error errorForValidation");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2,"class","glyphicon glyphicon-warning-sign");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),3,3);
              content(env, morph0, context, "errors.name");
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "if", [get(env, context, "errors.name")], {}, child0, null);
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline, block = hooks.block, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
          var morph2 = dom.createMorphAt(fragment,5,5,contextualElement);
          inline(env, morph0, context, "input", [], {"class": "form-control", "value": get(env, context, "value"), "placeholder": get(env, context, "placeholder"), "type": get(env, context, "typeInput"), "focus-out": "showErrors", "id": get(env, context, "cssId")});
          block(env, morph1, context, "if", [get(env, context, "showError")], {}, child0, null);
          content(env, morph2, context, "yield");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "base-f", [], {"label": get(env, context, "label"), "labelSize": get(env, context, "labelSize"), "inputSize": get(env, context, "inputSize"), "help-inline": get(env, context, "help-inline"), "errors": get(env, context, "errors")}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/textarea-f', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            inline(env, morph0, context, "textarea", [], {"class": "form-control", "value": get(env, context, "value"), "placeholder": get(env, context, "placeholder"), "rows": get(env, context, "numRows"), "id": get(env, context, "cssId")});
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            inline(env, morph0, context, "textarea", [], {"class": "form-control", "value": get(env, context, "value"), "placeholder": get(env, context, "placeholder"), "id": get(env, context, "cssId")});
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
          block(env, morph0, context, "if", [get(env, context, "rowsPassed")], {}, child0, child1);
          content(env, morph1, context, "yield");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "base-f", [], {"label": get(env, context, "label"), "labelSize": get(env, context, "labelSize"), "inputSize": get(env, context, "inputSize"), "help-inline": get(env, context, "help-inline")}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/tr-engine', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          inline(env, morph0, context, "input", [], {"type": "text", "value": get(env, context, "host.name"), "class": "font-control", "focus-out": "saveHostname", "id": get(env, context, "host.cssHostHostId")});
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, block = hooks.block, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
        var morph1 = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);
        var morph2 = dom.createMorphAt(dom.childAt(fragment, [4]),1,1);
        var morph3 = dom.createMorphAt(dom.childAt(fragment, [6]),1,1);
        var morph4 = dom.createMorphAt(dom.childAt(fragment, [8]),1,1);
        inline(env, morph0, context, "radio-button", [], {"value": get(env, context, "host.model"), "groupValue": get(env, context, "selectedRhevEngineHost"), "changed": "engineHostChanged", "id": get(env, context, "host.cssIdHostId")});
        block(env, morph1, context, "if", [get(env, context, "host.isSelectedAsEngine")], {}, child0, null);
        content(env, morph2, context, "host.mac");
        content(env, morph3, context, "host.cpus");
        content(env, morph4, context, "host.memory");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/tr-hypervisor', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          inline(env, morph0, context, "input", [], {"type": "text", "value": get(env, context, "host.name"), "class": "font-control", "focus-out": "saveHostname", "id": get(env, context, "host.cssHostHostId")});
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, block = hooks.block, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
        var morph1 = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);
        var morph2 = dom.createMorphAt(dom.childAt(fragment, [4]),1,1);
        var morph3 = dom.createMorphAt(dom.childAt(fragment, [6]),1,1);
        var morph4 = dom.createMorphAt(dom.childAt(fragment, [8]),1,1);
        inline(env, morph0, context, "input", [], {"type": "checkbox", "name": "isSelectedAsHypervisor", "checked": get(env, context, "host.isSelectedAsHypervisor"), "id": get(env, context, "host.cssIdHostId")});
        block(env, morph1, context, "if", [get(env, context, "host.isSelectedAsHypervisor")], {}, child0, null);
        content(env, morph2, context, "host.mac");
        content(env, morph3, context, "host.cpus");
        content(env, morph4, context, "host.memory");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/tr-organization', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
        var morph1 = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);
        var morph2 = dom.createMorphAt(dom.childAt(fragment, [4]),1,1);
        inline(env, morph0, context, "radio-button", [], {"value": get(env, context, "org"), "groupValue": get(env, context, "selectedOrganization"), "changed": "organizationChanged", "id": get(env, context, "org.id")});
        content(env, morph1, context, "org.name");
        content(env, morph2, context, "org.description");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/tr-task', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          content(env, morph0, context, "task.id");
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          content(env, morph0, context, "task.label");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        var el3 = dom.createTextNode("View Task");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block, content = hooks.content, attribute = hooks.attribute;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [12, 1]);
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
        var morph1 = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);
        var morph2 = dom.createMorphAt(dom.childAt(fragment, [4]),1,1);
        var morph3 = dom.createMorphAt(dom.childAt(fragment, [6]),1,1);
        var morph4 = dom.createMorphAt(dom.childAt(fragment, [8]),1,1);
        var morph5 = dom.createMorphAt(dom.childAt(fragment, [10]),1,1);
        var attrMorph0 = dom.createAttrMorph(element0, 'href');
        block(env, morph0, context, "link-to", ["review.progress.details.task", get(env, context, "task")], {}, child0, null);
        block(env, morph1, context, "link-to", ["review.progress.details.task", get(env, context, "task")], {}, child1, null);
        content(env, morph2, context, "task.state");
        content(env, morph3, context, "task.result");
        content(env, morph4, context, "task.started_at");
        content(env, morph5, context, "task.user");
        attribute(env, attrMorph0, element0, "href", get(env, context, "task.taskUrl"));
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/traffic-type', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "trafficType.name");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/upstream-downstream', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("i");
        dom.setAttribute(el3,"class","fa fa-arrow-up");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    Upstream\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("i");
        dom.setAttribute(el3,"class","fa fa-arrow-down");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    Downstream\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, element = hooks.element;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(fragment, [2]);
        var element3 = dom.childAt(element2, [1]);
        element(env, element0, context, "bind-attr", [], {"class": ":updown isUpstream:active_upstream:nonactive_upstream"});
        element(env, element1, context, "action", ["showUpstream"], {});
        element(env, element2, context, "bind-attr", [], {"class": ":updown isUpstream:nonactive_downstream:active_downstream"});
        element(env, element3, context, "action", ["showDownstream"], {});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/vertical-tab', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("a");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
        content(env, morph0, context, "name");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/components/wizard-item', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(". ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content, element = hooks.element;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [4]);
          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
          var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);
          dom.insertBoundary(fragment, 0);
          content(env, morph0, context, "num");
          content(env, morph1, context, "name");
          element(env, element0, context, "bind-attr", [], {"class": ":full-circle isDisabled:disable-circle"});
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("center");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element1 = dom.childAt(fragment, [0]);
        var morph0 = dom.createMorphAt(element1,1,1);
        var morph1 = dom.createMorphAt(element1,2,2);
        block(env, morph0, context, "link-to", [get(env, context, "routeName")], {"tagName": "li", "disabled": get(env, context, "isDisabled")}, child0, null);
        content(env, morph1, context, "yield");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/configure-environment', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","row");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","col-md-9");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","alert alert-success");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4,"class","fa fa-2x fa-check-circle-o green-circle");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n         \n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" added successfully.\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [0, 1, 1]),3,3);
          content(env, morph0, context, "selectedEnvironment.name");
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","path-selector");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("ul");
          dom.setAttribute(el2,"class","path-list");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("li");
          dom.setAttribute(el3,"class","path-list-item");
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("label");
          dom.setAttribute(el4,"class","path-list-item-label");
          var el5 = dom.createTextNode("\n            Library\n          ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("li");
          dom.setAttribute(el3,"class","path-list-item");
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("label");
          dom.setAttribute(el4,"class","path-list-item-label");
          dom.setAttribute(el4,"style","color:gray;");
          var el5 = dom.createTextNode("\n             \n          ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1]),3,3);
          inline(env, morph0, context, "env-path-list-item", [], {"env": get(env, context, "env"), "selectedEnvironment": get(env, context, "selectedEnvironment"), "action": "selectEnvironment"});
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","alert alert-info");
          var el2 = dom.createTextNode("\n        No lifecycle environments are in organization ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("strong");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1]),0,0);
          content(env, morph0, context, "selectedOrganization.name");
          return fragment;
        }
      };
    }());
    var child3 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        New Environment Path\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child4 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Back");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-6");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n      Select a lifecycle environment for this RHCI deployment. The application lifecycle is divided into lifecycle environments, which mimic each stage of the lifecycle. These lifecycle environments are linked in an environment path. You can promote content along the environment path to the next stage when required. For example, if development completes on a particular version of an application, you can promote this version to the testing environment and start development on the next version.\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-9");
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"style","margin-top:15px;");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-9");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","pull-right");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4,"class","btn btn-primary");
        var el5 = dom.createTextNode("\n          Next\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" \n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block, element = hooks.element, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [8, 1]);
        var element1 = dom.childAt(fragment, [14, 1, 1]);
        var element2 = dom.childAt(element1, [3]);
        var morph0 = dom.createMorphAt(fragment,2,2,contextualElement);
        var morph1 = dom.createMorphAt(element0,1,1);
        var morph2 = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
        var morph3 = dom.createMorphAt(element1,1,1);
        var morph4 = dom.createMorphAt(fragment,16,16,contextualElement);
        block(env, morph0, context, "if", [get(env, context, "showAlertMessage")], {}, child0, null);
        block(env, morph1, context, "each", [get(env, context, "nonLibraryEnvironments")], {"keyword": "env"}, child1, child2);
        block(env, morph2, context, "em-modal-toggler", [], {"modal-id": "newLifecycleEnvironmentModal", "class": "btn btn-default"}, child3, null);
        block(env, morph3, context, "link-to", [get(env, context, "organizationTabRouteName")], {"class": "btn btn-default"}, child4, null);
        element(env, element2, context, "action", ["saveDeployment", get(env, context, "step2RouteName")], {});
        element(env, element2, context, "bind-attr", [], {"disabled": get(env, context, "disableNextOnLifecycleEnvironment")});
        inline(env, morph4, context, "partial", ["new-environment"], {});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/configure-environment.loading', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("Loading Environments ...");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/configure-organization', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","col-md-9");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","alert alert-success");
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4,"class","fa fa-2x fa-check-circle-o green-circle");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n           \n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" added successfully.\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]),3,3);
          content(env, morph0, context, "selectedOrganization.name");
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        New Organization\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          inline(env, morph0, context, "tr-organization", [], {"org": get(env, context, "org"), "selectedOrganization": get(env, context, "selectedOrganization"), "action": "selectOrganization"});
          return fragment;
        }
      };
    }());
    var child3 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          Back\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child4 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            Next\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-5");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n      Choose an organization for this deployment. Organizations divide hosts into logical groups based on ownership, purpose, content, security level, or other divisions.\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-4");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","pull-right");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-9");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("table");
        dom.setAttribute(el3,"class","table table-striped");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("thead");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        var el6 = dom.createTextNode("Name");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        var el6 = dom.createTextNode("Description");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tbody");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-9");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","pull-right");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [14, 1, 1]);
        var morph0 = dom.createMorphAt(fragment,2,2,contextualElement);
        var morph1 = dom.createMorphAt(dom.childAt(fragment, [4, 3, 1]),1,1);
        var morph2 = dom.createMorphAt(dom.childAt(fragment, [8, 1, 1, 3]),1,1);
        var morph3 = dom.createMorphAt(element0,1,1);
        var morph4 = dom.createMorphAt(element0,2,2);
        var morph5 = dom.createMorphAt(fragment,16,16,contextualElement);
        dom.insertBoundary(fragment, null);
        block(env, morph0, context, "if", [get(env, context, "showAlertMessage")], {}, child0, null);
        block(env, morph1, context, "em-modal-toggler", [], {"modal-id": "newOrganizationModal", "class": "btn btn-primary"}, child1, null);
        block(env, morph2, context, "each", [get(env, context, "organizations")], {"keyword": "org"}, child2, null);
        block(env, morph3, context, "link-to", [get(env, context, "satelliteTabRouteName")], {"class": "btn btn-default"}, child3, null);
        block(env, morph4, context, "link-to", [get(env, context, "lifecycleEnvironmentTabRouteName")], {"disabled": get(env, context, "disableNextOnConfigureOrganization"), "class": "btn btn-primary"}, child4, null);
        inline(env, morph5, context, "partial", ["new-organization"], {});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/configure-organization.loading', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("Loading Organizations ...");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/content-source-upstream', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Next");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h1");
        var el2 = dom.createTextNode("No subscriptiosn for upstream");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        var el2 = dom.createTextNode("\n  There are no subscriptions for upstream.\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        var el2 = dom.createTextNode("\n  Do we need to define the source(s) of the content?\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"style","text-align:right");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("button");
        dom.setAttribute(el2,"class","btn btn-default");
        var el3 = dom.createTextNode("Cancel");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, element = hooks.element, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [6]);
        var element1 = dom.childAt(element0, [1]);
        var morph0 = dom.createMorphAt(element0,3,3);
        element(env, element1, context, "action", ["showModal", "cancel-modal"], {});
        block(env, morph0, context, "link-to", ["review.installation"], {"class": "btn btn-primary", "disabled": get(env, context, "disableTabInstallation")}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/debug-deployment', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("ID: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("  (isNew: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(")\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nDesc: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nOrg: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("   (");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(") ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nEnv: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("     (");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(") ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nhasName: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nhasOrganization: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nhasLifecycleEnvironment: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\ndisableTabConfigureOrganization: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\ndisableTabLifecycleEnvironment: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\ndisableAll: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\ndisableNextOnDeploymentName: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\ndisableNextOnConfigureOrganization: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\ndisableNextOnLifecycleEnvironment: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nisDisabledRhev: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nisDisabledOpenstack: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nisDisabledCloudForms: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nisDisabledSubscriptions: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nisDisabledReview: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\ndeploy_rhev: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\ndeploy_openstack: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\ndeploy_cfme: ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
        var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
        var morph2 = dom.createMorphAt(fragment,7,7,contextualElement);
        var morph3 = dom.createMorphAt(fragment,11,11,contextualElement);
        var morph4 = dom.createMorphAt(fragment,13,13,contextualElement);
        var morph5 = dom.createMorphAt(fragment,15,15,contextualElement);
        var morph6 = dom.createMorphAt(fragment,19,19,contextualElement);
        var morph7 = dom.createMorphAt(fragment,21,21,contextualElement);
        var morph8 = dom.createMorphAt(fragment,23,23,contextualElement);
        var morph9 = dom.createMorphAt(fragment,27,27,contextualElement);
        var morph10 = dom.createMorphAt(fragment,31,31,contextualElement);
        var morph11 = dom.createMorphAt(fragment,35,35,contextualElement);
        var morph12 = dom.createMorphAt(fragment,39,39,contextualElement);
        var morph13 = dom.createMorphAt(fragment,43,43,contextualElement);
        var morph14 = dom.createMorphAt(fragment,47,47,contextualElement);
        var morph15 = dom.createMorphAt(fragment,51,51,contextualElement);
        var morph16 = dom.createMorphAt(fragment,55,55,contextualElement);
        var morph17 = dom.createMorphAt(fragment,59,59,contextualElement);
        var morph18 = dom.createMorphAt(fragment,65,65,contextualElement);
        var morph19 = dom.createMorphAt(fragment,69,69,contextualElement);
        var morph20 = dom.createMorphAt(fragment,73,73,contextualElement);
        var morph21 = dom.createMorphAt(fragment,77,77,contextualElement);
        var morph22 = dom.createMorphAt(fragment,81,81,contextualElement);
        var morph23 = dom.createMorphAt(fragment,85,85,contextualElement);
        var morph24 = dom.createMorphAt(fragment,89,89,contextualElement);
        var morph25 = dom.createMorphAt(fragment,93,93,contextualElement);
        content(env, morph0, context, "id");
        content(env, morph1, context, "isNew");
        content(env, morph2, context, "description");
        content(env, morph3, context, "organization.name");
        content(env, morph4, context, "organization.id");
        content(env, morph5, context, "organization");
        content(env, morph6, context, "lifecycle_environment.name");
        content(env, morph7, context, "lifecycle_environment.id");
        content(env, morph8, context, "lifecycle_environment");
        content(env, morph9, context, "hasName");
        content(env, morph10, context, "hasOrganization");
        content(env, morph11, context, "hasLifecycleEnvironment");
        content(env, morph12, context, "disableTabConfigureOrganization");
        content(env, morph13, context, "disableTabLifecycleEnvironment");
        content(env, morph14, context, "disableAll");
        content(env, morph15, context, "disableNextOnDeploymentName");
        content(env, morph16, context, "disableNextOnConfigureOrganization");
        content(env, morph17, context, "disableNextOnLifecycleEnvironment");
        content(env, morph18, context, "isDisabledRhev");
        content(env, morph19, context, "isDisabledOpenstack");
        content(env, morph20, context, "isDisabledCloudForms");
        content(env, morph21, context, "isDisabledSubscriptions");
        content(env, morph22, context, "isDisabledReview");
        content(env, morph23, context, "deploy_rhev");
        content(env, morph24, context, "deploy_openstack");
        content(env, morph25, context, "deploy_cfme");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/deployment-new', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "partial", ["deployment"], {});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/deployment-new/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/deployment-new/satellite', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "partial", ["satellite"], {});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/deployment-new/satellite/configure-environment', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "partial", ["configure-environment"], {});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/deployment-new/satellite/configure-environment.loading', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("Loading Environments ...");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/deployment-new/satellite/configure-organization', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "partial", ["configure-organization"], {});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/deployment-new/satellite/configure-organization.loading', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("Loading Organizations ...");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/deployment-new/satellite/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "partial", ["satellite/index"], {});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/deployment-new/satellite/loading', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("Loading ....\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/deployment-new/start', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "partial", ["deployment/start"], {});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/deployment', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        Edit Production Selections ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","fa fa-pencil");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("     \n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            dom.insertBoundary(fragment, null);
            block(env, morph0, context, "link-to", ["deployment.start", get(env, context, "this")], {}, child0, null);
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("br");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("br");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h1");
          dom.setAttribute(el1,"class","deployment_name");
          var el2 = dom.createTextNode("New ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" Deployment: ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("strong");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("br");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("br");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [5]);
          var morph0 = dom.createMorphAt(element0,1,1);
          var morph1 = dom.createMorphAt(dom.childAt(element0, [3]),0,0);
          var morph2 = dom.createMorphAt(fragment,7,7,contextualElement);
          var morph3 = dom.createMorphAt(fragment,13,13,contextualElement);
          content(env, morph0, context, "nameRHCI");
          content(env, morph1, context, "name");
          block(env, morph2, context, "unless", [get(env, context, "isNew")], {}, child0, null);
          inline(env, morph3, context, "rhci-wizard", [], {"nameSatellite": get(env, context, "nameSatellite"), "nameRhev": get(env, context, "nameRhev"), "nameOpenStack": get(env, context, "nameOpenStack"), "nameCloudForms": get(env, context, "nameCloudForms"), "stepNumberRhev": get(env, context, "stepNumberRhev"), "stepNumberOpenstack": get(env, context, "stepNumberOpenstack"), "stepNumberCloudForms": get(env, context, "stepNumberCloudForms"), "stepNumberSubscriptions": get(env, context, "stepNumberSubscriptions"), "stepNumberReview": get(env, context, "stepNumberReview"), "isDisabledRhev": get(env, context, "isDisabledRhev"), "isDisabledOpenstack": get(env, context, "isDisabledOpenstack"), "isDisabledCloudForms": get(env, context, "isDisabledCloudForms"), "isDisabledSubscriptions": get(env, context, "isDisabledSubscriptions"), "isDisabledReview": get(env, context, "isDisabledReview"), "isRhev": get(env, context, "isRhev"), "isOpenStack": get(env, context, "isOpenStack"), "isCloudForms": get(env, context, "isCloudForms"), "isSubscriptions": get(env, context, "isSubscriptions")});
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
        var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
        block(env, morph0, context, "unless", [get(env, context, "isHideWizard")], {}, child0, null);
        content(env, morph1, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/deployment/start', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        inline(env, morph0, context, "rhci-start", [], {"isRhev": get(env, context, "isRhev"), "isOpenStack": get(env, context, "isOpenStack"), "isCloudForms": get(env, context, "isCloudForms"), "nameRedHat": get(env, context, "nameRedHat"), "nameRhev": get(env, context, "nameRhev"), "nameOpenStack": get(env, context, "nameOpenStack"), "nameCloudForms": get(env, context, "nameCloudForms"), "imgRhev": get(env, context, "imgRhev"), "imgOpenStack": get(env, context, "imgOpenStack"), "imgCloudForms": get(env, context, "imgCloudForms"), "isUpstream": get(env, context, "isUpstream"), "satelliteTabRouteName": get(env, context, "satelliteTabRouteName"), "disableNextOnStart": get(env, context, "disableNextOnStart")});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/deployments', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("New Deployment");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode(" ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" ");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            content(env, morph0, context, "deployment.name");
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode(" Edit ");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          var morph0 = dom.createMorphAt(dom.childAt(element0, [1]),1,1);
          var morph1 = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
          var morph2 = dom.createMorphAt(dom.childAt(element0, [5]),1,1);
          var morph3 = dom.createMorphAt(dom.childAt(element0, [7]),1,1);
          block(env, morph0, context, "link-to", ["deployment", get(env, context, "deployment")], {}, child0, null);
          content(env, morph1, context, "deployment.lifecycle_environment.name");
          content(env, morph2, context, "deployment.organization.name");
          block(env, morph3, context, "link-to", ["deployment", get(env, context, "deployment")], {"class": "btn btn-default"}, child1, null);
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h1");
        var el2 = dom.createTextNode("Deployments");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"style","float:right;");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1,"class","form");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","clearfix");
        var el3 = dom.createTextNode("\n   ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","form-group");
        dom.setAttribute(el3,"style","margin-left: -18px;");
        var el4 = dom.createTextNode("\n     ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","col-md-5");
        var el5 = dom.createTextNode("\n       ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n     ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n     ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4,"class","btn btn-default");
        dom.setAttribute(el4,"style","margin-left:-20px");
        var el5 = dom.createElement("i");
        dom.setAttribute(el5,"class","fa fa-search");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" Search");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n   ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("table");
        dom.setAttribute(el1,"class","table table-bordered table-striped small");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("thead");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tr");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode(" Name ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode(" Environment ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode(" Organization ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode(" ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("tbody");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nDisplaying ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("strong");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" of ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(" entries\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, block = hooks.block, get = hooks.get, inline = hooks.inline, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element1 = dom.childAt(fragment, [14]);
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [2, 1]),0,0);
        var morph1 = dom.createMorphAt(dom.childAt(fragment, [6, 1, 1, 1]),1,1);
        var morph2 = dom.createMorphAt(dom.childAt(fragment, [10, 3]),1,1);
        var morph3 = dom.createMorphAt(element1,0,0);
        var morph4 = dom.createMorphAt(element1,2,2);
        var morph5 = dom.createMorphAt(fragment,16,16,contextualElement);
        block(env, morph0, context, "link-to", ["deployment-new.start"], {"class": "btn btn-success"}, child0, null);
        inline(env, morph1, context, "input", [], {"type": "text", "class": "form-control", "placeholder": "Filter ...", "value": get(env, context, "searchDeploymentString")});
        block(env, morph2, context, "each", [get(env, context, "filteredDeployments")], {"itemController": "deployment", "keyword": "deployment"}, child1, null);
        content(env, morph3, context, "filteredDeployments.length");
        content(env, morph4, context, "model.length");
        content(env, morph5, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/devonly', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("new deployment");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","alert alert-danger");
          dom.setAttribute(el1,"role","alert");
          var el2 = dom.createTextNode("\n        You are already logged in and shouldn't be here.");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("br");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        You can\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          var el3 = dom.createTextNode("logout");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        or go to ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, element = hooks.element, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element3 = dom.childAt(fragment, [1]);
          var element4 = dom.childAt(element3, [3]);
          var morph0 = dom.createMorphAt(element3,5,5);
          element(env, element4, context, "action", ["invalidateSession"], {});
          block(env, morph0, context, "link-to", ["rhci"], {}, child0, null);
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      or Login using credentials from\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createTextNode("Facebook");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      |\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createTextNode("Google");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      |\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createTextNode("Github");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      |\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, element = hooks.element;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(fragment, [3]);
          var element2 = dom.childAt(fragment, [5]);
          element(env, element0, context, "action", ["authenticateSession", "facebook"], {});
          element(env, element1, context, "action", ["authenticateSession", "google"], {});
          element(env, element2, context, "action", ["authenticateSession", "github"], {});
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-7 col col-md-offset-2");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0, 1]),1,1);
        block(env, morph0, context, "if", [get(env, context, "session.isAuthenticated")], {}, child0, child1);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/discovered-host', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/discovered-hosts', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/engine', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-12");
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h4");
        dom.setAttribute(el3,"style","padding-left:15px;");
        var el4 = dom.createTextNode("Select a target machine for the ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(":");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","col-md-12");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0, 1]);
        var morph0 = dom.createMorphAt(dom.childAt(element0, [1]),1,1);
        var morph1 = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
        content(env, morph0, context, "engineTabNameLowercase");
        content(env, morph1, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/engine/discovered-host', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("     ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          inline(env, morph0, context, "tr-engine", [], {"host": get(env, context, "host"), "selectedRhevEngineHost": get(env, context, "selectedRhevEngineHost")});
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Cancel");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Next");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("table");
        dom.setAttribute(el1,"class","table table-bordered table-striped small");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("thead");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tr");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode(" ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode(" Name ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode(" MAC ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode(" CPU's ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode(" Memory ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("tbody");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","pull-right");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("br");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [4]);
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [2, 3]),1,1);
        var morph1 = dom.createMorphAt(element0,3,3);
        var morph2 = dom.createMorphAt(element0,5,5);
        block(env, morph0, context, "each", [get(env, context, "availableHosts")], {"itemController": "discovered-host", "keyword": "host"}, child0, null);
        block(env, morph1, context, "link-to", ["deployments"], {"class": "btn btn-default"}, child1, null);
        block(env, morph2, context, "link-to", ["hypervisor.discovered-host"], {"class": "btn btn-primary"}, child2, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/hostgroup', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/hostgroup/edit', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/hostgroups', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("th");
          var el2 = dom.createTextNode("Subnet");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("th");
          var el2 = dom.createTextNode("Domain");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("th");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("             ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            content(env, morph0, context, "name");
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("Edit");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            var el2 = dom.createTextNode("  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            var el2 = dom.createTextNode("  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(dom.childAt(fragment, [5]),1,1);
            block(env, morph0, context, "link-to", ["hostgroup.edit", get(env, context, "this")], {"class": "btn btn-default"}, child0, null);
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2,"style","word-wrap:break-word;");
          dom.setAttribute(el2,"width","100");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("          ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          var morph0 = dom.createMorphAt(dom.childAt(element0, [1]),1,1);
          var morph1 = dom.createMorphAt(element0,3,3);
          block(env, morph0, context, "link-to", ["hostgroup.edit", get(env, context, "this")], {}, child0, null);
          block(env, morph1, context, "unless", [get(env, context, "onShowPage")], {}, child1, null);
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createTextNode("No hostgroups found.");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("table");
        dom.setAttribute(el1,"class","table table-bordered");
        dom.setAttribute(el1,"style","table-layout:fixed;");
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("thead");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tr");
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode("Title");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("tbody");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("      ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element1 = dom.childAt(fragment, [1]);
        var morph0 = dom.createMorphAt(dom.childAt(element1, [1, 1]),3,3);
        var morph1 = dom.createMorphAt(dom.childAt(element1, [3]),1,1);
        var morph2 = dom.createMorphAt(fragment,3,3,contextualElement);
        block(env, morph0, context, "unless", [get(env, context, "onShowPage")], {}, child0, null);
        block(env, morph1, context, "each", [], {"itemController": "hostgroup"}, child1, child2);
        content(env, morph2, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/hypervisor', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-12");
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h4");
        dom.setAttribute(el3,"style","padding-left:15px;");
        var el4 = dom.createTextNode("Select one or more target machines to be hypervisors.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","col-md-12");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0, 1, 3]),1,1);
        content(env, morph0, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/hypervisor/discovered-host', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("     ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          inline(env, morph0, context, "tr-hypervisor", [], {"host": get(env, context, "host")});
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Cancel");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("strong");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(" of ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("strong");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\navailable hosts selected ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("table");
        dom.setAttribute(el1,"class","table table-bordered table-striped small");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("thead");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tr");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode(" ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode(" Name ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode(" MAC ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode(" CPU's ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode(" Memory ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("tbody");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","pull-right");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("br");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("button");
        dom.setAttribute(el2,"class","btn btn-primary");
        var el3 = dom.createTextNode("Next");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("Next");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block, element = hooks.element;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [12]);
        var element1 = dom.childAt(element0, [5]);
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
        var morph1 = dom.createMorphAt(dom.childAt(fragment, [2]),0,0);
        var morph2 = dom.createMorphAt(fragment,4,4,contextualElement);
        var morph3 = dom.createMorphAt(dom.childAt(fragment, [10, 3]),1,1);
        var morph4 = dom.createMorphAt(element0,3,3);
        content(env, morph0, context, "model.length");
        content(env, morph1, context, "availableHosts.length");
        content(env, morph2, context, "idsChecked");
        block(env, morph3, context, "each", [get(env, context, "availableHosts")], {"itemController": "discovered-host", "keyword": "host"}, child0, null);
        block(env, morph4, context, "link-to", ["deployments"], {"class": "btn btn-default"}, child1, null);
        element(env, element1, context, "action", ["saveHyperVisors", "rhev-options"], {});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("deployments");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("templates/index.hbs\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,5,5,contextualElement);
        block(env, morph0, context, "link-to", ["deployments"], {}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/loading', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h2");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\nLoading ....\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);
        inline(env, morph0, context, "fa-icon", ["spinner"], {"spin": true});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/loggedin', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h1");
        var el2 = dom.createTextNode("ALREADY LOGGED IN");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/login', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","alert alert-danger col-md-offset-2");
          dom.setAttribute(el1,"role","alert");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("strong");
          var el4 = dom.createTextNode("Login failed:");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("code");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1, 3]),0,0);
          content(env, morph0, context, "errorMessage");
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                Basic Authorization\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                oAuth Token\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
          var morph1 = dom.createMorphAt(fragment,1,1,contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "radio-button", [], {"value": "Basic", "groupValue": get(env, context, "authType")}, child0, null);
          block(env, morph1, context, "radio-button", [], {"value": "oAuth", "groupValue": get(env, context, "authType")}, child1, null);
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h1");
        var el2 = dom.createTextNode("Login");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"id","login");
        dom.setAttribute(el1,"class","container");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","row");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","col-sm-12");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"id","brand");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment(" <img alt=\"Foreman_white\" src=\"assets/foreman_white.png\" /> ");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("/#brand");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","col-sm-7 col-md-6 col-lg-5 login");
        var el4 = dom.createTextNode("\n\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("form");
        dom.setAttribute(el4,"accept-charset","UTF-8");
        dom.setAttribute(el4,"action","/users/login");
        dom.setAttribute(el4,"class","form-horizontal");
        dom.setAttribute(el4,"id","login-form");
        dom.setAttribute(el4,"method","post");
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"style","margin:0;padding:0;display:inline");
        var el6 = dom.createElement("input");
        dom.setAttribute(el6,"name","utf8");
        dom.setAttribute(el6,"type","hidden");
        dom.setAttribute(el6,"value","✓");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("input");
        dom.setAttribute(el6,"name","authenticity_token");
        dom.setAttribute(el6,"type","hidden");
        dom.setAttribute(el6,"value","1f770GegsrWb4ZJIC0UkSEkvBVG9MnRJ7jypTsrjeLU=");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","form-group");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        dom.setAttribute(el6,"class","col-sm-2 control-label");
        dom.setAttribute(el6,"for","login_login");
        var el7 = dom.createTextNode("Username");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"class","col-sm-10");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","form-group");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        dom.setAttribute(el6,"class","col-sm-2 control-label");
        dom.setAttribute(el6,"for","login_password");
        var el7 = dom.createTextNode("Password");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"class","col-sm-10");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","form-group");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"class","col-xs-offset-8 col-xs-4 submit");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("button");
        dom.setAttribute(el7,"class","btn btn-primary");
        var el8 = dom.createTextNode("Login");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block, inline = hooks.inline, element = hooks.element;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [10, 1, 3]);
        var element1 = dom.childAt(element0, [3]);
        var element2 = dom.childAt(element1, [8, 1, 1]);
        var morph0 = dom.createMorphAt(element0,1,1);
        var morph1 = dom.createMorphAt(dom.childAt(element1, [2, 3]),1,1);
        var morph2 = dom.createMorphAt(dom.childAt(element1, [4, 3]),1,1);
        var morph3 = dom.createMorphAt(element1,6,6);
        block(env, morph0, context, "if", [get(env, context, "errorMessage")], {}, child0, null);
        inline(env, morph1, context, "input", [], {"type": "text", "value": get(env, context, "identification"), "size": "30", "class": "form-control"});
        inline(env, morph2, context, "input", [], {"type": "password", "value": get(env, context, "password"), "size": "30", "class": "form-control"});
        block(env, morph3, context, "base-f", [], {"label": "", "labelSize": "col-md-2", "inputSize": "col-md-9"}, child1, null);
        element(env, element2, context, "action", ["authenticate"], {});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/logout-modal', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  Are you sure you want to logout?\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "modal-confirm", [], {"title": "Logout", "ok": "logout", "close": "removeModal"}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/mainmenu', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("EMBER-CLI DEV MODE ONLY");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" INSTALLER ");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          content(env, morph0, context, "nameRHCI");
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("All Deployments");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child3 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("New ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" Deployment");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          content(env, morph0, context, "nameRHCI");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"style","position: static; top: 0px;");
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","navbar-header");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"type","button");
        dom.setAttribute(el3,"class","navbar-toggle collapsed");
        dom.setAttribute(el3,"data-toggle","collapse");
        dom.setAttribute(el3,"data-target","#bs-example-navbar-collapse-1");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","sr-only");
        var el5 = dom.createTextNode("Toggle navigation");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","icon-bar");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","icon-bar");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","icon-bar");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("a");
        dom.setAttribute(el3,"class","navbar-brand");
        dom.setAttribute(el3,"href","#");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("ul");
        dom.setAttribute(el3,"class","nav navbar-nav");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, element = hooks.element, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1, 5]);
        var morph0 = dom.createMorphAt(dom.childAt(element1, [1]),0,0);
        var morph1 = dom.createMorphAt(dom.childAt(element1, [3]),0,0);
        var morph2 = dom.createMorphAt(dom.childAt(element1, [5]),0,0);
        var morph3 = dom.createMorphAt(dom.childAt(element1, [7]),0,0);
        element(env, element0, context, "bind-attr", [], {"class": ":navbar :navbar-default :navbar-inner :navbar-fixed-top :persist-header isUpstream:navbar-inner-upstream"});
        block(env, morph0, context, "link-to", ["deployments"], {}, child0, null);
        block(env, morph1, context, "link-to", ["deployments"], {}, child1, null);
        block(env, morph2, context, "link-to", ["deployments"], {}, child2, null);
        block(env, morph3, context, "link-to", ["deployment-new.start"], {}, child3, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/networking', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h4");
        var el2 = dom.createTextNode("Networking Configuration");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-12");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("br");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3,"class","form form-horizontal");
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [2, 1, 3]),1,1);
        inline(env, morph0, context, "text-f", [], {"label": "DNS name", "value": get(env, context, "dnsName")});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/new-environment', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"aria-hidden","true");
              var el2 = dom.createTextNode("×");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","sr-only");
              var el2 = dom.createTextNode("Close");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h4");
            dom.setAttribute(el1,"class","modal-title");
            var el2 = dom.createTextNode("Create Organization");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "em-modal-toggler", [], {"class": "close"}, child0, null);
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            Submitting, please wait...\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        var child1 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
              var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
              var morph2 = dom.createMorphAt(fragment,5,5,contextualElement);
              inline(env, morph0, context, "text-f", [], {"label": "Environment Path Name", "value": get(env, context, "name"), "labelSize": "col-md-4", "inputSize": "col-md-8"});
              inline(env, morph1, context, "text-f", [], {"label": "Label", "value": get(env, context, "label"), "labelSize": "col-md-4", "inputSize": "col-md-8"});
              inline(env, morph2, context, "textarea-f", [], {"label": "Description (Optional)", "value": get(env, context, "description"), "labelSize": "col-md-4", "inputSize": "col-md-8"});
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "if", [get(env, context, "async")], {}, child0, child1);
            return fragment;
          }
        };
      }());
      var child2 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1,"type","submit");
            dom.setAttribute(el1,"class","btn btn-primary");
            var el2 = dom.createTextNode("Submit");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, element = hooks.element;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [1]);
            element(env, element0, context, "bind-attr", [], {"disabled": get(env, context, "async")});
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
          var morph2 = dom.createMorphAt(fragment,5,5,contextualElement);
          block(env, morph0, context, "em-modal-title", [], {}, child0, null);
          block(env, morph1, context, "em-modal-body", [], {}, child1, null);
          block(env, morph2, context, "em-modal-footer", [], {}, child2, null);
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "em-modal-form", [], {"configName": "bs", "id": "newLifecycleEnvironmentModal", "on-submit": "createEnvironment", "in-async": get(env, context, "async")}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/new-organization', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"aria-hidden","true");
              var el2 = dom.createTextNode("×");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","sr-only");
              var el2 = dom.createTextNode("Close");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h4");
            dom.setAttribute(el1,"class","modal-title");
            var el2 = dom.createTextNode("Create Organization");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "em-modal-toggler", [], {"class": "close"}, child0, null);
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            Submitting, please wait...\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        var child1 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, get = hooks.get, inline = hooks.inline;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
              var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
              inline(env, morph0, context, "text-f", [], {"label": "Organization Name", "value": get(env, context, "defaultOrgName"), "labelSize": "col-md-4", "inputSize": "col-md-8"});
              inline(env, morph1, context, "textarea-f", [], {"label": "Description (Optional)", "value": get(env, context, "fields_org.description"), "labelSize": "col-md-4", "inputSize": "col-md-8"});
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            block(env, morph0, context, "if", [get(env, context, "async")], {}, child0, child1);
            return fragment;
          }
        };
      }());
      var child2 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1,"type","submit");
            dom.setAttribute(el1,"class","btn btn-primary");
            var el2 = dom.createTextNode("Submit");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, get = hooks.get, element = hooks.element;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var element0 = dom.childAt(fragment, [1]);
            element(env, element0, context, "bind-attr", [], {"disabled": get(env, context, "async")});
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
          var morph2 = dom.createMorphAt(fragment,5,5,contextualElement);
          block(env, morph0, context, "em-modal-title", [], {}, child0, null);
          block(env, morph1, context, "em-modal-body", [], {}, child1, null);
          block(env, morph2, context, "em-modal-footer", [], {}, child2, null);
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, null);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "em-modal-form", [], {"configName": "bs", "id": "newOrganizationModal", "on-submit": "createOrganization", "in-async": get(env, context, "async")}, child0, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/nodes', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("adfasdf");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/openstack', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("A. Registering Nodes");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          content(env, morph0, context, "stepNumberOpenstack");
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("B. Assigning Nodes");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          content(env, morph0, context, "stepNumberOpenstack");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row tabbed_side_nav_form");
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2,"class","nav nav-pills nav-stacked col-md-3");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","tab-content col-md-9");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, block = hooks.block, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var morph0 = dom.createMorphAt(element1,1,1);
        var morph1 = dom.createMorphAt(element1,3,3);
        var morph2 = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
        block(env, morph0, context, "link-to", ["register-nodes"], {"tagName": "li"}, child0, null);
        block(env, morph1, context, "link-to", ["assign-nodes"], {"tagName": "li"}, child1, null);
        content(env, morph2, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/openstack/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/products', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  Syncronizing content (");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("% complete)\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
          content(env, morph0, context, "prog");
          inline(env, morph1, context, "bs-progress", [], {"progressBinding": "prog", "type": "success", "stripped": true, "animated": true});
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","alert alert-success");
          var el2 = dom.createTextNode("\n   Yeah! You successfully synced content!\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode(" + ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1]);
          var morph0 = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
          var morph1 = dom.createMorphAt(dom.childAt(element0, [5]),1,1);
          var morph2 = dom.createMorphAt(dom.childAt(element0, [7]),1,1);
          var morph3 = dom.createMorphAt(dom.childAt(element0, [9]),1,1);
          var morph4 = dom.createMorphAt(dom.childAt(element0, [11]),1,1);
          content(env, morph0, context, "name");
          content(env, morph1, context, "start_time");
          content(env, morph2, context, "duration");
          content(env, morph3, context, "size");
          content(env, morph4, context, "result");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("table");
        dom.setAttribute(el1,"class","table table-bordered table-striped small");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("thead");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tr");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode(" ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode(" Product ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode(" Start Time ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode(" Duration ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode(" Size ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode(" Result ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("tbody");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("button");
        dom.setAttribute(el1,"class","btn btn-success");
        var el2 = dom.createTextNode("Sync Products");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block, element = hooks.element;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element1 = dom.childAt(fragment, [10]);
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);
        var morph2 = dom.createMorphAt(dom.childAt(fragment, [6, 3]),1,1);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "syncingInProgress")], {}, child0, null);
        block(env, morph1, context, "if", [get(env, context, "showSuccessMessage")], {}, child1, null);
        block(env, morph2, context, "each", [get(env, context, "controller.model")], {"itemController": "satellite/product"}, child2, null);
        element(env, element1, context, "bind-attr", [], {"disabled": get(env, context, "disableSyncButton")});
        element(env, element1, context, "action", ["syncProducts"], {});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/register-nodes', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("TDB Register Nodes\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
        content(env, morph0, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/review', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("A. Review Installation");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          content(env, morph0, context, "stepNumberReview");
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("B. Installation Progress");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          content(env, morph0, context, "stepNumberReview");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row tabbed_side_nav_form");
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2,"class","nav nav-pills nav-stacked col-md-3");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","tab-content col-md-9");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var morph0 = dom.createMorphAt(element1,1,1);
        var morph1 = dom.createMorphAt(element1,3,3);
        var morph2 = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
        block(env, morph0, context, "link-to", ["review.installation"], {"tagName": "li", "disabled": get(env, context, "disableTabInstallation")}, child0, null);
        block(env, morph1, context, "link-to", ["review.progress.overview"], {"tagName": "li", "disabled": get(env, context, "disableTabProgress")}, child1, null);
        content(env, morph2, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/review/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/review/installation', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","col-md-9");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","alert alert-danger");
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4,"class","fa fa-2x fa-exclamation-triangle errorForValidation");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n           \n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]),3,3);
          content(env, morph0, context, "errorMsg");
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            content(env, morph0, context, "controllers.deployment.name");
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            content(env, morph0, context, "controllers.deployment.organization.name");
            return fragment;
          }
        };
      }());
      var child2 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, content = hooks.content;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, null);
            dom.insertBoundary(fragment, 0);
            content(env, morph0, context, "controllers.deployment.lifecycle_environment.name");
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      Name: ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("br");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n      Organization: ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("br");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n      Environment: ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("br");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          var morph1 = dom.createMorphAt(fragment,5,5,contextualElement);
          var morph2 = dom.createMorphAt(fragment,9,9,contextualElement);
          block(env, morph0, context, "link-to", ["satellite"], {}, child0, null);
          block(env, morph1, context, "link-to", ["configure-organization"], {}, child1, null);
          block(env, morph2, context, "link-to", ["configure-environment"], {}, child2, null);
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode(" ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode(" ");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
              content(env, morph0, context, "controllers.rhev-setup.rhevSetupTitle");
              return fragment;
            }
          };
        }());
        var child1 = (function() {
          var child0 = (function() {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode(" ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode(" ");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks, content = hooks.content;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
                content(env, morph0, context, "rhev_engine_host.name");
                return fragment;
              }
            };
          }());
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        Hypervisor/Engine:\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("br");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, block = hooks.block;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
              block(env, morph0, context, "link-to", ["engine.discovered-host"], {}, child0, null);
              return fragment;
            }
          };
        }());
        var child2 = (function() {
          var child0 = (function() {
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode(" ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode(" ");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks, content = hooks.content;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
                content(env, morph0, context, "rhev_engine_host.name");
                return fragment;
              }
            };
          }());
          var child1 = (function() {
            var child0 = (function() {
              return {
                isHTMLBars: true,
                revision: "Ember@1.11.1",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: false,
                build: function build(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode(" ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode(".rhci.redhat.com ");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                render: function render(context, env, contextualElement) {
                  var dom = env.dom;
                  var hooks = env.hooks, content = hooks.content;
                  dom.detectNamespace(contextualElement);
                  var fragment;
                  if (env.useFragmentCache && dom.canClone) {
                    if (this.cachedFragment === null) {
                      fragment = this.build(dom);
                      if (this.hasRendered) {
                        this.cachedFragment = fragment;
                      } else {
                        this.hasRendered = true;
                      }
                    }
                    if (this.cachedFragment) {
                      fragment = dom.cloneNode(this.cachedFragment, true);
                    }
                  } else {
                    fragment = this.build(dom);
                  }
                  var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
                  content(env, morph0, context, "host.name");
                  return fragment;
                }
              };
            }());
            return {
              isHTMLBars: true,
              revision: "Ember@1.11.1",
              blockParams: 0,
              cachedFragment: null,
              hasRendered: false,
              build: function build(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("br");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              render: function render(context, env, contextualElement) {
                var dom = env.dom;
                var hooks = env.hooks, block = hooks.block;
                dom.detectNamespace(contextualElement);
                var fragment;
                if (env.useFragmentCache && dom.canClone) {
                  if (this.cachedFragment === null) {
                    fragment = this.build(dom);
                    if (this.hasRendered) {
                      this.cachedFragment = fragment;
                    } else {
                      this.hasRendered = true;
                    }
                  }
                  if (this.cachedFragment) {
                    fragment = dom.cloneNode(this.cachedFragment, true);
                  }
                } else {
                  fragment = this.build(dom);
                }
                var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
                block(env, morph0, context, "link-to", ["hypervisor.discovered-host"], {}, child0, null);
                return fragment;
              }
            };
          }());
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        Engine:\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("br");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n        Hypervisor: ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("br");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, block = hooks.block, get = hooks.get;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
              var morph1 = dom.createMorphAt(fragment,6,6,contextualElement);
              dom.insertBoundary(fragment, null);
              block(env, morph0, context, "link-to", ["engine.discovered-host"], {}, child0, null);
              block(env, morph1, context, "each", [get(env, context, "selectedHypervisorHosts")], {"keyword": "host"}, child1, null);
              return fragment;
            }
          };
        }());
        var child3 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          *********\n        ");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              return fragment;
            }
          };
        }());
        var child4 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n        ");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
              content(env, morph0, context, "controllers.deployment.rhev_database_name");
              return fragment;
            }
          };
        }());
        var child5 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n        ");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
              content(env, morph0, context, "controllers.deployment.rhev_cluster_name");
              return fragment;
            }
          };
        }());
        var child6 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n        ");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
              content(env, morph0, context, "controllers.deployment.rhev_storage_name");
              return fragment;
            }
          };
        }());
        var child7 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n        ");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
              content(env, morph0, context, "controllers.deployment.rhev_cpu_type");
              return fragment;
            }
          };
        }());
        var child8 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n        ");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
              content(env, morph0, context, "controllers.deployment.rhev_storage_type");
              return fragment;
            }
          };
        }());
        var child9 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n          ");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
              content(env, morph0, context, "controllers.deployment.rhev_storage_address");
              return fragment;
            }
          };
        }());
        var child10 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n          ");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
              content(env, morph0, context, "controllers.deployment.rhev_share_path");
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      Setup Type: ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("br");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("br");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      Engine admin password:\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("br");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      Datacenter Name:\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("br");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      Cluster Name:\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("br");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      Storage Name:\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("br");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      CPU Type:\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("br");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("br");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      Storage Type:\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("br");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n          Storage Address:\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("br");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n          Share Path:\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("br");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("br");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("br");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, block = hooks.block, get = hooks.get;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            var morph1 = dom.createMorphAt(fragment,5,5,contextualElement);
            var morph2 = dom.createMorphAt(fragment,9,9,contextualElement);
            var morph3 = dom.createMorphAt(fragment,13,13,contextualElement);
            var morph4 = dom.createMorphAt(fragment,17,17,contextualElement);
            var morph5 = dom.createMorphAt(fragment,21,21,contextualElement);
            var morph6 = dom.createMorphAt(fragment,25,25,contextualElement);
            var morph7 = dom.createMorphAt(fragment,31,31,contextualElement);
            var morph8 = dom.createMorphAt(fragment,35,35,contextualElement);
            var morph9 = dom.createMorphAt(fragment,39,39,contextualElement);
            block(env, morph0, context, "link-to", ["rhev-setup"], {}, child0, null);
            block(env, morph1, context, "if", [get(env, context, "isSelfHosted")], {}, child1, child2);
            block(env, morph2, context, "link-to", ["rhev-options"], {}, child3, null);
            block(env, morph3, context, "link-to", ["rhev-options"], {}, child4, null);
            block(env, morph4, context, "link-to", ["rhev-options"], {}, child5, null);
            block(env, morph5, context, "link-to", ["rhev-options"], {}, child6, null);
            block(env, morph6, context, "link-to", ["rhev-options"], {}, child7, null);
            block(env, morph7, context, "link-to", ["storage"], {}, child8, null);
            block(env, morph8, context, "link-to", ["storage"], {}, child9, null);
            block(env, morph9, context, "link-to", ["storage"], {}, child10, null);
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "accordion-item", [], {"name": get(env, context, "controllers.deployment.nameRhev"), "isOpen": get(env, context, "isRhevOpen")}, child0, null);
          return fragment;
        }
      };
    }());
    var child3 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "accordion-item", [], {"name": get(env, context, "controllers.deployment.nameOpenStack"), "isOpen": get(env, context, "isOpenStackOpen")}, child0, null);
          return fragment;
        }
      };
    }());
    var child4 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            isHTMLBars: true,
            revision: "Ember@1.11.1",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: false,
            build: function build(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n        ");
              dom.appendChild(el0, el1);
              return el0;
            },
            render: function render(context, env, contextualElement) {
              var dom = env.dom;
              var hooks = env.hooks, content = hooks.content;
              dom.detectNamespace(contextualElement);
              var fragment;
              if (env.useFragmentCache && dom.canClone) {
                if (this.cachedFragment === null) {
                  fragment = this.build(dom);
                  if (this.hasRendered) {
                    this.cachedFragment = fragment;
                  } else {
                    this.hasRendered = true;
                  }
                }
                if (this.cachedFragment) {
                  fragment = dom.cloneNode(this.cachedFragment, true);
                }
              } else {
                fragment = this.build(dom);
              }
              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
              content(env, morph0, context, "controllers.deployment.cfme_install_loc");
              return fragment;
            }
          };
        }());
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      Installation Location:\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("br");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            var hooks = env.hooks, block = hooks.block;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
            block(env, morph0, context, "link-to", ["where-install"], {}, child0, null);
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "accordion-item", [], {"name": get(env, context, "controllers.deployment.nameCloudForms"), "isOpen": get(env, context, "isCloudFormsOpen")}, child0, null);
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-11 col-md-offset-1");
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("br");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("br");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","pull-right");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("br");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4,"class","btn btn-default");
        var el5 = dom.createTextNode("Cancel");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("br");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" Skip Content (DEV ONLY)\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block, element = hooks.element, inline = hooks.inline, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [2, 1]);
        var element1 = dom.childAt(element0, [13]);
        var element2 = dom.childAt(element1, [3]);
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        var morph1 = dom.createMorphAt(element0,1,1);
        var morph2 = dom.createMorphAt(element0,3,3);
        var morph3 = dom.createMorphAt(element0,5,5);
        var morph4 = dom.createMorphAt(element0,7,7);
        var morph5 = dom.createMorphAt(element1,5,5);
        var morph6 = dom.createMorphAt(element1,9,9);
        var morph7 = dom.createMorphAt(fragment,4,4,contextualElement);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "showErrorMessage")], {}, child0, null);
        block(env, morph1, context, "accordion-item", [], {"name": get(env, context, "controllers.deployment.nameSatellite"), "isOpen": true}, child1, null);
        block(env, morph2, context, "if", [get(env, context, "isRhev")], {}, child2, null);
        block(env, morph3, context, "if", [get(env, context, "isOpenStack")], {}, child3, null);
        block(env, morph4, context, "if", [get(env, context, "isCloudForms")], {}, child4, null);
        element(env, element2, context, "action", ["showModal", "cancelDeploymentModal"], {});
        inline(env, morph5, context, "button-f", [], {"disabled": get(env, context, "buttonDeployDisabled"), "title": get(env, context, "buttonDeployTitle"), "action": "installDeployment"});
        inline(env, morph6, context, "input", [], {"type": "checkbox", "name": "skipContent", "checked": get(env, context, "skipContent")});
        content(env, morph7, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/review/progress', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","row");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","col-md-9");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","alert alert-danger");
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4,"class","fa fa-2x fa-exclamation-triangle errorForValidation");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n           \n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]),3,3);
          content(env, morph0, context, "errorMsg");
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createTextNode("Overview");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createTextNode("Details");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-12");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("ul");
        dom.setAttribute(el3,"class","nav nav-tabs col-md-12");
        dom.setAttribute(el3,"data-tabs","pills");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","col-md-12");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("br");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("br");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","pull-right");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("br");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4,"class","btn btn-default");
        var el5 = dom.createTextNode("Cancel");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block, content = hooks.content, element = hooks.element, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [2, 1]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element0, [9]);
        var element3 = dom.childAt(element2, [3]);
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        var morph1 = dom.createMorphAt(element1,1,1);
        var morph2 = dom.createMorphAt(element1,2,2);
        var morph3 = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
        var morph4 = dom.createMorphAt(element2,5,5);
        dom.insertBoundary(fragment, 0);
        block(env, morph0, context, "if", [get(env, context, "showErrorMessage")], {}, child0, null);
        block(env, morph1, context, "link-to", ["review.progress.overview"], {"tagName": "li"}, child1, null);
        block(env, morph2, context, "link-to", ["review.progress.details"], {"tagName": "li"}, child2, null);
        content(env, morph3, context, "outlet");
        element(env, element3, context, "action", ["showModal", "cancelDeploymentModal"], {});
        inline(env, morph4, context, "button-f", [], {"disabled": get(env, context, "buttonDeployDisabled"), "title": get(env, context, "buttonDeployTitle"), "action": "installDeployment"});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/review/progress/details', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-9");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("table");
        dom.setAttribute(el3,"class","table table-striped");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("thead");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        var el6 = dom.createTextNode("Product");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        var el6 = dom.createTextNode("Action");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        var el6 = dom.createTextNode("State");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        var el6 = dom.createTextNode("Result");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        var el6 = dom.createTextNode("Started at");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        var el6 = dom.createTextNode("User");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        var el6 = dom.createTextNode("Action");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tbody");
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0, 1, 1, 3]),1,1);
        var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);
        inline(env, morph0, context, "tr-task", [], {"task": get(env, context, "model"), "selectedTask": get(env, context, "selectedTask"), "action": "chooseTask"});
        content(env, morph1, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/review/progress/details/task', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createTextNode("Task");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createTextNode("Running Steps");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createTextNode("Errors");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child3 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createTextNode("Locks");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child4 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createTextNode("Raw");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("ul");
        dom.setAttribute(el1,"class","nav nav-tabs col-md-12");
        dom.setAttribute(el1,"data-tabs","pills");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","col-md-12");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [2]);
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
        var morph1 = dom.createMorphAt(element0,1,1);
        var morph2 = dom.createMorphAt(element0,2,2);
        var morph3 = dom.createMorphAt(element0,3,3);
        var morph4 = dom.createMorphAt(element0,4,4);
        var morph5 = dom.createMorphAt(element0,5,5);
        var morph6 = dom.createMorphAt(dom.childAt(fragment, [4]),1,1);
        content(env, morph0, context, "label");
        block(env, morph1, context, "link-to", ["review.progress.details.task.index"], {"tagName": "li"}, child0, null);
        block(env, morph2, context, "link-to", ["review.progress.details.task.running_steps"], {"tagName": "li"}, child1, null);
        block(env, morph3, context, "link-to", ["review.progress.details.task.task_errors"], {"tagName": "li"}, child2, null);
        block(env, morph4, context, "link-to", ["review.progress.details.task.task_locks"], {"tagName": "li"}, child3, null);
        block(env, morph5, context, "link-to", ["review.progress.details.task.task_raw"], {"tagName": "li"}, child4, null);
        content(env, morph6, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/review/progress/details/task/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","param-name");
          var el3 = dom.createTextNode("Parent task");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","param-name");
          var el3 = dom.createTextNode("Sub tasks");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","param-name");
          var el3 = dom.createTextNode("Output:");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","param-value");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("pre");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [0, 3, 1]),0,0);
          content(env, morph0, context, "model.humanized_output");
          return fragment;
        }
      };
    }());
    var child3 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","param-name");
          var el3 = dom.createTextNode("Errors:");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","param-value");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("pre");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [0, 3, 1]),0,0);
          content(env, morph0, context, "model.humanized_errors");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","param-name");
        var el3 = dom.createTextNode("Id:");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","param-value");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","param-name");
        var el3 = dom.createTextNode("Label:");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","param-value");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","param-name");
        var el3 = dom.createTextNode("Name:");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","param-value");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","param-name");
        var el3 = dom.createTextNode("Owner:");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","param-value");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","param-name");
        var el3 = dom.createTextNode("Started at:");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","param-value");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","param-name");
        var el3 = dom.createTextNode("Ended at:");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","param-value");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","param-name");
        var el3 = dom.createTextNode("State:");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","param-value");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","param-name");
        var el3 = dom.createTextNode("Result:");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","param-value");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","param-name");
        var el3 = dom.createTextNode("Params:");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","param-value");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-8");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","progress-bar-label");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n       ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(": ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","no-bold");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","pull-right");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("%\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","progress");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"role","progressbar");
        dom.setAttribute(el4,"aria-valuemin","0");
        dom.setAttribute(el4,"aria-valuemax","100");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content, block = hooks.block, get = hooks.get, inline = hooks.inline, attribute = hooks.attribute;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [23, 1]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element0, [3, 1]);
        var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 3]),0,0);
        var morph1 = dom.createMorphAt(dom.childAt(fragment, [3, 3]),0,0);
        var morph2 = dom.createMorphAt(dom.childAt(fragment, [5, 3]),0,0);
        var morph3 = dom.createMorphAt(dom.childAt(fragment, [7, 3]),0,0);
        var morph4 = dom.createMorphAt(dom.childAt(fragment, [9, 3]),0,0);
        var morph5 = dom.createMorphAt(dom.childAt(fragment, [11, 3]),0,0);
        var morph6 = dom.createMorphAt(dom.childAt(fragment, [13, 3]),0,0);
        var morph7 = dom.createMorphAt(dom.childAt(fragment, [15, 3]),0,0);
        var morph8 = dom.createMorphAt(fragment,19,19,contextualElement);
        var morph9 = dom.createMorphAt(fragment,21,21,contextualElement);
        var morph10 = dom.createMorphAt(element1,1,1);
        var morph11 = dom.createMorphAt(element1,3,3);
        var morph12 = dom.createMorphAt(dom.childAt(element1, [5]),0,0);
        var morph13 = dom.createMorphAt(element1,7,7);
        var morph14 = dom.createMorphAt(element1,9,9);
        var morph15 = dom.createMorphAt(dom.childAt(element1, [11]),1,1);
        var attrMorph0 = dom.createAttrMorph(element2, 'class');
        var attrMorph1 = dom.createAttrMorph(element2, 'aria-valuenow');
        var attrMorph2 = dom.createAttrMorph(element2, 'style');
        var morph16 = dom.createMorphAt(fragment,25,25,contextualElement);
        var morph17 = dom.createMorphAt(fragment,27,27,contextualElement);
        dom.insertBoundary(fragment, null);
        content(env, morph0, context, "model.id");
        content(env, morph1, context, "model.label");
        content(env, morph2, context, "model.humanized_name");
        content(env, morph3, context, "model.username");
        content(env, morph4, context, "model.started_at");
        content(env, morph5, context, "model.ended_at");
        content(env, morph6, context, "model.state");
        content(env, morph7, context, "model.result");
        block(env, morph8, context, "if", [false], {}, child0, null);
        block(env, morph9, context, "if", [false], {}, child1, null);
        inline(env, morph10, context, "fa-icon", ["spinner"], {"spin": get(env, context, "isSpin")});
        content(env, morph11, context, "progressBarMsg");
        content(env, morph12, context, "controller.progressBarSubMsg");
        content(env, morph13, context, "model.humanized_errors");
        content(env, morph14, context, "model.humanized_errors");
        content(env, morph15, context, "controller.percentProgress");
        attribute(env, attrMorph0, element2, "class", get(env, context, "progressBarClass"));
        attribute(env, attrMorph1, element2, "aria-valuenow", get(env, context, "controller.percentProgressInt"));
        attribute(env, attrMorph2, element2, "style", get(env, context, "controller.styleWidth"));
        block(env, morph16, context, "if", [true], {}, child2, null);
        block(env, morph17, context, "if", [true], {}, child3, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/review/progress/details/task/running-steps', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("NEED TODO running steps\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
        content(env, morph0, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/review/progress/details/task/task-errors', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("NEED TODO ERRORS\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
        content(env, morph0, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/review/progress/details/task/task-locks', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("NEED TODO LOCKS\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
        content(env, morph0, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/review/progress/details/task/task-raw', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("NEED TODO task RAW\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
        content(env, morph0, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/review/progress/overview', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","row");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","col-md-1");
          var el3 = dom.createTextNode("\n    Openstack\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","col-md-8");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","progress-bar-label");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4,"class","fa fa-spinner spin");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n       Downloading: ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4,"class","no-bold");
          var el5 = dom.createTextNode("Installing components");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4,"class","pull-right");
          var el5 = dom.createTextNode("\n        5%\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","progress");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4,"class","progress-bar");
          dom.setAttribute(el4,"role","progressbar");
          dom.setAttribute(el4,"aria-valuenow","5");
          dom.setAttribute(el4,"aria-valuemin","0");
          dom.setAttribute(el4,"aria-valuemax","100");
          dom.setAttribute(el4,"style","width: 5%;");
          var el5 = dom.createTextNode("\n      NEED TODO\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","row");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","col-md-1");
          var el3 = dom.createTextNode("\n    Cloudforms\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","col-md-8");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","progress-bar-label");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4,"class","fa fa-exclamation-circle errorForValidation");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n       Error: ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4,"class","no-bold");
          var el5 = dom.createTextNode("Installing components");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4,"class","pull-right");
          var el5 = dom.createTextNode("\n        12%\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","progress");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4,"class","progress-bar progress-bar-danger");
          dom.setAttribute(el4,"role","progressbar");
          dom.setAttribute(el4,"aria-valuenow","12");
          dom.setAttribute(el4,"aria-valuemin","0");
          dom.setAttribute(el4,"aria-valuemax","100");
          dom.setAttribute(el4,"style","width: 12%;");
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-1");
        var el3 = dom.createTextNode("\n    Satellite\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-8");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","progress-bar-label");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("i");
        dom.setAttribute(el4,"class","fa fa-check-circle-o green-circle");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n       Deployment successful\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","pull-right");
        var el5 = dom.createTextNode("\n        100%\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","progress");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","progress-bar progress-bar-success");
        dom.setAttribute(el4,"role","progressbar");
        dom.setAttribute(el4,"aria-valuenow","100");
        dom.setAttribute(el4,"aria-valuemin","0");
        dom.setAttribute(el4,"aria-valuemax","100");
        dom.setAttribute(el4,"style","width: 100%;");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-1");
        var el3 = dom.createTextNode("\n    RHEV\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-8");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","progress-bar-label");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n       ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(": ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","no-bold");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","pull-right");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("%\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","progress");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"role","progressbar");
        dom.setAttribute(el4,"aria-valuemin","0");
        dom.setAttribute(el4,"aria-valuemax","100");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, content = hooks.content, attribute = hooks.attribute, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [2, 3]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element0, [3, 1]);
        var morph0 = dom.createMorphAt(element1,1,1);
        var morph1 = dom.createMorphAt(element1,3,3);
        var morph2 = dom.createMorphAt(dom.childAt(element1, [5]),0,0);
        var morph3 = dom.createMorphAt(element1,7,7);
        var morph4 = dom.createMorphAt(element1,9,9);
        var morph5 = dom.createMorphAt(dom.childAt(element1, [11]),1,1);
        var attrMorph0 = dom.createAttrMorph(element2, 'class');
        var attrMorph1 = dom.createAttrMorph(element2, 'aria-valuenow');
        var attrMorph2 = dom.createAttrMorph(element2, 'style');
        var morph6 = dom.createMorphAt(fragment,4,4,contextualElement);
        var morph7 = dom.createMorphAt(fragment,6,6,contextualElement);
        dom.insertBoundary(fragment, null);
        inline(env, morph0, context, "fa-icon", ["spinner"], {"spin": get(env, context, "isSpin")});
        content(env, morph1, context, "progressBarMsg");
        content(env, morph2, context, "controller.progressBarSubMsg");
        content(env, morph3, context, "model.humanized_errors");
        content(env, morph4, context, "model.humanized_errors");
        content(env, morph5, context, "controller.percentProgress");
        attribute(env, attrMorph0, element2, "class", get(env, context, "progressBarClass"));
        attribute(env, attrMorph1, element2, "aria-valuenow", get(env, context, "controller.percentProgressInt"));
        attribute(env, attrMorph2, element2, "style", get(env, context, "controller.styleWidth"));
        block(env, morph6, context, "if", [false], {}, child0, null);
        block(env, morph7, context, "if", [false], {}, child1, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/rhci', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/rhev-options', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Cancel");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Next");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h4");
        var el2 = dom.createTextNode(" Engine Configuration ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-12");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("br");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3,"class","form form-horizontal");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","pull-right");
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("br");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [2, 1, 3]);
        var element1 = dom.childAt(fragment, [4]);
        var morph0 = dom.createMorphAt(element0,1,1);
        var morph1 = dom.createMorphAt(element0,3,3);
        var morph2 = dom.createMorphAt(element0,5,5);
        var morph3 = dom.createMorphAt(element0,7,7);
        var morph4 = dom.createMorphAt(element0,9,9);
        var morph5 = dom.createMorphAt(element1,3,3);
        var morph6 = dom.createMorphAt(element1,5,5);
        inline(env, morph0, context, "text-f", [], {"label": "Engine admin password", "type": "password", "value": get(env, context, "rhev_engine_admin_password"), "cssId": "rhev_engine_admin_password"});
        inline(env, morph1, context, "text-f", [], {"label": "Datacenter Name", "value": get(env, context, "rhev_database_name"), "placeholder": "Leave blank for default", "cssId": "rhev_database_name"});
        inline(env, morph2, context, "text-f", [], {"label": "Cluster Name", "value": get(env, context, "rhev_cluster_name"), "placeholder": "Leave blank for default", "cssId": "rhev_cluster_name"});
        inline(env, morph3, context, "text-f", [], {"label": "Storage name", "value": get(env, context, "rhev_storage_name"), "placeholder": "Leave blank for default", "cssId": "rhev_storage_name"});
        inline(env, morph4, context, "text-f", [], {"label": "CPU Type", "value": get(env, context, "rhev_cpu_type"), "placeholder": "Leave blank for default", "help-inline": "", "cssId": "rhev_cpu_type"});
        block(env, morph5, context, "link-to", ["deployments"], {"class": "btn btn-default"}, child0, null);
        block(env, morph6, context, "link-to", ["storage"], {"class": "btn btn-primary"}, child1, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/rhev-setup', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Self-hosted\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Hypervisor + engine\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Cancel");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child3 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Next");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-9");
        var el3 = dom.createTextNode("\n    Select the setup type.\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-8 col-md-offset-1");
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","row");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h3");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","row");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h3");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","pull-right");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [2, 1]);
        var element1 = dom.childAt(fragment, [6]);
        var morph0 = dom.createMorphAt(dom.childAt(element0, [1, 1]),1,1);
        var morph1 = dom.createMorphAt(dom.childAt(element0, [3, 1]),1,1);
        var morph2 = dom.createMorphAt(element1,1,1);
        var morph3 = dom.createMorphAt(element1,3,3);
        var morph4 = dom.createMorphAt(fragment,8,8,contextualElement);
        block(env, morph0, context, "radio-button", [], {"value": "selfhost", "groupValue": get(env, context, "rhevSetup"), "changed": "rhevSetupChanged", "id": "selfhost"}, child0, null);
        block(env, morph1, context, "radio-button", [], {"value": "rhevhost", "groupValue": get(env, context, "rhevSetup"), "changed": "rhevSetupChanged", "id": "rhevhost"}, child1, null);
        block(env, morph2, context, "link-to", ["deployments"], {"class": "btn btn-default"}, child2, null);
        block(env, morph3, context, "link-to", ["engine.discovered-host"], {"class": "btn btn-primary"}, child3, null);
        inline(env, morph4, context, "partial", ["cancel-deployment-modal"], {});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/rhev', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createTextNode("2A. Setup Type");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createTextNode("2B. ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
          content(env, morph0, context, "engineTabName");
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createTextNode("2C. Hypervisors");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "link-to", ["hypervisor"], {"tagName": "li"}, child0, null);
          return fragment;
        }
      };
    }());
    var child3 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createTextNode("2D. Configuration");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child4 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createTextNode("2E. Storage");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row tabbed_side_nav_form");
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2,"class","nav nav-pills nav-stacked col-md-3");
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","tab-content col-md-9");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, block = hooks.block, get = hooks.get, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var morph0 = dom.createMorphAt(element1,1,1);
        var morph1 = dom.createMorphAt(element1,3,3);
        var morph2 = dom.createMorphAt(element1,5,5);
        var morph3 = dom.createMorphAt(element1,7,7);
        var morph4 = dom.createMorphAt(element1,9,9);
        var morph5 = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
        block(env, morph0, context, "link-to", ["rhev-setup"], {"tagName": "li"}, child0, null);
        block(env, morph1, context, "link-to", ["engine"], {"tagName": "li"}, child1, null);
        block(env, morph2, context, "unless", [get(env, context, "isSelfHost")], {}, child2, null);
        block(env, morph3, context, "link-to", ["rhev-options"], {"tagName": "li"}, child3, null);
        block(env, morph4, context, "link-to", ["storage"], {"tagName": "li"}, child4, null);
        content(env, morph5, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/satellite', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createTextNode("1A. Deployment Name");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createTextNode("1B. Configure Organization");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createTextNode("1C. Configure Lifecycle Environment");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row tabbed_side_nav_form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2,"class","nav nav-pills nav-stacked col-md-3");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","tab-content col-md-9");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var morph0 = dom.createMorphAt(element1,1,1);
        var morph1 = dom.createMorphAt(element1,2,2);
        var morph2 = dom.createMorphAt(element1,3,3);
        var morph3 = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
        block(env, morph0, context, "link-to", [get(env, context, "satelliteTabRouteName")], {"tagName": "li", "disabled": get(env, context, "disableTabDeploymentName")}, child0, null);
        block(env, morph1, context, "link-to", [get(env, context, "organizationTabRouteName")], {"tagName": "li", "disabled": get(env, context, "disableTabConfigureOrganization")}, child1, null);
        block(env, morph2, context, "link-to", [get(env, context, "lifecycleEnvironmentTabRouteName")], {"tagName": "li", "disabled": get(env, context, "disableTabLifecycleEnvironment")}, child2, null);
        content(env, morph3, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/satellite/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            Next\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-9");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("br");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3,"class","form-horizontal");
        dom.setAttribute(el3,"role","form");
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","pull-right");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("br");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("button");
        dom.setAttribute(el5,"class","btn btn-default");
        var el6 = dom.createTextNode("Cancel");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, element = hooks.element, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0, 1, 3]);
        var element1 = dom.childAt(element0, [5]);
        var element2 = dom.childAt(element1, [3]);
        var morph0 = dom.createMorphAt(element0,1,1);
        var morph1 = dom.createMorphAt(element0,3,3);
        var morph2 = dom.createMorphAt(element1,5,5);
        var morph3 = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, null);
        inline(env, morph0, context, "text-f", [], {"label": "Name", "value": get(env, context, "name"), "inputSize": "col-md-5", "errors": get(env, context, "errors"), "cssId": get(env, context, "idSatName")});
        inline(env, morph1, context, "textarea-f", [], {"label": "Description (Optional)", "value": get(env, context, "description"), "inputSize": "col-md-5", "cssId": get(env, context, "idSatDesc")});
        element(env, element2, context, "action", ["showModal", "cancelDeploymentModal"], {});
        block(env, morph2, context, "link-to", [get(env, context, "organizationTabRouteName")], {"disabled": get(env, context, "disableNextOnDeploymentName"), "class": "btn btn-primary"}, child0, null);
        inline(env, morph3, context, "partial", ["cancel-deployment-modal"], {});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/satellite/loading', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("Loading ....\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/setpassword', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h1");
        var el2 = dom.createTextNode("Change Administrator Password");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\nIt is required that you change the admin password the first time that you log in.\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","col-sm-8 col-md-8 col-lg-8 login");
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("form");
        dom.setAttribute(el2,"accept-charset","UTF-8");
        dom.setAttribute(el2,"action","/users/login");
        dom.setAttribute(el2,"class","form-horizontal");
        dom.setAttribute(el2,"id","login-form");
        dom.setAttribute(el2,"method","post");
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"style","margin:0;padding:0;display:inline");
        var el4 = dom.createElement("input");
        dom.setAttribute(el4,"name","utf8");
        dom.setAttribute(el4,"type","hidden");
        dom.setAttribute(el4,"value","✓");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("input");
        dom.setAttribute(el4,"name","authenticity_token");
        dom.setAttribute(el4,"type","hidden");
        dom.setAttribute(el4,"value","1f770GegsrWb4ZJIC0UkSEkvBVG9MnRJ7jypTsrjeLU=");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n          ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","form-group");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        dom.setAttribute(el4,"class","col-sm-3 control-label");
        dom.setAttribute(el4,"for","login_login");
        var el5 = dom.createTextNode("Password *");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","col-sm-9");
        var el5 = dom.createTextNode("\n              ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5,"class","form-control");
        dom.setAttribute(el5,"focus_on_load","true");
        dom.setAttribute(el5,"id","login_login");
        dom.setAttribute(el5,"name","login[login]");
        dom.setAttribute(el5,"size","30");
        dom.setAttribute(el5,"type","text");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n          ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","form-group");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        dom.setAttribute(el4,"class","col-sm-3 control-label");
        dom.setAttribute(el4,"for","login_password");
        var el5 = dom.createTextNode("Confirm Password *");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","col-sm-9");
        var el5 = dom.createTextNode("\n              ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5,"class","form-control");
        dom.setAttribute(el5,"id","login_password");
        dom.setAttribute(el5,"name","login[password]");
        dom.setAttribute(el5,"type","password");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n          ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","form-group");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","col-xs-offset-8 col-xs-4 submit");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("button");
        dom.setAttribute(el5,"class","btn btn-primary");
        var el6 = dom.createTextNode("Change Password");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, element = hooks.element;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [9, 1, 6, 1, 1]);
        element(env, element0, context, "action", ["updatePassword"], {});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/side-menu', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("nav");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4,"class","btn btn-default btn-block");
        var el5 = dom.createTextNode("\n          Close Etherpad\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5,"style","float:right");
        var el6 = dom.createTextNode("X  ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("       <iframe class='notepad' ></iframe>\n ");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, element = hooks.element;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0, 1]);
        var element1 = dom.childAt(element0, [1, 1]);
        element(env, element0, context, "bind-attr", [], {"class": ":col-md-12 showSideMenu:nav-expanded"});
        element(env, element1, context, "action", ["toggleSideMenu"], {});
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/side-menu.loading', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("Loading ...");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/single-deployment', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(" - ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);
        var morph2 = dom.createMorphAt(fragment,4,4,contextualElement);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "id");
        content(env, morph1, context, "name");
        content(env, morph2, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/storage', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          NFS\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }());
      var child1 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          Local\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }());
      var child2 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          Gluster\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("            \n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("            \n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
          var morph2 = dom.createMorphAt(fragment,5,5,contextualElement);
          dom.insertBoundary(fragment, null);
          block(env, morph0, context, "radio-button", [], {"value": "NFS", "groupValue": get(env, context, "rhev_storage_type"), "id": "nfs"}, child0, null);
          block(env, morph1, context, "radio-button", [], {"value": "Local", "groupValue": get(env, context, "rhev_storage_type"), "id": "local"}, child1, null);
          block(env, morph2, context, "radio-button", [], {"value": "Gluster", "groupValue": get(env, context, "rhev_storage_type"), "id": "gluster"}, child2, null);
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Cancel");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Next");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-12");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("br");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3,"class","form form-horizontal");
        var el4 = dom.createTextNode("\n\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","pull-right");
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("br");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, block = hooks.block, get = hooks.get, inline = hooks.inline;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0, 1, 3]);
        var element1 = dom.childAt(fragment, [2]);
        var morph0 = dom.createMorphAt(element0,1,1);
        var morph1 = dom.createMorphAt(element0,3,3);
        var morph2 = dom.createMorphAt(element0,5,5);
        var morph3 = dom.createMorphAt(element1,3,3);
        var morph4 = dom.createMorphAt(element1,5,5);
        block(env, morph0, context, "base-f", [], {"label": "Storage Type"}, child0, null);
        inline(env, morph1, context, "text-f", [], {"label": "Storage Address", "value": get(env, context, "rhev_storage_address"), "placeholder": "Leave blank for default", "cssId": "rhev_storage_address"});
        inline(env, morph2, context, "text-f", [], {"label": "Share Path", "value": get(env, context, "rhev_share_path"), "placeholder": "Leave blank for default", "cssId": "rhev_share_path"});
        block(env, morph3, context, "link-to", ["deployments"], {"class": "btn btn-default"}, child1, null);
        block(env, morph4, context, "link-to", [get(env, context, "step3RouteName")], {"class": "btn btn-primary"}, child2, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/subscriptions', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("A. Enter Credentials");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          content(env, morph0, context, "stepNumberSubscriptions");
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("B. Select Subscription Management Application");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          content(env, morph0, context, "stepNumberSubscriptions");
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("C. Select Subscriptions");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          content(env, morph0, context, "stepNumberSubscriptions");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row tabbed_side_nav_form");
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2,"class","nav nav-pills nav-stacked col-md-3");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","tab-content col-md-9");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, block = hooks.block, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var morph0 = dom.createMorphAt(element1,1,1);
        var morph1 = dom.createMorphAt(element1,2,2);
        var morph2 = dom.createMorphAt(element1,3,3);
        var morph3 = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
        block(env, morph0, context, "link-to", ["subscriptions.credentials"], {"tagName": "li"}, child0, null);
        block(env, morph1, context, "link-to", ["subscriptions.select-subscriptions"], {"tagName": "li"}, child1, null);
        block(env, morph2, context, "link-to", ["subscriptions.select-subscriptions"], {"tagName": "li"}, child2, null);
        content(env, morph3, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/subscriptions/credentials', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1,"href","https://www.redhat.com/wapps/sso/lostPassword.html");
          dom.setAttribute(el1,"target","_blank");
          var el2 = dom.createTextNode("\n          Forgot your login or password?\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Next");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("Enter your Red Hat account information.\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-12");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("br");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3,"class","form form-horizontal");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"style","float:right");
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("button");
        dom.setAttribute(el2,"class","btn btn-default");
        var el3 = dom.createTextNode("Cancel");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, block = hooks.block, element = hooks.element;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [1, 1, 3]);
        var element1 = dom.childAt(fragment, [7]);
        var element2 = dom.childAt(element1, [1]);
        var morph0 = dom.createMorphAt(element0,1,1);
        var morph1 = dom.createMorphAt(element0,3,3);
        var morph2 = dom.createMorphAt(element0,5,5);
        var morph3 = dom.createMorphAt(element1,3,3);
        inline(env, morph0, context, "text-f", [], {"label": "Red Hat login", "value": get(env, context, "username")});
        inline(env, morph1, context, "text-f", [], {"label": "Password", "value": get(env, context, "password"), "type": "password"});
        block(env, morph2, context, "base-f", [], {}, child0, null);
        element(env, element2, context, "action", ["showModal", "cancelDeploymentModal"], {});
        block(env, morph3, context, "link-to", ["subscriptions.select-subscriptions"], {"class": "btn btn-primary", "disabled": get(env, context, "disableCredentialsNext")}, child1, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/subscriptions/index', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/subscriptions/loading', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("Loading ...\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/subscriptions/select-subscriptions', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  Attaching subscriptions (");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("% complete)\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content, inline = hooks.inline;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);
          var morph1 = dom.createMorphAt(fragment,3,3,contextualElement);
          content(env, morph0, context, "prog");
          inline(env, morph1, context, "bs-progress", [], {"progressBinding": "prog", "type": "success", "stripped": true, "animated": true});
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","alert alert-success");
          var el2 = dom.createTextNode("\n   Yeah! Successfully attached subscriptions! Attach more if you want.\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, inline = hooks.inline, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element1 = dom.childAt(fragment, [1]);
          var morph0 = dom.createMorphAt(dom.childAt(element1, [1]),1,1);
          var morph1 = dom.createMorphAt(dom.childAt(element1, [3]),1,1);
          var morph2 = dom.createMorphAt(dom.childAt(element1, [5]),1,1);
          var morph3 = dom.createMorphAt(dom.childAt(element1, [7]),1,1);
          var morph4 = dom.createMorphAt(dom.childAt(element1, [9]),1,1);
          var morph5 = dom.createMorphAt(dom.childAt(element1, [11]),1,1);
          var morph6 = dom.createMorphAt(dom.childAt(element1, [13]),1,1);
          var morph7 = dom.createMorphAt(dom.childAt(element1, [15]),1,1);
          inline(env, morph0, context, "input", [], {"type": "checkbox", "checked": get(env, context, "subscription.isChecked")});
          content(env, morph1, context, "subscription.name");
          content(env, morph2, context, "subscription.contract_number");
          content(env, morph3, context, "subscription.available");
          content(env, morph4, context, "subscription.subscription_type");
          content(env, morph5, context, "subscription.start_date");
          content(env, morph6, context, "subscription.end_date");
          inline(env, morph7, context, "input", [], {"type": "text", "value": get(env, context, "subscription.quantity"), "size": 4});
          return fragment;
        }
      };
    }());
    var child3 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","alert alert-info");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" of ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" subscriptions selected\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [0]);
          var morph0 = dom.createMorphAt(element0,1,1);
          var morph1 = dom.createMorphAt(element0,3,3);
          content(env, morph0, context, "totalSelectedCount");
          content(env, morph1, context, "totalCountSubscriptions");
          return fragment;
        }
      };
    }());
    var child4 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Next");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        var el2 = dom.createTextNode("\nDefault subscription selections have been made for the components of your RHCI deployment. If the selections need to be adjusted, please do so before proceeding.\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(" Only show subscriptions that match this Subscription Asset Manager Organization\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("table");
        dom.setAttribute(el1,"class","table table-bordered table-striped small");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("thead");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tr");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode(" ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode(" Subscription Name ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode(" Contract Number ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode(" Available ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode(" Type ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode(" Start Date ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode(" End Date ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createTextNode(" Quantity ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("tbody");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("button");
        dom.setAttribute(el1,"class","btn btn-success");
        var el2 = dom.createTextNode("Attach Selected");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"style","text-align:right");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("button");
        dom.setAttribute(el2,"class","btn btn-default");
        var el3 = dom.createTextNode("Cancel");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block, inline = hooks.inline, element = hooks.element;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element2 = dom.childAt(fragment, [14]);
        var element3 = dom.childAt(fragment, [18]);
        var element4 = dom.childAt(fragment, [24]);
        var element5 = dom.childAt(element4, [1]);
        var morph0 = dom.createMorphAt(fragment,2,2,contextualElement);
        var morph1 = dom.createMorphAt(fragment,4,4,contextualElement);
        var morph2 = dom.createMorphAt(fragment,8,8,contextualElement);
        var morph3 = dom.createMorphAt(dom.childAt(element2, [1, 1, 1]),1,1);
        var morph4 = dom.createMorphAt(dom.childAt(element2, [3]),1,1);
        var morph5 = dom.createMorphAt(fragment,16,16,contextualElement);
        var morph6 = dom.createMorphAt(element4,3,3);
        block(env, morph0, context, "if", [get(env, context, "attachingInProgress")], {}, child0, null);
        block(env, morph1, context, "if", [get(env, context, "showAttachedSuccessMessage")], {}, child1, null);
        inline(env, morph2, context, "input", [], {"type": "checkbox", "name": "isOnlyShowSubscriptions", "checked": get(env, context, "isOnlyShowSubscriptions")});
        inline(env, morph3, context, "input", [], {"type": "checkbox", "name": "allChecked", "checked": get(env, context, "allChecked")});
        block(env, morph4, context, "each", [get(env, context, "controller.model")], {"itemController": "subscription", "keyword": "subscription"}, child2, null);
        block(env, morph5, context, "unless", [get(env, context, "attachingInProgress")], {}, child3, null);
        element(env, element3, context, "bind-attr", [], {"disabled": get(env, context, "disableAttachButton")});
        element(env, element3, context, "action", ["attachSubscriptions"], {});
        element(env, element5, context, "action", ["showModal", "cancel-modal"], {});
        block(env, morph6, context, "link-to", ["review.installation"], {"class": "btn btn-primary", "disabled": get(env, context, "disableSubscriptionsNext")}, child4, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/topbar', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("img");
          dom.setAttribute(el1,"alt","Foreman");
          dom.setAttribute(el1,"src","assets/foreman.png");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1,"href","/");
          var el2 = dom.createTextNode("Foreman");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1,"href","/");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("img");
          dom.setAttribute(el2,"alt","Header-logotype");
          dom.setAttribute(el2,"src","assets/Header-logotype.png");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1,"class","menu_tab_/users_edit");
          var el2 = dom.createTextNode("\n              ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          var el3 = dom.createTextNode("My account");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1,"class","divider");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1,"class","menu_tab_/users_logout");
          var el2 = dom.createTextNode("\n              ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          var el3 = dom.createTextNode("Log out");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, element = hooks.element;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var element0 = dom.childAt(fragment, [1, 1]);
          var element1 = dom.childAt(fragment, [5, 1]);
          element(env, element0, context, "action", ["notImplemented"], {});
          element(env, element1, context, "action", ["invalidateSession"], {});
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","navbar-header");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","navbar-brand");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("ul");
        dom.setAttribute(el4,"class","nav navbar-nav navbar-right navbar-header-menu navbar-collapse collapse");
        var el5 = dom.createTextNode("\n\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("li");
        dom.setAttribute(el5,"class","dropdown menu_tab_dropdown");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("a");
        dom.setAttribute(el6,"href","#");
        dom.setAttribute(el6,"class","dropdown-toggle");
        dom.setAttribute(el6,"data-toggle","dropdown");
        var el7 = dom.createTextNode("\n             \n             \n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("img");
        dom.setAttribute(el7,"alt","Change your avatar at gravatar.com");
        dom.setAttribute(el7,"class","avatar small");
        dom.setAttribute(el7,"src","assets/user.jpg");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode(" ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7,"class","caret");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("ul");
        dom.setAttribute(el6,"class","dropdown-menu pull-right");
        var el7 = dom.createTextNode("\n\n");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, element = hooks.element, get = hooks.get, block = hooks.block, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element2 = dom.childAt(fragment, [0]);
        var element3 = dom.childAt(element2, [1, 1]);
        var element4 = dom.childAt(element3, [3, 1]);
        var morph0 = dom.createMorphAt(dom.childAt(element3, [1]),1,1);
        var morph1 = dom.createMorphAt(dom.childAt(element4, [1]),2,2);
        var morph2 = dom.createMorphAt(dom.childAt(element4, [3]),1,1);
        element(env, element2, context, "bind-attr", [], {"class": ":navbar :navbar-default :navbar-outer isUpstream:navbar-outer-upstream"});
        element(env, element3, context, "bind-attr", [], {"class": "isUpstream:container:container"});
        block(env, morph0, context, "if", [get(env, context, "isUpstream")], {}, child0, child1);
        content(env, morph1, context, "loginUsername");
        block(env, morph2, context, "if", [get(env, context, "session.isAuthenticated")], {}, child2, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/templates/where-install', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            Install CloudForms on Red Hat Enterprise Virtualization\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "radio-button", [], {"value": "RHEV", "groupValue": get(env, context, "cfme_install_loc"), "changed": "cfmeLocationChanged", "id": "install_on_rhev"}, child0, null);
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          isHTMLBars: true,
          revision: "Ember@1.11.1",
          blockParams: 0,
          cachedFragment: null,
          hasRendered: false,
          build: function build(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            Install CloudForms on OpenStack");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("br");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n            Able to split virtualization workloads across multiple controller nodes\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          render: function render(context, env, contextualElement) {
            var dom = env.dom;
            dom.detectNamespace(contextualElement);
            var fragment;
            if (env.useFragmentCache && dom.canClone) {
              if (this.cachedFragment === null) {
                fragment = this.build(dom);
                if (this.hasRendered) {
                  this.cachedFragment = fragment;
                } else {
                  this.hasRendered = true;
                }
              }
              if (this.cachedFragment) {
                fragment = dom.cloneNode(this.cachedFragment, true);
              }
            } else {
              fragment = this.build(dom);
            }
            return fragment;
          }
        };
      }());
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, get = hooks.get, block = hooks.block;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, null);
          dom.insertBoundary(fragment, 0);
          block(env, morph0, context, "radio-button", [], {"value": "OpenStack", "groupValue": get(env, context, "cfme_install_loc"), "changed": "cfmeLocationChanged", "id": "install_on_openstack"}, child0, null);
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Cancel");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    var child3 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.11.1",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Next");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","col-md-8 col-md-offset-1");
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","row");
        var el4 = dom.createTextNode("\n      Select a product to create and manage virtual machines.\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h3");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","row");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h3");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","pull-right");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("br");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [0, 1]);
        var element1 = dom.childAt(fragment, [2]);
        var morph0 = dom.createMorphAt(dom.childAt(element0, [1, 1]),1,1);
        var morph1 = dom.createMorphAt(dom.childAt(element0, [3, 1]),1,1);
        var morph2 = dom.createMorphAt(element1,3,3);
        var morph3 = dom.createMorphAt(element1,5,5);
        block(env, morph0, context, "unless", [get(env, context, "disableRHEV")], {}, child0, null);
        block(env, morph1, context, "unless", [get(env, context, "disableOpenStack")], {}, child1, null);
        block(env, morph2, context, "link-to", ["deployments"], {"class": "btn btn-default"}, child2, null);
        block(env, morph3, context, "link-to", ["subscriptions.credentials"], {"class": "btn btn-primary"}, child3, null);
        return fragment;
      }
    };
  }()));

});
define('fusor-ember-cli/tests/adapters/application.jshint', function () {

  'use strict';

  module('JSHint - adapters');
  test('adapters/application.js should pass jshint', function() { 
    ok(false, 'adapters/application.js should pass jshint.\nadapters/application.js: line 3, col 13, \'$\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/adapters/deployment.jshint', function () {

  'use strict';

  module('JSHint - adapters');
  test('adapters/deployment.js should pass jshint', function() { 
    ok(false, 'adapters/deployment.js should pass jshint.\nadapters/deployment.js: line 3, col 13, \'$\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/adapters/foreman-task.jshint', function () {

  'use strict';

  module('JSHint - adapters');
  test('adapters/foreman-task.js should pass jshint', function() { 
    ok(false, 'adapters/foreman-task.js should pass jshint.\nadapters/foreman-task.js: line 1, col 13, \'$\' is not defined.\nadapters/foreman-task.js: line 2, col 16, \'DS\' is not defined.\n\n2 errors'); 
  });

});
define('fusor-ember-cli/tests/app.jshint', function () {

  'use strict';

  module('JSHint - .');
  test('app.js should pass jshint', function() { 
    ok(true, 'app.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/accordion-item.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/accordion-item.js should pass jshint', function() { 
    ok(true, 'components/accordion-item.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/base-f.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/base-f.js should pass jshint', function() { 
    ok(true, 'components/base-f.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/button-f.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/button-f.js should pass jshint', function() { 
    ok(true, 'components/button-f.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/env-path-list-item.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/env-path-list-item.js should pass jshint', function() { 
    ok(false, 'components/env-path-list-item.js should pass jshint.\ncomponents/env-path-list-item.js: line 23, col 19, \'event\' is defined but never used.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/components/modal-confirm.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/modal-confirm.js should pass jshint', function() { 
    ok(true, 'components/modal-confirm.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/radio-button-f.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/radio-button-f.js should pass jshint', function() { 
    ok(true, 'components/radio-button-f.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/rchi-item.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/rchi-item.js should pass jshint', function() { 
    ok(true, 'components/rchi-item.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/rhci-hover-text.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/rhci-hover-text.js should pass jshint', function() { 
    ok(true, 'components/rhci-hover-text.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/rhci-start.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/rhci-start.js should pass jshint', function() { 
    ok(true, 'components/rhci-start.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/rhci-wizard.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/rhci-wizard.js should pass jshint', function() { 
    ok(true, 'components/rhci-wizard.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/select-f.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/select-f.js should pass jshint', function() { 
    ok(true, 'components/select-f.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/select-simple-f.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/select-simple-f.js should pass jshint', function() { 
    ok(true, 'components/select-simple-f.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/step-number.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/step-number.js should pass jshint', function() { 
    ok(true, 'components/step-number.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/subnet-drop-area.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/subnet-drop-area.js should pass jshint', function() { 
    ok(true, 'components/subnet-drop-area.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/text-f.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/text-f.js should pass jshint', function() { 
    ok(true, 'components/text-f.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/textarea-f.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/textarea-f.js should pass jshint', function() { 
    ok(true, 'components/textarea-f.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/tr-engine.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/tr-engine.js should pass jshint', function() { 
    ok(true, 'components/tr-engine.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/tr-hypervisor.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/tr-hypervisor.js should pass jshint', function() { 
    ok(true, 'components/tr-hypervisor.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/tr-organization.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/tr-organization.js should pass jshint', function() { 
    ok(false, 'components/tr-organization.js should pass jshint.\ncomponents/tr-organization.js: line 8, col 48, Expected \'===\' and instead saw \'==\'.\ncomponents/tr-organization.js: line 12, col 35, \'event\' is defined but never used.\n\n2 errors'); 
  });

});
define('fusor-ember-cli/tests/components/tr-task.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/tr-task.js should pass jshint', function() { 
    ok(true, 'components/tr-task.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/traffic-type.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/traffic-type.js should pass jshint', function() { 
    ok(true, 'components/traffic-type.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/upstream-downstream.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/upstream-downstream.js should pass jshint', function() { 
    ok(true, 'components/upstream-downstream.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/vertical-tab.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/vertical-tab.js should pass jshint', function() { 
    ok(true, 'components/vertical-tab.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/components/wizard-item.jshint', function () {

  'use strict';

  module('JSHint - components');
  test('components/wizard-item.js should pass jshint', function() { 
    ok(true, 'components/wizard-item.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/application.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/application.js should pass jshint', function() { 
    ok(false, 'controllers/application.js should pass jshint.\ncontrollers/application.js: line 27, col 26, \'data\' is defined but never used.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/controllers/cancel-modal.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/cancel-modal.js should pass jshint', function() { 
    ok(true, 'controllers/cancel-modal.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/cloudforms-storage-domain.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/cloudforms-storage-domain.js should pass jshint', function() { 
    ok(true, 'controllers/cloudforms-storage-domain.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/cloudforms-vm.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/cloudforms-vm.js should pass jshint', function() { 
    ok(true, 'controllers/cloudforms-vm.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/cloudforms.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/cloudforms.js should pass jshint', function() { 
    ok(true, 'controllers/cloudforms.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/configure-environment.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/configure-environment.js should pass jshint', function() { 
    ok(false, 'controllers/configure-environment.js should pass jshint.\ncontrollers/configure-environment.js: line 25, col 66, Missing semicolon.\ncontrollers/configure-environment.js: line 49, col 21, \'library\' is already defined.\ncontrollers/configure-environment.js: line 43, col 21, \'response\' is defined but never used.\ncontrollers/configure-environment.js: line 59, col 23, \'response\' is defined but never used.\n\n4 errors'); 
  });

});
define('fusor-ember-cli/tests/controllers/configure-organization.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/configure-organization.js should pass jshint', function() { 
    ok(true, 'controllers/configure-organization.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/deployment-new.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/deployment-new.js should pass jshint', function() { 
    ok(true, 'controllers/deployment-new.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/deployment-new/satellite.jshint', function () {

  'use strict';

  module('JSHint - controllers/deployment-new');
  test('controllers/deployment-new/satellite.js should pass jshint', function() { 
    ok(true, 'controllers/deployment-new/satellite.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/deployment-new/satellite/configure-environment.jshint', function () {

  'use strict';

  module('JSHint - controllers/deployment-new/satellite');
  test('controllers/deployment-new/satellite/configure-environment.js should pass jshint', function() { 
    ok(false, 'controllers/deployment-new/satellite/configure-environment.js should pass jshint.\ncontrollers/deployment-new/satellite/configure-environment.js: line 25, col 66, Missing semicolon.\ncontrollers/deployment-new/satellite/configure-environment.js: line 49, col 21, \'library\' is already defined.\ncontrollers/deployment-new/satellite/configure-environment.js: line 43, col 21, \'response\' is defined but never used.\ncontrollers/deployment-new/satellite/configure-environment.js: line 59, col 23, \'response\' is defined but never used.\n\n4 errors'); 
  });

});
define('fusor-ember-cli/tests/controllers/deployment-new/satellite/configure-organization.jshint', function () {

  'use strict';

  module('JSHint - controllers/deployment-new/satellite');
  test('controllers/deployment-new/satellite/configure-organization.js should pass jshint', function() { 
    ok(true, 'controllers/deployment-new/satellite/configure-organization.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/deployment-new/satellite/index.jshint', function () {

  'use strict';

  module('JSHint - controllers/deployment-new/satellite');
  test('controllers/deployment-new/satellite/index.js should pass jshint', function() { 
    ok(true, 'controllers/deployment-new/satellite/index.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/deployment-new/start.jshint', function () {

  'use strict';

  module('JSHint - controllers/deployment-new');
  test('controllers/deployment-new/start.js should pass jshint', function() { 
    ok(true, 'controllers/deployment-new/start.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/deployment.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/deployment.js should pass jshint', function() { 
    ok(true, 'controllers/deployment.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/deployment/start.jshint', function () {

  'use strict';

  module('JSHint - controllers/deployment');
  test('controllers/deployment/start.js should pass jshint', function() { 
    ok(true, 'controllers/deployment/start.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/deployments.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/deployments.js should pass jshint', function() { 
    ok(false, 'controllers/deployments.js should pass jshint.\ncontrollers/deployments.js: line 19, col 44, Missing semicolon.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/controllers/discovered-host.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/discovered-host.js should pass jshint', function() { 
    ok(false, 'controllers/discovered-host.js should pass jshint.\ncontrollers/discovered-host.js: line 34, col 78, Missing semicolon.\ncontrollers/discovered-host.js: line 35, col 50, Missing semicolon.\ncontrollers/discovered-host.js: line 37, col 19, Missing semicolon.\ncontrollers/discovered-host.js: line 47, col 11, \'engine_hostname\' is defined but never used.\n\n4 errors'); 
  });

});
define('fusor-ember-cli/tests/controllers/engine.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/engine.js should pass jshint', function() { 
    ok(true, 'controllers/engine.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/engine/discovered-host.jshint', function () {

  'use strict';

  module('JSHint - controllers/engine');
  test('controllers/engine/discovered-host.js should pass jshint', function() { 
    ok(false, 'controllers/engine/discovered-host.js should pass jshint.\ncontrollers/engine/discovered-host.js: line 16, col 85, \'array\' is defined but never used.\ncontrollers/engine/discovered-host.js: line 16, col 78, \'index\' is defined but never used.\n\n2 errors'); 
  });

});
define('fusor-ember-cli/tests/controllers/host.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/host.js should pass jshint', function() { 
    ok(true, 'controllers/host.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/hostgroup.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/hostgroup.js should pass jshint', function() { 
    ok(true, 'controllers/hostgroup.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/hypervisor.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/hypervisor.js should pass jshint', function() { 
    ok(true, 'controllers/hypervisor.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/hypervisor/discovered-host.jshint', function () {

  'use strict';

  module('JSHint - controllers/hypervisor');
  test('controllers/hypervisor/discovered-host.js should pass jshint', function() { 
    ok(false, 'controllers/hypervisor/discovered-host.js should pass jshint.\ncontrollers/hypervisor/discovered-host.js: line 12, col 30, Expected \'!==\' and instead saw \'!=\'.\ncontrollers/hypervisor/discovered-host.js: line 11, col 85, \'array\' is defined but never used.\ncontrollers/hypervisor/discovered-host.js: line 11, col 78, \'index\' is defined but never used.\ncontrollers/hypervisor/discovered-host.js: line 30, col 31, \'value\' is defined but never used.\ncontrollers/hypervisor/discovered-host.js: line 30, col 26, \'key\' is defined but never used.\ncontrollers/hypervisor/discovered-host.js: line 38, col 29, \'value\' is defined but never used.\ncontrollers/hypervisor/discovered-host.js: line 38, col 24, \'key\' is defined but never used.\ncontrollers/hypervisor/discovered-host.js: line 52, col 22, \'row\' is defined but never used.\ncontrollers/hypervisor/discovered-host.js: line 68, col 24, \'key\' is defined but never used.\n\n9 errors'); 
  });

});
define('fusor-ember-cli/tests/controllers/lifecycle-environment.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/lifecycle-environment.js should pass jshint', function() { 
    ok(true, 'controllers/lifecycle-environment.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/lifecycle-environments.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/lifecycle-environments.js should pass jshint', function() { 
    ok(true, 'controllers/lifecycle-environments.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/login.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/login.js should pass jshint', function() { 
    ok(true, 'controllers/login.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/logout-model.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/logout-model.js should pass jshint', function() { 
    ok(true, 'controllers/logout-model.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/networking.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/networking.js should pass jshint', function() { 
    ok(true, 'controllers/networking.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/new-environment.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/new-environment.js should pass jshint', function() { 
    ok(true, 'controllers/new-environment.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/new-organization.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/new-organization.js should pass jshint', function() { 
    ok(true, 'controllers/new-organization.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/openstack.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/openstack.js should pass jshint', function() { 
    ok(true, 'controllers/openstack.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/organization.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/organization.js should pass jshint', function() { 
    ok(true, 'controllers/organization.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/organizations.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/organizations.js should pass jshint', function() { 
    ok(true, 'controllers/organizations.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/products.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/products.js should pass jshint', function() { 
    ok(true, 'controllers/products.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/review.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/review.js should pass jshint', function() { 
    ok(false, 'controllers/review.js should pass jshint.\ncontrollers/review.js: line 11, col 59, Missing semicolon.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/controllers/review/installation.jshint', function () {

  'use strict';

  module('JSHint - controllers/review');
  test('controllers/review/installation.js should pass jshint', function() { 
    ok(true, 'controllers/review/installation.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/review/progress.jshint', function () {

  'use strict';

  module('JSHint - controllers/review');
  test('controllers/review/progress.js should pass jshint', function() { 
    ok(true, 'controllers/review/progress.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/review/progress/details/task.jshint', function () {

  'use strict';

  module('JSHint - controllers/review/progress/details');
  test('controllers/review/progress/details/task.js should pass jshint', function() { 
    ok(true, 'controllers/review/progress/details/task.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/review/progress/details/task/index.jshint', function () {

  'use strict';

  module('JSHint - controllers/review/progress/details/task');
  test('controllers/review/progress/details/task/index.js should pass jshint', function() { 
    ok(true, 'controllers/review/progress/details/task/index.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/review/progress/overview.jshint', function () {

  'use strict';

  module('JSHint - controllers/review/progress');
  test('controllers/review/progress/overview.js should pass jshint', function() { 
    ok(true, 'controllers/review/progress/overview.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/rhci.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/rhci.js should pass jshint', function() { 
    ok(true, 'controllers/rhci.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/rhev-options.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/rhev-options.js should pass jshint', function() { 
    ok(true, 'controllers/rhev-options.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/rhev-setup.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/rhev-setup.js should pass jshint', function() { 
    ok(false, 'controllers/rhev-setup.js should pass jshint.\ncontrollers/rhev-setup.js: line 10, col 71, Missing semicolon.\ncontrollers/rhev-setup.js: line 14, col 79, Missing semicolon.\ncontrollers/rhev-setup.js: line 18, col 50, Missing semicolon.\ncontrollers/rhev-setup.js: line 22, col 32, \'value\' is defined but never used.\n\n4 errors'); 
  });

});
define('fusor-ember-cli/tests/controllers/rhev.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/rhev.js should pass jshint', function() { 
    ok(true, 'controllers/rhev.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/satellite.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/satellite.js should pass jshint', function() { 
    ok(true, 'controllers/satellite.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/satellite/index.jshint', function () {

  'use strict';

  module('JSHint - controllers/satellite');
  test('controllers/satellite/index.js should pass jshint', function() { 
    ok(true, 'controllers/satellite/index.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/satellite/subscription.jshint', function () {

  'use strict';

  module('JSHint - controllers/satellite');
  test('controllers/satellite/subscription.js should pass jshint', function() { 
    ok(true, 'controllers/satellite/subscription.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/side-menu.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/side-menu.js should pass jshint', function() { 
    ok(true, 'controllers/side-menu.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/storage.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/storage.js should pass jshint', function() { 
    ok(true, 'controllers/storage.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/subscription.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/subscription.js should pass jshint', function() { 
    ok(true, 'controllers/subscription.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/subscriptions.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/subscriptions.js should pass jshint', function() { 
    ok(true, 'controllers/subscriptions.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/subscriptions/credentials.jshint', function () {

  'use strict';

  module('JSHint - controllers/subscriptions');
  test('controllers/subscriptions/credentials.js should pass jshint', function() { 
    ok(true, 'controllers/subscriptions/credentials.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/subscriptions/select-subscriptions.jshint', function () {

  'use strict';

  module('JSHint - controllers/subscriptions');
  test('controllers/subscriptions/select-subscriptions.js should pass jshint', function() { 
    ok(true, 'controllers/subscriptions/select-subscriptions.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/controllers/where-install.jshint', function () {

  'use strict';

  module('JSHint - controllers');
  test('controllers/where-install.js should pass jshint', function() { 
    ok(true, 'controllers/where-install.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/helpers/raw-text.jshint', function () {

  'use strict';

  module('JSHint - helpers');
  test('helpers/raw-text.js should pass jshint', function() { 
    ok(false, 'helpers/raw-text.js should pass jshint.\nhelpers/raw-text.js: line 4, col 14, \'Handlebars\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/helpers/resolver', ['exports', 'ember/resolver', 'fusor-ember-cli/config/environment'], function (exports, Resolver, config) {

  'use strict';

  var resolver = Resolver['default'].create();

  resolver.namespace = {
    modulePrefix: config['default'].modulePrefix,
    podModulePrefix: config['default'].podModulePrefix
  };

  exports['default'] = resolver;

});
define('fusor-ember-cli/tests/helpers/resolver.jshint', function () {

  'use strict';

  module('JSHint - helpers');
  test('helpers/resolver.js should pass jshint', function() { 
    ok(true, 'helpers/resolver.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/helpers/start-app', ['exports', 'ember', 'fusor-ember-cli/app', 'fusor-ember-cli/router', 'fusor-ember-cli/config/environment'], function (exports, Ember, Application, Router, config) {

  'use strict';



  exports['default'] = startApp;
  function startApp(attrs) {
    var application;

    var attributes = Ember['default'].merge({}, config['default'].APP);
    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;

    Ember['default'].run(function () {
      application = Application['default'].create(attributes);
      application.setupForTesting();
      application.injectTestHelpers();
    });

    return application;
  }

});
define('fusor-ember-cli/tests/helpers/start-app.jshint', function () {

  'use strict';

  module('JSHint - helpers');
  test('helpers/start-app.js should pass jshint', function() { 
    ok(true, 'helpers/start-app.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/mixins/configure-environment-mixin.jshint', function () {

  'use strict';

  module('JSHint - mixins');
  test('mixins/configure-environment-mixin.js should pass jshint', function() { 
    ok(true, 'mixins/configure-environment-mixin.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/mixins/configure-organization-mixin.jshint', function () {

  'use strict';

  module('JSHint - mixins');
  test('mixins/configure-organization-mixin.js should pass jshint', function() { 
    ok(true, 'mixins/configure-organization-mixin.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/mixins/deployment-controller-mixin.jshint', function () {

  'use strict';

  module('JSHint - mixins');
  test('mixins/deployment-controller-mixin.js should pass jshint', function() { 
    ok(false, 'mixins/deployment-controller-mixin.js should pass jshint.\nmixins/deployment-controller-mixin.js: line 145, col 24, Missing semicolon.\nmixins/deployment-controller-mixin.js: line 153, col 24, Missing semicolon.\nmixins/deployment-controller-mixin.js: line 159, col 24, Missing semicolon.\n\n3 errors'); 
  });

});
define('fusor-ember-cli/tests/mixins/deployment-new-controller-mixin.jshint', function () {

  'use strict';

  module('JSHint - mixins');
  test('mixins/deployment-new-controller-mixin.js should pass jshint', function() { 
    ok(true, 'mixins/deployment-new-controller-mixin.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/mixins/deployment-new-satellite-route-mixin.jshint', function () {

  'use strict';

  module('JSHint - mixins');
  test('mixins/deployment-new-satellite-route-mixin.js should pass jshint', function() { 
    ok(true, 'mixins/deployment-new-satellite-route-mixin.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/mixins/deployment-route-mixin.jshint', function () {

  'use strict';

  module('JSHint - mixins');
  test('mixins/deployment-route-mixin.js should pass jshint', function() { 
    ok(true, 'mixins/deployment-route-mixin.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/mixins/disable-tab-mixin.jshint', function () {

  'use strict';

  module('JSHint - mixins');
  test('mixins/disable-tab-mixin.js should pass jshint', function() { 
    ok(true, 'mixins/disable-tab-mixin.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/mixins/meta.jshint', function () {

  'use strict';

  module('JSHint - mixins');
  test('mixins/meta.js should pass jshint', function() { 
    ok(true, 'mixins/meta.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/mixins/progress-bar-mixin.jshint', function () {

  'use strict';

  module('JSHint - mixins');
  test('mixins/progress-bar-mixin.js should pass jshint', function() { 
    ok(false, 'mixins/progress-bar-mixin.js should pass jshint.\nmixins/progress-bar-mixin.js: line 19, col 31, Missing semicolon.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/mixins/satellite-controller-mixin.jshint', function () {

  'use strict';

  module('JSHint - mixins');
  test('mixins/satellite-controller-mixin.js should pass jshint', function() { 
    ok(true, 'mixins/satellite-controller-mixin.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/mixins/save-hostname-mixin.jshint', function () {

  'use strict';

  module('JSHint - mixins');
  test('mixins/save-hostname-mixin.js should pass jshint', function() { 
    ok(false, 'mixins/save-hostname-mixin.js should pass jshint.\nmixins/save-hostname-mixin.js: line 10, col 19, \'$\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/mixins/start-controller-mixin.jshint', function () {

  'use strict';

  module('JSHint - mixins');
  test('mixins/start-controller-mixin.js should pass jshint', function() { 
    ok(true, 'mixins/start-controller-mixin.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/models/deployment.jshint', function () {

  'use strict';

  module('JSHint - models');
  test('models/deployment.js should pass jshint', function() { 
    ok(true, 'models/deployment.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/models/discovered-host.jshint', function () {

  'use strict';

  module('JSHint - models');
  test('models/discovered-host.js should pass jshint', function() { 
    ok(true, 'models/discovered-host.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/models/environment.jshint', function () {

  'use strict';

  module('JSHint - models');
  test('models/environment.js should pass jshint', function() { 
    ok(true, 'models/environment.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/models/foreman-task.jshint', function () {

  'use strict';

  module('JSHint - models');
  test('models/foreman-task.js should pass jshint', function() { 
    ok(true, 'models/foreman-task.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/models/host.jshint', function () {

  'use strict';

  module('JSHint - models');
  test('models/host.js should pass jshint', function() { 
    ok(true, 'models/host.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/models/hostgroup.jshint', function () {

  'use strict';

  module('JSHint - models');
  test('models/hostgroup.js should pass jshint', function() { 
    ok(true, 'models/hostgroup.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/models/lifecycle-environment.jshint', function () {

  'use strict';

  module('JSHint - models');
  test('models/lifecycle-environment.js should pass jshint', function() { 
    ok(true, 'models/lifecycle-environment.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/models/location.jshint', function () {

  'use strict';

  module('JSHint - models');
  test('models/location.js should pass jshint', function() { 
    ok(true, 'models/location.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/models/organization.jshint', function () {

  'use strict';

  module('JSHint - models');
  test('models/organization.js should pass jshint', function() { 
    ok(true, 'models/organization.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/models/product.jshint', function () {

  'use strict';

  module('JSHint - models');
  test('models/product.js should pass jshint', function() { 
    ok(true, 'models/product.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/models/subnet.jshint', function () {

  'use strict';

  module('JSHint - models');
  test('models/subnet.js should pass jshint', function() { 
    ok(true, 'models/subnet.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/models/subscription.jshint', function () {

  'use strict';

  module('JSHint - models');
  test('models/subscription.js should pass jshint', function() { 
    ok(true, 'models/subscription.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/models/traffic-type.jshint', function () {

  'use strict';

  module('JSHint - models');
  test('models/traffic-type.js should pass jshint', function() { 
    ok(true, 'models/traffic-type.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/models/user.jshint', function () {

  'use strict';

  module('JSHint - models');
  test('models/user.js should pass jshint', function() { 
    ok(true, 'models/user.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/router.jshint', function () {

  'use strict';

  module('JSHint - .');
  test('router.js should pass jshint', function() { 
    ok(true, 'router.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/application.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/application.js should pass jshint', function() { 
    ok(true, 'routes/application.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/assign-nodes.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/assign-nodes.js should pass jshint', function() { 
    ok(true, 'routes/assign-nodes.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/cloudforms-storage-domain.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/cloudforms-storage-domain.js should pass jshint', function() { 
    ok(true, 'routes/cloudforms-storage-domain.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/cloudforms-vm.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/cloudforms-vm.js should pass jshint', function() { 
    ok(true, 'routes/cloudforms-vm.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/cloudforms/index.jshint', function () {

  'use strict';

  module('JSHint - routes/cloudforms');
  test('routes/cloudforms/index.js should pass jshint', function() { 
    ok(true, 'routes/cloudforms/index.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/configure-environment.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/configure-environment.js should pass jshint', function() { 
    ok(true, 'routes/configure-environment.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/configure-organization.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/configure-organization.js should pass jshint', function() { 
    ok(true, 'routes/configure-organization.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/deployment-new.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/deployment-new.js should pass jshint', function() { 
    ok(true, 'routes/deployment-new.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/deployment-new/index.jshint', function () {

  'use strict';

  module('JSHint - routes/deployment-new');
  test('routes/deployment-new/index.js should pass jshint', function() { 
    ok(true, 'routes/deployment-new/index.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/deployment-new/satellite.jshint', function () {

  'use strict';

  module('JSHint - routes/deployment-new');
  test('routes/deployment-new/satellite.js should pass jshint', function() { 
    ok(true, 'routes/deployment-new/satellite.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/deployment-new/satellite/configure-environment.jshint', function () {

  'use strict';

  module('JSHint - routes/deployment-new/satellite');
  test('routes/deployment-new/satellite/configure-environment.js should pass jshint', function() { 
    ok(true, 'routes/deployment-new/satellite/configure-environment.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/deployment-new/satellite/configure-organization.jshint', function () {

  'use strict';

  module('JSHint - routes/deployment-new/satellite');
  test('routes/deployment-new/satellite/configure-organization.js should pass jshint', function() { 
    ok(true, 'routes/deployment-new/satellite/configure-organization.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/deployment-new/satellite/index.jshint', function () {

  'use strict';

  module('JSHint - routes/deployment-new/satellite');
  test('routes/deployment-new/satellite/index.js should pass jshint', function() { 
    ok(true, 'routes/deployment-new/satellite/index.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/deployment-new/start.jshint', function () {

  'use strict';

  module('JSHint - routes/deployment-new');
  test('routes/deployment-new/start.js should pass jshint', function() { 
    ok(true, 'routes/deployment-new/start.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/deployment.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/deployment.js should pass jshint', function() { 
    ok(false, 'routes/deployment.js should pass jshint.\nroutes/deployment.js: line 50, col 17, Missing semicolon.\nroutes/deployment.js: line 21, col 19, \'$\' is not defined.\nroutes/deployment.js: line 18, col 33, \'options\' is defined but never used.\n\n3 errors'); 
  });

});
define('fusor-ember-cli/tests/routes/deployment/index.jshint', function () {

  'use strict';

  module('JSHint - routes/deployment');
  test('routes/deployment/index.js should pass jshint', function() { 
    ok(true, 'routes/deployment/index.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/deployment/review.jshint', function () {

  'use strict';

  module('JSHint - routes/deployment');
  test('routes/deployment/review.js should pass jshint', function() { 
    ok(true, 'routes/deployment/review.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/deployment/start.jshint', function () {

  'use strict';

  module('JSHint - routes/deployment');
  test('routes/deployment/start.js should pass jshint', function() { 
    ok(true, 'routes/deployment/start.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/deployments.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/deployments.js should pass jshint', function() { 
    ok(true, 'routes/deployments.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/discovered-host.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/discovered-host.js should pass jshint', function() { 
    ok(true, 'routes/discovered-host.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/discovered-hosts.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/discovered-hosts.js should pass jshint', function() { 
    ok(true, 'routes/discovered-hosts.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/engine.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/engine.js should pass jshint', function() { 
    ok(true, 'routes/engine.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/engine/discovered-host.jshint', function () {

  'use strict';

  module('JSHint - routes/engine');
  test('routes/engine/discovered-host.js should pass jshint', function() { 
    ok(true, 'routes/engine/discovered-host.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/engine/existing-host.jshint', function () {

  'use strict';

  module('JSHint - routes/engine');
  test('routes/engine/existing-host.js should pass jshint', function() { 
    ok(true, 'routes/engine/existing-host.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/engine/hypervisor.jshint', function () {

  'use strict';

  module('JSHint - routes/engine');
  test('routes/engine/hypervisor.js should pass jshint', function() { 
    ok(true, 'routes/engine/hypervisor.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/engine/new-host.jshint', function () {

  'use strict';

  module('JSHint - routes/engine');
  test('routes/engine/new-host.js should pass jshint', function() { 
    ok(true, 'routes/engine/new-host.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/hostgroup.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/hostgroup.js should pass jshint', function() { 
    ok(true, 'routes/hostgroup.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/hostgroup/edit.jshint', function () {

  'use strict';

  module('JSHint - routes/hostgroup');
  test('routes/hostgroup/edit.js should pass jshint', function() { 
    ok(true, 'routes/hostgroup/edit.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/hostgroups.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/hostgroups.js should pass jshint', function() { 
    ok(true, 'routes/hostgroups.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/hypervisor.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/hypervisor.js should pass jshint', function() { 
    ok(true, 'routes/hypervisor.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/hypervisor/discovered-host.jshint', function () {

  'use strict';

  module('JSHint - routes/hypervisor');
  test('routes/hypervisor/discovered-host.js should pass jshint', function() { 
    ok(false, 'routes/hypervisor/discovered-host.js should pass jshint.\nroutes/hypervisor/discovered-host.js: line 14, col 44, Missing semicolon.\nroutes/hypervisor/discovered-host.js: line 23, col 19, \'$\' is not defined.\nroutes/hypervisor/discovered-host.js: line 14, col 9, \'model\' is defined but never used.\n\n3 errors'); 
  });

});
define('fusor-ember-cli/tests/routes/hypervisor/existing-host.jshint', function () {

  'use strict';

  module('JSHint - routes/hypervisor');
  test('routes/hypervisor/existing-host.js should pass jshint', function() { 
    ok(true, 'routes/hypervisor/existing-host.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/hypervisor/new-host.jshint', function () {

  'use strict';

  module('JSHint - routes/hypervisor');
  test('routes/hypervisor/new-host.js should pass jshint', function() { 
    ok(true, 'routes/hypervisor/new-host.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/index.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/index.js should pass jshint', function() { 
    ok(true, 'routes/index.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/loggedin.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/loggedin.js should pass jshint', function() { 
    ok(true, 'routes/loggedin.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/login.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/login.js should pass jshint', function() { 
    ok(false, 'routes/login.js should pass jshint.\nroutes/login.js: line 8, col 6, Unnecessary semicolon.\nroutes/login.js: line 5, col 25, \'transition\' is defined but never used.\n\n2 errors'); 
  });

});
define('fusor-ember-cli/tests/routes/networking.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/networking.js should pass jshint', function() { 
    ok(true, 'routes/networking.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/new-environment.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/new-environment.js should pass jshint', function() { 
    ok(true, 'routes/new-environment.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/new-organization.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/new-organization.js should pass jshint', function() { 
    ok(true, 'routes/new-organization.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/openstack/index.jshint', function () {

  'use strict';

  module('JSHint - routes/openstack');
  test('routes/openstack/index.js should pass jshint', function() { 
    ok(true, 'routes/openstack/index.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/products.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/products.js should pass jshint', function() { 
    ok(true, 'routes/products.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/register-nodes.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/register-nodes.js should pass jshint', function() { 
    ok(true, 'routes/register-nodes.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/review/index.jshint', function () {

  'use strict';

  module('JSHint - routes/review');
  test('routes/review/index.js should pass jshint', function() { 
    ok(true, 'routes/review/index.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/review/installation.jshint', function () {

  'use strict';

  module('JSHint - routes/review');
  test('routes/review/installation.js should pass jshint', function() { 
    ok(true, 'routes/review/installation.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/review/progress.jshint', function () {

  'use strict';

  module('JSHint - routes/review');
  test('routes/review/progress.js should pass jshint', function() { 
    ok(true, 'routes/review/progress.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/review/progress/details.jshint', function () {

  'use strict';

  module('JSHint - routes/review/progress');
  test('routes/review/progress/details.js should pass jshint', function() { 
    ok(false, 'routes/review/progress/details.js should pass jshint.\nroutes/review/progress/details.js: line 4, col 19, \'params\' is defined but never used.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/routes/review/progress/details/task.jshint', function () {

  'use strict';

  module('JSHint - routes/review/progress/details');
  test('routes/review/progress/details/task.js should pass jshint', function() { 
    ok(true, 'routes/review/progress/details/task.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/review/progress/details/task/index.jshint', function () {

  'use strict';

  module('JSHint - routes/review/progress/details/task');
  test('routes/review/progress/details/task/index.js should pass jshint', function() { 
    ok(false, 'routes/review/progress/details/task/index.js should pass jshint.\nroutes/review/progress/details/task/index.js: line 5, col 41, \'model\' is defined but never used.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/routes/review/progress/details/task/running-steps.jshint', function () {

  'use strict';

  module('JSHint - routes/review/progress/details/task');
  test('routes/review/progress/details/task/running-steps.js should pass jshint', function() { 
    ok(true, 'routes/review/progress/details/task/running-steps.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/review/progress/details/task/task-errors.jshint', function () {

  'use strict';

  module('JSHint - routes/review/progress/details/task');
  test('routes/review/progress/details/task/task-errors.js should pass jshint', function() { 
    ok(true, 'routes/review/progress/details/task/task-errors.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/review/progress/details/task/task-locks.jshint', function () {

  'use strict';

  module('JSHint - routes/review/progress/details/task');
  test('routes/review/progress/details/task/task-locks.js should pass jshint', function() { 
    ok(true, 'routes/review/progress/details/task/task-locks.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/review/progress/details/task/task-raw.jshint', function () {

  'use strict';

  module('JSHint - routes/review/progress/details/task');
  test('routes/review/progress/details/task/task-raw.js should pass jshint', function() { 
    ok(true, 'routes/review/progress/details/task/task-raw.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/review/progress/overview.jshint', function () {

  'use strict';

  module('JSHint - routes/review/progress');
  test('routes/review/progress/overview.js should pass jshint', function() { 
    ok(true, 'routes/review/progress/overview.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/rhci.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/rhci.js should pass jshint', function() { 
    ok(true, 'routes/rhci.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/rhev-options.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/rhev-options.js should pass jshint', function() { 
    ok(true, 'routes/rhev-options.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/rhev-setup.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/rhev-setup.js should pass jshint', function() { 
    ok(true, 'routes/rhev-setup.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/rhev.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/rhev.js should pass jshint', function() { 
    ok(true, 'routes/rhev.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/rhev/index.jshint', function () {

  'use strict';

  module('JSHint - routes/rhev');
  test('routes/rhev/index.js should pass jshint', function() { 
    ok(true, 'routes/rhev/index.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/satellite.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/satellite.js should pass jshint', function() { 
    ok(true, 'routes/satellite.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/satellite/index.jshint', function () {

  'use strict';

  module('JSHint - routes/satellite');
  test('routes/satellite/index.js should pass jshint', function() { 
    ok(true, 'routes/satellite/index.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/setpassword.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/setpassword.js should pass jshint', function() { 
    ok(true, 'routes/setpassword.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/single-deployment.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/single-deployment.js should pass jshint', function() { 
    ok(true, 'routes/single-deployment.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/storage.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/storage.js should pass jshint', function() { 
    ok(true, 'routes/storage.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/subscriptions.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/subscriptions.js should pass jshint', function() { 
    ok(true, 'routes/subscriptions.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/subscriptions/credentials.jshint', function () {

  'use strict';

  module('JSHint - routes/subscriptions');
  test('routes/subscriptions/credentials.js should pass jshint', function() { 
    ok(true, 'routes/subscriptions/credentials.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/subscriptions/index.jshint', function () {

  'use strict';

  module('JSHint - routes/subscriptions');
  test('routes/subscriptions/index.js should pass jshint', function() { 
    ok(true, 'routes/subscriptions/index.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/subscriptions/select-subscriptions.jshint', function () {

  'use strict';

  module('JSHint - routes/subscriptions');
  test('routes/subscriptions/select-subscriptions.js should pass jshint', function() { 
    ok(true, 'routes/subscriptions/select-subscriptions.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/routes/where-install.jshint', function () {

  'use strict';

  module('JSHint - routes');
  test('routes/where-install.js should pass jshint', function() { 
    ok(true, 'routes/where-install.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/serializers/foreman-task.jshint', function () {

  'use strict';

  module('JSHint - serializers');
  test('serializers/foreman-task.js should pass jshint', function() { 
    ok(true, 'serializers/foreman-task.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/serializers/puppetclass.jshint', function () {

  'use strict';

  module('JSHint - serializers');
  test('serializers/puppetclass.js should pass jshint', function() { 
    ok(false, 'serializers/puppetclass.js should pass jshint.\nserializers/puppetclass.js: line 8, col 35, \'$\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/test-helper', ['fusor-ember-cli/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {

	'use strict';

	ember_qunit.setResolver(resolver['default']);

});
define('fusor-ember-cli/tests/test-helper.jshint', function () {

  'use strict';

  module('JSHint - .');
  test('test-helper.js should pass jshint', function() { 
    ok(true, 'test-helper.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/torii-providers/foreman.jshint', function () {

  'use strict';

  module('JSHint - torii-providers');
  test('torii-providers/foreman.js should pass jshint', function() { 
    ok(false, 'torii-providers/foreman.js should pass jshint.\ntorii-providers/foreman.js: line 1, col 16, \'Ember\' is not defined.\ntorii-providers/foreman.js: line 5, col 16, \'Ember\' is not defined.\ntorii-providers/foreman.js: line 7, col 7, \'exampleAsyncLogin\' is not defined.\ntorii-providers/foreman.js: line 14, col 11, \'Ember\' is not defined.\ntorii-providers/foreman.js: line 5, col 53, \'reject\' is defined but never used.\n\n5 errors'); 
  });

});
define('fusor-ember-cli/tests/unit/adapters/application-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('adapter:application', 'ApplicationAdapter', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var adapter = this.subject();
    ok(adapter);
  });

  // Specify the other units that are required for this test.
  // needs: ['serializer:foo']

});
define('fusor-ember-cli/tests/unit/adapters/application-test.jshint', function () {

  'use strict';

  module('JSHint - unit/adapters');
  test('unit/adapters/application-test.js should pass jshint', function() { 
    ok(false, 'unit/adapters/application-test.js should pass jshint.\nunit/adapters/application-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/adapters/foreman-task-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('adapter:foreman-task', 'ForemanTaskAdapter', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function (assert) {
    var adapter = this.subject();
    assert.ok(adapter);
  });

  // Specify the other units that are required for this test.
  // needs: ['serializer:foo']

});
define('fusor-ember-cli/tests/unit/adapters/foreman-task-test.jshint', function () {

  'use strict';

  module('JSHint - unit/adapters');
  test('unit/adapters/foreman-task-test.js should pass jshint', function() { 
    ok(true, 'unit/adapters/foreman-task-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/adapters/hostgroup-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('adapter:hostgroup', 'HostgroupAdapter', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var adapter = this.subject();
    ok(adapter);
  });

  // Specify the other units that are required for this test.
  // needs: ['serializer:foo']

});
define('fusor-ember-cli/tests/unit/adapters/hostgroup-test.jshint', function () {

  'use strict';

  module('JSHint - unit/adapters');
  test('unit/adapters/hostgroup-test.js should pass jshint', function() { 
    ok(false, 'unit/adapters/hostgroup-test.js should pass jshint.\nunit/adapters/hostgroup-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/adapters/lifecycle-environment-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('adapter:lifecycle-environment', 'LifecycleEnvironmentAdapter', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var adapter = this.subject();
    ok(adapter);
  });

  // Specify the other units that are required for this test.
  // needs: ['serializer:foo']

});
define('fusor-ember-cli/tests/unit/adapters/lifecycle-environment-test.jshint', function () {

  'use strict';

  module('JSHint - unit/adapters');
  test('unit/adapters/lifecycle-environment-test.js should pass jshint', function() { 
    ok(false, 'unit/adapters/lifecycle-environment-test.js should pass jshint.\nunit/adapters/lifecycle-environment-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/adapters/subscriptions-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('adapter:subscriptions', 'SubscriptionsAdapter', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var adapter = this.subject();
    ok(adapter);
  });

  // Specify the other units that are required for this test.
  // needs: ['serializer:foo']

});
define('fusor-ember-cli/tests/unit/adapters/subscriptions-test.jshint', function () {

  'use strict';

  module('JSHint - unit/adapters');
  test('unit/adapters/subscriptions-test.js should pass jshint', function() { 
    ok(false, 'unit/adapters/subscriptions-test.js should pass jshint.\nunit/adapters/subscriptions-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/adapters/traffic-type-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('adapter:traffic-type', 'TrafficTypeAdapter', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var adapter = this.subject();
    ok(adapter);
  });

  // Specify the other units that are required for this test.
  // needs: ['serializer:foo']

});
define('fusor-ember-cli/tests/unit/adapters/traffic-type-test.jshint', function () {

  'use strict';

  module('JSHint - unit/adapters');
  test('unit/adapters/traffic-type-test.js should pass jshint', function() { 
    ok(false, 'unit/adapters/traffic-type-test.js should pass jshint.\nunit/adapters/traffic-type-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/components/accordion-item-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('accordion-item', 'AccordionItemComponent', {});

  ember_qunit.test('it renders', function () {
    expect(2);

    // creates the component instance
    var component = this.subject();
    equal(component._state, 'preRender');

    // appends the component to the page
    this.append();
    equal(component._state, 'inDOM');
  });

  // specify the other units that are required for this test
  // needs: ['component:foo', 'helper:bar']

});
define('fusor-ember-cli/tests/unit/components/accordion-item-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/accordion-item-test.js should pass jshint', function() { 
    ok(false, 'unit/components/accordion-item-test.js should pass jshint.\nunit/components/accordion-item-test.js: line 12, col 3, \'expect\' is not defined.\nunit/components/accordion-item-test.js: line 16, col 3, \'equal\' is not defined.\nunit/components/accordion-item-test.js: line 20, col 3, \'equal\' is not defined.\n\n3 errors'); 
  });

});
define('fusor-ember-cli/tests/unit/components/base-f-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('base-f', 'BaseFComponent', {});

  ember_qunit.test('it renders', function () {
    expect(2);

    // creates the component instance
    var component = this.subject();
    equal(component._state, 'preRender');

    // appends the component to the page
    this.append();
    equal(component._state, 'inDOM');
  });

  // specify the other units that are required for this test
  // needs: ['component:foo', 'helper:bar']

});
define('fusor-ember-cli/tests/unit/components/base-f-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/base-f-test.js should pass jshint', function() { 
    ok(false, 'unit/components/base-f-test.js should pass jshint.\nunit/components/base-f-test.js: line 12, col 3, \'expect\' is not defined.\nunit/components/base-f-test.js: line 16, col 3, \'equal\' is not defined.\nunit/components/base-f-test.js: line 20, col 3, \'equal\' is not defined.\n\n3 errors'); 
  });

});
define('fusor-ember-cli/tests/unit/components/button-f-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('button-f', {});

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

  // specify the other units that are required for this test
  // needs: ['component:foo', 'helper:bar']

});
define('fusor-ember-cli/tests/unit/components/button-f-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/button-f-test.js should pass jshint', function() { 
    ok(true, 'unit/components/button-f-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/components/env-path-list-item-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('env-path-list-item', 'EnvPathListItemComponent', {});

  ember_qunit.test('it renders', function () {
    expect(2);

    // creates the component instance
    var component = this.subject();
    equal(component._state, 'preRender');

    // appends the component to the page
    this.append();
    equal(component._state, 'inDOM');
  });

  // specify the other units that are required for this test
  // needs: ['component:foo', 'helper:bar']

});
define('fusor-ember-cli/tests/unit/components/env-path-list-item-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/env-path-list-item-test.js should pass jshint', function() { 
    ok(false, 'unit/components/env-path-list-item-test.js should pass jshint.\nunit/components/env-path-list-item-test.js: line 12, col 3, \'expect\' is not defined.\nunit/components/env-path-list-item-test.js: line 16, col 3, \'equal\' is not defined.\nunit/components/env-path-list-item-test.js: line 20, col 3, \'equal\' is not defined.\n\n3 errors'); 
  });

});
define('fusor-ember-cli/tests/unit/components/modal-confirm-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('model-confirm', 'ModelConfirmComponent', {});

  ember_qunit.test('it renders', function () {
    expect(2);

    // creates the component instance
    var component = this.subject();
    equal(component._state, 'preRender');

    // appends the component to the page
    this.append();
    equal(component._state, 'inDOM');
  });

  // specify the other units that are required for this test
  // needs: ['component:foo', 'helper:bar']

});
define('fusor-ember-cli/tests/unit/components/modal-confirm-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/modal-confirm-test.js should pass jshint', function() { 
    ok(false, 'unit/components/modal-confirm-test.js should pass jshint.\nunit/components/modal-confirm-test.js: line 12, col 3, \'expect\' is not defined.\nunit/components/modal-confirm-test.js: line 16, col 3, \'equal\' is not defined.\nunit/components/modal-confirm-test.js: line 20, col 3, \'equal\' is not defined.\n\n3 errors'); 
  });

});
define('fusor-ember-cli/tests/unit/components/radio-button-f-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('radio-button-f', 'RadioButtonFComponent', {});

  ember_qunit.test('it renders', function () {
    expect(2);

    // creates the component instance
    var component = this.subject();
    equal(component._state, 'preRender');

    // appends the component to the page
    this.append();
    equal(component._state, 'inDOM');
  });

  // specify the other units that are required for this test
  // needs: ['component:foo', 'helper:bar']

});
define('fusor-ember-cli/tests/unit/components/radio-button-f-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/radio-button-f-test.js should pass jshint', function() { 
    ok(false, 'unit/components/radio-button-f-test.js should pass jshint.\nunit/components/radio-button-f-test.js: line 12, col 3, \'expect\' is not defined.\nunit/components/radio-button-f-test.js: line 16, col 3, \'equal\' is not defined.\nunit/components/radio-button-f-test.js: line 20, col 3, \'equal\' is not defined.\n\n3 errors'); 
  });

});
define('fusor-ember-cli/tests/unit/components/rchi-item-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('rchi-item', 'RchiItemComponent', {});

  ember_qunit.test('it renders', function () {
    expect(2);

    // creates the component instance
    var component = this.subject();
    equal(component._state, 'preRender');

    // appends the component to the page
    this.append();
    equal(component._state, 'inDOM');
  });

  // specify the other units that are required for this test
  // needs: ['component:foo', 'helper:bar']

});
define('fusor-ember-cli/tests/unit/components/rchi-item-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/rchi-item-test.js should pass jshint', function() { 
    ok(false, 'unit/components/rchi-item-test.js should pass jshint.\nunit/components/rchi-item-test.js: line 12, col 3, \'expect\' is not defined.\nunit/components/rchi-item-test.js: line 16, col 3, \'equal\' is not defined.\nunit/components/rchi-item-test.js: line 20, col 3, \'equal\' is not defined.\n\n3 errors'); 
  });

});
define('fusor-ember-cli/tests/unit/components/rhci-hover-text-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('rhci-hover-text', 'RhciHoverTextComponent', {});

  ember_qunit.test('it renders', function () {
    expect(2);

    // creates the component instance
    var component = this.subject();
    equal(component._state, 'preRender');

    // appends the component to the page
    this.append();
    equal(component._state, 'inDOM');
  });

  // specify the other units that are required for this test
  // needs: ['component:foo', 'helper:bar']

});
define('fusor-ember-cli/tests/unit/components/rhci-hover-text-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/rhci-hover-text-test.js should pass jshint', function() { 
    ok(false, 'unit/components/rhci-hover-text-test.js should pass jshint.\nunit/components/rhci-hover-text-test.js: line 12, col 3, \'expect\' is not defined.\nunit/components/rhci-hover-text-test.js: line 16, col 3, \'equal\' is not defined.\nunit/components/rhci-hover-text-test.js: line 20, col 3, \'equal\' is not defined.\n\n3 errors'); 
  });

});
define('fusor-ember-cli/tests/unit/components/rhci-start-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('rhci-start', 'RhciStartComponent', {});

  ember_qunit.test('it renders', function () {
    expect(2);

    // creates the component instance
    var component = this.subject();
    equal(component._state, 'preRender');

    // appends the component to the page
    this.append();
    equal(component._state, 'inDOM');
  });

  // specify the other units that are required for this test
  // needs: ['component:foo', 'helper:bar']

});
define('fusor-ember-cli/tests/unit/components/rhci-start-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/rhci-start-test.js should pass jshint', function() { 
    ok(false, 'unit/components/rhci-start-test.js should pass jshint.\nunit/components/rhci-start-test.js: line 12, col 3, \'expect\' is not defined.\nunit/components/rhci-start-test.js: line 16, col 3, \'equal\' is not defined.\nunit/components/rhci-start-test.js: line 20, col 3, \'equal\' is not defined.\n\n3 errors'); 
  });

});
define('fusor-ember-cli/tests/unit/components/rhci-wizard-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('rhci-wizard', 'RhciWizardComponent', {});

  ember_qunit.test('it renders', function () {
    expect(2);

    // creates the component instance
    var component = this.subject();
    equal(component._state, 'preRender');

    // appends the component to the page
    this.append();
    equal(component._state, 'inDOM');
  });

  // specify the other units that are required for this test
  // needs: ['component:foo', 'helper:bar']

});
define('fusor-ember-cli/tests/unit/components/rhci-wizard-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/rhci-wizard-test.js should pass jshint', function() { 
    ok(false, 'unit/components/rhci-wizard-test.js should pass jshint.\nunit/components/rhci-wizard-test.js: line 12, col 3, \'expect\' is not defined.\nunit/components/rhci-wizard-test.js: line 16, col 3, \'equal\' is not defined.\nunit/components/rhci-wizard-test.js: line 20, col 3, \'equal\' is not defined.\n\n3 errors'); 
  });

});
define('fusor-ember-cli/tests/unit/components/select-f-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('select-f', 'SelectFComponent', {});

  ember_qunit.test('it renders', function () {
    expect(2);

    // creates the component instance
    var component = this.subject();
    equal(component._state, 'preRender');

    // appends the component to the page
    this.append();
    equal(component._state, 'inDOM');
  });

  // specify the other units that are required for this test
  // needs: ['component:foo', 'helper:bar']

});
define('fusor-ember-cli/tests/unit/components/select-f-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/select-f-test.js should pass jshint', function() { 
    ok(false, 'unit/components/select-f-test.js should pass jshint.\nunit/components/select-f-test.js: line 12, col 3, \'expect\' is not defined.\nunit/components/select-f-test.js: line 16, col 3, \'equal\' is not defined.\nunit/components/select-f-test.js: line 20, col 3, \'equal\' is not defined.\n\n3 errors'); 
  });

});
define('fusor-ember-cli/tests/unit/components/select-simple-f-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('select-simple-f', 'SelectSimpleFComponent', {});

  ember_qunit.test('it renders', function () {
    expect(2);

    // creates the component instance
    var component = this.subject();
    equal(component._state, 'preRender');

    // appends the component to the page
    this.append();
    equal(component._state, 'inDOM');
  });

  // specify the other units that are required for this test
  // needs: ['component:foo', 'helper:bar']

});
define('fusor-ember-cli/tests/unit/components/select-simple-f-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/select-simple-f-test.js should pass jshint', function() { 
    ok(false, 'unit/components/select-simple-f-test.js should pass jshint.\nunit/components/select-simple-f-test.js: line 12, col 3, \'expect\' is not defined.\nunit/components/select-simple-f-test.js: line 16, col 3, \'equal\' is not defined.\nunit/components/select-simple-f-test.js: line 20, col 3, \'equal\' is not defined.\n\n3 errors'); 
  });

});
define('fusor-ember-cli/tests/unit/components/step-number-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('step-number', 'StepNumberComponent', {});

  ember_qunit.test('it renders', function () {
    expect(2);

    // creates the component instance
    var component = this.subject();
    equal(component._state, 'preRender');

    // appends the component to the page
    this.append();
    equal(component._state, 'inDOM');
  });

  // specify the other units that are required for this test
  // needs: ['component:foo', 'helper:bar']

});
define('fusor-ember-cli/tests/unit/components/step-number-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/step-number-test.js should pass jshint', function() { 
    ok(false, 'unit/components/step-number-test.js should pass jshint.\nunit/components/step-number-test.js: line 12, col 3, \'expect\' is not defined.\nunit/components/step-number-test.js: line 16, col 3, \'equal\' is not defined.\nunit/components/step-number-test.js: line 20, col 3, \'equal\' is not defined.\n\n3 errors'); 
  });

});
define('fusor-ember-cli/tests/unit/components/subnet-drop-area-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('subnet-drop-area', 'SubnetDropAreaComponent', {});

  ember_qunit.test('it renders', function () {
    expect(2);

    // creates the component instance
    var component = this.subject();
    equal(component._state, 'preRender');

    // appends the component to the page
    this.append();
    equal(component._state, 'inDOM');
  });

  // specify the other units that are required for this test
  // needs: ['component:foo', 'helper:bar']

});
define('fusor-ember-cli/tests/unit/components/subnet-drop-area-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/subnet-drop-area-test.js should pass jshint', function() { 
    ok(false, 'unit/components/subnet-drop-area-test.js should pass jshint.\nunit/components/subnet-drop-area-test.js: line 12, col 3, \'expect\' is not defined.\nunit/components/subnet-drop-area-test.js: line 16, col 3, \'equal\' is not defined.\nunit/components/subnet-drop-area-test.js: line 20, col 3, \'equal\' is not defined.\n\n3 errors'); 
  });

});
define('fusor-ember-cli/tests/unit/components/text-f-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('text-f', 'TextFComponent', {});

  ember_qunit.test('it renders', function () {
    expect(2);

    // creates the component instance
    var component = this.subject();
    equal(component._state, 'preRender');

    // appends the component to the page
    this.append();
    equal(component._state, 'inDOM');
  });

  // specify the other units that are required for this test
  // needs: ['component:foo', 'helper:bar']

});
define('fusor-ember-cli/tests/unit/components/text-f-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/text-f-test.js should pass jshint', function() { 
    ok(false, 'unit/components/text-f-test.js should pass jshint.\nunit/components/text-f-test.js: line 12, col 3, \'expect\' is not defined.\nunit/components/text-f-test.js: line 16, col 3, \'equal\' is not defined.\nunit/components/text-f-test.js: line 20, col 3, \'equal\' is not defined.\n\n3 errors'); 
  });

});
define('fusor-ember-cli/tests/unit/components/textarea-f-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('textarea-f', 'TextareaFComponent', {});

  ember_qunit.test('it renders', function () {
    expect(2);

    // creates the component instance
    var component = this.subject();
    equal(component._state, 'preRender');

    // appends the component to the page
    this.append();
    equal(component._state, 'inDOM');
  });

  // specify the other units that are required for this test
  // needs: ['component:foo', 'helper:bar']

});
define('fusor-ember-cli/tests/unit/components/textarea-f-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/textarea-f-test.js should pass jshint', function() { 
    ok(false, 'unit/components/textarea-f-test.js should pass jshint.\nunit/components/textarea-f-test.js: line 12, col 3, \'expect\' is not defined.\nunit/components/textarea-f-test.js: line 16, col 3, \'equal\' is not defined.\nunit/components/textarea-f-test.js: line 20, col 3, \'equal\' is not defined.\n\n3 errors'); 
  });

});
define('fusor-ember-cli/tests/unit/components/tr-engine-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('tr-engine', {});

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

  // specify the other units that are required for this test
  // needs: ['component:foo', 'helper:bar']

});
define('fusor-ember-cli/tests/unit/components/tr-engine-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/tr-engine-test.js should pass jshint', function() { 
    ok(true, 'unit/components/tr-engine-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/components/tr-hypervisor-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('tr-hypervisor', {});

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

  // specify the other units that are required for this test
  // needs: ['component:foo', 'helper:bar']

});
define('fusor-ember-cli/tests/unit/components/tr-hypervisor-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/tr-hypervisor-test.js should pass jshint', function() { 
    ok(true, 'unit/components/tr-hypervisor-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/components/tr-organization-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('tr-organization', 'TrOrganizationComponent', {});

  ember_qunit.test('it renders', function () {
    expect(2);

    // creates the component instance
    var component = this.subject();
    equal(component._state, 'preRender');

    // appends the component to the page
    this.append();
    equal(component._state, 'inDOM');
  });

  // specify the other units that are required for this test
  // needs: ['component:foo', 'helper:bar']

});
define('fusor-ember-cli/tests/unit/components/tr-organization-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/tr-organization-test.js should pass jshint', function() { 
    ok(false, 'unit/components/tr-organization-test.js should pass jshint.\nunit/components/tr-organization-test.js: line 12, col 3, \'expect\' is not defined.\nunit/components/tr-organization-test.js: line 16, col 3, \'equal\' is not defined.\nunit/components/tr-organization-test.js: line 20, col 3, \'equal\' is not defined.\n\n3 errors'); 
  });

});
define('fusor-ember-cli/tests/unit/components/tr-task-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('tr-task', {});

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

  // Specify the other units that are required for this test
  // needs: ['component:foo', 'helper:bar']

});
define('fusor-ember-cli/tests/unit/components/tr-task-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/tr-task-test.js should pass jshint', function() { 
    ok(true, 'unit/components/tr-task-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/components/traffic-type-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('traffic-type', 'TrafficTypeComponent', {});

  ember_qunit.test('it renders', function () {
    expect(2);

    // creates the component instance
    var component = this.subject();
    equal(component._state, 'preRender');

    // appends the component to the page
    this.append();
    equal(component._state, 'inDOM');
  });

  // specify the other units that are required for this test
  // needs: ['component:foo', 'helper:bar']

});
define('fusor-ember-cli/tests/unit/components/traffic-type-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/traffic-type-test.js should pass jshint', function() { 
    ok(false, 'unit/components/traffic-type-test.js should pass jshint.\nunit/components/traffic-type-test.js: line 12, col 3, \'expect\' is not defined.\nunit/components/traffic-type-test.js: line 16, col 3, \'equal\' is not defined.\nunit/components/traffic-type-test.js: line 20, col 3, \'equal\' is not defined.\n\n3 errors'); 
  });

});
define('fusor-ember-cli/tests/unit/components/upstream-downstream-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('upstream-downstream', 'UpstreamDownstreamComponent', {});

  ember_qunit.test('it renders', function () {
    expect(2);

    // creates the component instance
    var component = this.subject();
    equal(component._state, 'preRender');

    // appends the component to the page
    this.append();
    equal(component._state, 'inDOM');
  });

  // specify the other units that are required for this test
  // needs: ['component:foo', 'helper:bar']

});
define('fusor-ember-cli/tests/unit/components/upstream-downstream-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/upstream-downstream-test.js should pass jshint', function() { 
    ok(false, 'unit/components/upstream-downstream-test.js should pass jshint.\nunit/components/upstream-downstream-test.js: line 12, col 3, \'expect\' is not defined.\nunit/components/upstream-downstream-test.js: line 16, col 3, \'equal\' is not defined.\nunit/components/upstream-downstream-test.js: line 20, col 3, \'equal\' is not defined.\n\n3 errors'); 
  });

});
define('fusor-ember-cli/tests/unit/components/vertical-tab-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('vertical-tab', 'VerticalTabComponent', {});

  ember_qunit.test('it renders', function () {
    expect(2);

    // creates the component instance
    var component = this.subject();
    equal(component._state, 'preRender');

    // appends the component to the page
    this.append();
    equal(component._state, 'inDOM');
  });

  // specify the other units that are required for this test
  // needs: ['component:foo', 'helper:bar']

});
define('fusor-ember-cli/tests/unit/components/vertical-tab-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/vertical-tab-test.js should pass jshint', function() { 
    ok(false, 'unit/components/vertical-tab-test.js should pass jshint.\nunit/components/vertical-tab-test.js: line 12, col 3, \'expect\' is not defined.\nunit/components/vertical-tab-test.js: line 16, col 3, \'equal\' is not defined.\nunit/components/vertical-tab-test.js: line 20, col 3, \'equal\' is not defined.\n\n3 errors'); 
  });

});
define('fusor-ember-cli/tests/unit/components/wizard-item-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('wizard-item', 'WizardItemComponent', {});

  ember_qunit.test('it renders', function () {
    expect(2);

    // creates the component instance
    var component = this.subject();
    equal(component._state, 'preRender');

    // appends the component to the page
    this.append();
    equal(component._state, 'inDOM');
  });

  // specify the other units that are required for this test
  // needs: ['component:foo', 'helper:bar']

});
define('fusor-ember-cli/tests/unit/components/wizard-item-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/wizard-item-test.js should pass jshint', function() { 
    ok(false, 'unit/components/wizard-item-test.js should pass jshint.\nunit/components/wizard-item-test.js: line 12, col 3, \'expect\' is not defined.\nunit/components/wizard-item-test.js: line 16, col 3, \'equal\' is not defined.\nunit/components/wizard-item-test.js: line 20, col 3, \'equal\' is not defined.\n\n3 errors'); 
  });

});
define('fusor-ember-cli/tests/unit/components/wrap-in-container-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('wrap-in-container', 'WrapInContainerComponent', {});

  ember_qunit.test('it renders', function () {
    expect(2);

    // creates the component instance
    var component = this.subject();
    equal(component._state, 'preRender');

    // appends the component to the page
    this.append();
    equal(component._state, 'inDOM');
  });

  // specify the other units that are required for this test
  // needs: ['component:foo', 'helper:bar']

});
define('fusor-ember-cli/tests/unit/components/wrap-in-container-test.jshint', function () {

  'use strict';

  module('JSHint - unit/components');
  test('unit/components/wrap-in-container-test.js should pass jshint', function() { 
    ok(false, 'unit/components/wrap-in-container-test.js should pass jshint.\nunit/components/wrap-in-container-test.js: line 12, col 3, \'expect\' is not defined.\nunit/components/wrap-in-container-test.js: line 16, col 3, \'equal\' is not defined.\nunit/components/wrap-in-container-test.js: line 20, col 3, \'equal\' is not defined.\n\n3 errors'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/application-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:application', 'ApplicationController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/application-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/application-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/application-test.js should pass jshint.\nunit/controllers/application-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/cancel-modal-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:settings-model', 'SettingsModelController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/cancel-modal-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/cancel-modal-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/cancel-modal-test.js should pass jshint.\nunit/controllers/cancel-modal-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/cloudforms-storage-domain-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:cloudforms-storage-domain', 'CloudformsStorageDomainController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/cloudforms-storage-domain-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/cloudforms-storage-domain-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/cloudforms-storage-domain-test.js should pass jshint.\nunit/controllers/cloudforms-storage-domain-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/cloudforms-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:cloudforms', 'CloudformsController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/cloudforms-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/cloudforms-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/cloudforms-test.js should pass jshint.\nunit/controllers/cloudforms-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/cloudforms-vm-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:cloudforms-vm', 'CloudformsVmController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/cloudforms-vm-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/cloudforms-vm-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/cloudforms-vm-test.js should pass jshint.\nunit/controllers/cloudforms-vm-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/configure-environment-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:configure-environment', 'ConfigureEnvironmentController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/configure-environment-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/configure-environment-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/configure-environment-test.js should pass jshint.\nunit/controllers/configure-environment-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/configure-organization-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:configure-organization', 'ConfigureOrganizationController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/configure-organization-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/configure-organization-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/configure-organization-test.js should pass jshint.\nunit/controllers/configure-organization-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/configure/new-organization-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:configure/new-organization', 'ConfigureNewOrganizationController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/configure/new-organization-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers/configure');
  test('unit/controllers/configure/new-organization-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/configure/new-organization-test.js should pass jshint.\nunit/controllers/configure/new-organization-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/deployment-new-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:deployment-new', 'DeploymentNewController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/deployment-new-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/deployment-new-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/deployment-new-test.js should pass jshint.\nunit/controllers/deployment-new-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/deployment-new/satellite-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:deployment-new/satellite', 'DeploymentNewSatelliteController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/deployment-new/satellite-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers/deployment-new');
  test('unit/controllers/deployment-new/satellite-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/deployment-new/satellite-test.js should pass jshint.\nunit/controllers/deployment-new/satellite-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/deployment-new/satellite/configure-environment-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:deployment-new/satellite/configure-environment', 'DeploymentNewSatelliteConfigureEnvironmentController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/deployment-new/satellite/configure-environment-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers/deployment-new/satellite');
  test('unit/controllers/deployment-new/satellite/configure-environment-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/deployment-new/satellite/configure-environment-test.js should pass jshint.\nunit/controllers/deployment-new/satellite/configure-environment-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/deployment-new/satellite/configure-organization-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:deployment-new/satellite/configure-organization', 'DeploymentNewSatelliteConfigureOrganizationController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/deployment-new/satellite/configure-organization-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers/deployment-new/satellite');
  test('unit/controllers/deployment-new/satellite/configure-organization-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/deployment-new/satellite/configure-organization-test.js should pass jshint.\nunit/controllers/deployment-new/satellite/configure-organization-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/deployment-new/satellite/index-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:deployment-new/satellite/index', 'DeploymentNewSatelliteIndexController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/deployment-new/satellite/index-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers/deployment-new/satellite');
  test('unit/controllers/deployment-new/satellite/index-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/deployment-new/satellite/index-test.js should pass jshint.\nunit/controllers/deployment-new/satellite/index-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/deployment-new/start-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:deployment-new/start', 'DeploymentNewStartController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/deployment-new/start-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers/deployment-new');
  test('unit/controllers/deployment-new/start-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/deployment-new/start-test.js should pass jshint.\nunit/controllers/deployment-new/start-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/deployment-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:deployment', 'DeploymentController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/deployment-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/deployment-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/deployment-test.js should pass jshint.\nunit/controllers/deployment-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/deployment/start-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:deployment/start', 'DeploymentStartController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/deployment/start-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers/deployment');
  test('unit/controllers/deployment/start-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/deployment/start-test.js should pass jshint.\nunit/controllers/deployment/start-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/deployments-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:deployments', 'DeploymentsController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/deployments-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/deployments-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/deployments-test.js should pass jshint.\nunit/controllers/deployments-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/discovered-host-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:discovered-host', 'DiscoveredHostController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/discovered-host-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/discovered-host-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/discovered-host-test.js should pass jshint.\nunit/controllers/discovered-host-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/engine-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:engine', 'EngineController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/engine-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/engine-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/engine-test.js should pass jshint.\nunit/controllers/engine-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/engine/discovered-host-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:engine/discovered-host', 'EngineDiscoveredHostController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/engine/discovered-host-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers/engine');
  test('unit/controllers/engine/discovered-host-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/engine/discovered-host-test.js should pass jshint.\nunit/controllers/engine/discovered-host-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/host-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:host', 'HostController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/host-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/host-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/host-test.js should pass jshint.\nunit/controllers/host-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/hostgroup-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:hostgroup', 'HostgroupController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/hostgroup-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/hostgroup-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/hostgroup-test.js should pass jshint.\nunit/controllers/hostgroup-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/hypervisor-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:hypervisor', 'HypervisorController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/hypervisor-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/hypervisor-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/hypervisor-test.js should pass jshint.\nunit/controllers/hypervisor-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/hypervisor/discovered-host-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:hypervisor/discovered-host', 'HypervisorDiscoveredHostController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/hypervisor/discovered-host-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers/hypervisor');
  test('unit/controllers/hypervisor/discovered-host-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/hypervisor/discovered-host-test.js should pass jshint.\nunit/controllers/hypervisor/discovered-host-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/lifecycle-environment-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:environment', 'EnvironmentController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/lifecycle-environment-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/lifecycle-environment-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/lifecycle-environment-test.js should pass jshint.\nunit/controllers/lifecycle-environment-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/lifecycle-environments-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:environments', 'EnvironmentsController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/lifecycle-environments-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/lifecycle-environments-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/lifecycle-environments-test.js should pass jshint.\nunit/controllers/lifecycle-environments-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/login-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:login', 'LoginController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/login-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/login-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/login-test.js should pass jshint.\nunit/controllers/login-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/logout-model-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:logout-model', 'LogoutModelController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/logout-model-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/logout-model-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/logout-model-test.js should pass jshint.\nunit/controllers/logout-model-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/networking-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:networking', 'NetworkingController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/networking-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/networking-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/networking-test.js should pass jshint.\nunit/controllers/networking-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/new-environment-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:new-environment', 'NewEnvironmentController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/new-environment-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/new-environment-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/new-environment-test.js should pass jshint.\nunit/controllers/new-environment-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/new-organization-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:new-organization', 'NewOrganizationController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/new-organization-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/new-organization-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/new-organization-test.js should pass jshint.\nunit/controllers/new-organization-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/openstack-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:openstack', 'OpenstackController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/openstack-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/openstack-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/openstack-test.js should pass jshint.\nunit/controllers/openstack-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/organization-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:organization', 'OrganizationController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/organization-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/organization-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/organization-test.js should pass jshint.\nunit/controllers/organization-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/organizations-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:organizations', 'OrganizationsController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/organizations-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/organizations-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/organizations-test.js should pass jshint.\nunit/controllers/organizations-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/product-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:product', 'ProductController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/product-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/product-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/product-test.js should pass jshint.\nunit/controllers/product-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/products-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:products', 'ProductsController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/products-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/products-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/products-test.js should pass jshint.\nunit/controllers/products-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/review-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:review', 'ReviewController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/review-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/review-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/review-test.js should pass jshint.\nunit/controllers/review-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/review/installation-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:review/installation', 'ReviewInstallationController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/review/installation-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers/review');
  test('unit/controllers/review/installation-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/review/installation-test.js should pass jshint.\nunit/controllers/review/installation-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/review/progress-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:review/progress', 'ReviewProgressController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/review/progress-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers/review');
  test('unit/controllers/review/progress-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/review/progress-test.js should pass jshint.\nunit/controllers/review/progress-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/review/progress/details/task-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:review/progress/details/task', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function (assert) {
    var controller = this.subject();
    assert.ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/review/progress/details/task-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers/review/progress/details');
  test('unit/controllers/review/progress/details/task-test.js should pass jshint', function() { 
    ok(true, 'unit/controllers/review/progress/details/task-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/review/progress/details/task/index-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:review/progress/details/task/index', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function (assert) {
    var controller = this.subject();
    assert.ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/review/progress/details/task/index-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers/review/progress/details/task');
  test('unit/controllers/review/progress/details/task/index-test.js should pass jshint', function() { 
    ok(true, 'unit/controllers/review/progress/details/task/index-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/review/progress/overview-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:review/progress/overview', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function (assert) {
    var controller = this.subject();
    assert.ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/review/progress/overview-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers/review/progress');
  test('unit/controllers/review/progress/overview-test.js should pass jshint', function() { 
    ok(true, 'unit/controllers/review/progress/overview-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/rhci-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:rhci', 'RhciController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/rhci-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/rhci-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/rhci-test.js should pass jshint.\nunit/controllers/rhci-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/rhev-options-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:rhev-options', 'RhevOptionsController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/rhev-options-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/rhev-options-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/rhev-options-test.js should pass jshint.\nunit/controllers/rhev-options-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/rhev-setup-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:rhev-setup', 'RhevSetupController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/rhev-setup-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/rhev-setup-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/rhev-setup-test.js should pass jshint.\nunit/controllers/rhev-setup-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/rhev-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:rhev', 'RhevController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/rhev-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/rhev-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/rhev-test.js should pass jshint.\nunit/controllers/rhev-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/rhev/index-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:rhev/index', 'RhevIndexController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/rhev/index-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers/rhev');
  test('unit/controllers/rhev/index-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/rhev/index-test.js should pass jshint.\nunit/controllers/rhev/index-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/satellite-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:satellite', 'SatelliteController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/satellite-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/satellite-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/satellite-test.js should pass jshint.\nunit/controllers/satellite-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/satellite/index-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:satellite/index', 'SatelliteIndexController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/satellite/index-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers/satellite');
  test('unit/controllers/satellite/index-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/satellite/index-test.js should pass jshint.\nunit/controllers/satellite/index-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/side-menu-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:side-menu', 'SideMenuController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/side-menu-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/side-menu-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/side-menu-test.js should pass jshint.\nunit/controllers/side-menu-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/storage-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:storage', 'StorageController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/storage-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/storage-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/storage-test.js should pass jshint.\nunit/controllers/storage-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/subscription-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:subscription', 'SubscriptionController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/subscription-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/subscription-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/subscription-test.js should pass jshint.\nunit/controllers/subscription-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/subscriptions-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:subscriptions', 'SubscriptionsController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/subscriptions-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/subscriptions-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/subscriptions-test.js should pass jshint.\nunit/controllers/subscriptions-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/subscriptions/credentials-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:subscriptions/credentials', 'SubscriptionsCredentialsController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/subscriptions/credentials-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers/subscriptions');
  test('unit/controllers/subscriptions/credentials-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/subscriptions/credentials-test.js should pass jshint.\nunit/controllers/subscriptions/credentials-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/subscriptions/select-subscriptions-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:subscriptions/select-subscriptions', 'SubscriptionsSelectSubscriptionsController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/subscriptions/select-subscriptions-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers/subscriptions');
  test('unit/controllers/subscriptions/select-subscriptions-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/subscriptions/select-subscriptions-test.js should pass jshint.\nunit/controllers/subscriptions/select-subscriptions-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/user-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:user', 'UserController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/user-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/user-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/user-test.js should pass jshint.\nunit/controllers/user-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/user/edit-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:user/edit', 'UserEditController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/user/edit-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers/user');
  test('unit/controllers/user/edit-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/user/edit-test.js should pass jshint.\nunit/controllers/user/edit-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/users-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:users', 'UsersController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/users-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/users-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/users-test.js should pass jshint.\nunit/controllers/users-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/users/new-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:users/new', 'UsersNewController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/users/new-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers/users');
  test('unit/controllers/users/new-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/users/new-test.js should pass jshint.\nunit/controllers/users/new-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/controllers/where-install-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('controller:where-install', 'WhereInstallController', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var controller = this.subject();
    ok(controller);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/controllers/where-install-test.jshint', function () {

  'use strict';

  module('JSHint - unit/controllers');
  test('unit/controllers/where-install-test.js should pass jshint', function() { 
    ok(false, 'unit/controllers/where-install-test.js should pass jshint.\nunit/controllers/where-install-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/helpers/raw-text-test', ['fusor-ember-cli/helpers/raw-text'], function (raw_text) {

  'use strict';

  module('RawTextHelper');

  // Replace this with your real tests.
  test('it works', function () {
    var result = raw_text.rawText(42);
    ok(result);
  });

});
define('fusor-ember-cli/tests/unit/helpers/raw-text-test.jshint', function () {

  'use strict';

  module('JSHint - unit/helpers');
  test('unit/helpers/raw-text-test.js should pass jshint', function() { 
    ok(false, 'unit/helpers/raw-text-test.js should pass jshint.\nunit/helpers/raw-text-test.js: line 5, col 1, \'module\' is not defined.\nunit/helpers/raw-text-test.js: line 8, col 1, \'test\' is not defined.\nunit/helpers/raw-text-test.js: line 10, col 3, \'ok\' is not defined.\n\n3 errors'); 
  });

});
define('fusor-ember-cli/tests/unit/mixins/config-environment-mixin-test', ['ember', 'fusor-ember-cli/mixins/config-environment-mixin'], function (Ember, ConfigEnvironmentMixinMixin) {

  'use strict';

  module('ConfigEnvironmentMixinMixin');

  // Replace this with your real tests.
  test('it works', function () {
    var ConfigEnvironmentMixinObject = Ember['default'].Object.extend(ConfigEnvironmentMixinMixin['default']);
    var subject = ConfigEnvironmentMixinObject.create();
    ok(subject);
  });

});
define('fusor-ember-cli/tests/unit/mixins/config-environment-mixin-test.jshint', function () {

  'use strict';

  module('JSHint - unit/mixins');
  test('unit/mixins/config-environment-mixin-test.js should pass jshint', function() { 
    ok(false, 'unit/mixins/config-environment-mixin-test.js should pass jshint.\nunit/mixins/config-environment-mixin-test.js: line 4, col 1, \'module\' is not defined.\nunit/mixins/config-environment-mixin-test.js: line 7, col 1, \'test\' is not defined.\nunit/mixins/config-environment-mixin-test.js: line 10, col 3, \'ok\' is not defined.\n\n3 errors'); 
  });

});
define('fusor-ember-cli/tests/unit/mixins/configure-organization-mixin-test', ['ember', 'fusor-ember-cli/mixins/configure-organization-mixin'], function (Ember, ConfigureOrganizationMixinMixin) {

  'use strict';

  module('ConfigureOrganizationMixinMixin');

  // Replace this with your real tests.
  test('it works', function () {
    var ConfigureOrganizationMixinObject = Ember['default'].Object.extend(ConfigureOrganizationMixinMixin['default']);
    var subject = ConfigureOrganizationMixinObject.create();
    ok(subject);
  });

});
define('fusor-ember-cli/tests/unit/mixins/configure-organization-mixin-test.jshint', function () {

  'use strict';

  module('JSHint - unit/mixins');
  test('unit/mixins/configure-organization-mixin-test.js should pass jshint', function() { 
    ok(false, 'unit/mixins/configure-organization-mixin-test.js should pass jshint.\nunit/mixins/configure-organization-mixin-test.js: line 4, col 1, \'module\' is not defined.\nunit/mixins/configure-organization-mixin-test.js: line 7, col 1, \'test\' is not defined.\nunit/mixins/configure-organization-mixin-test.js: line 10, col 3, \'ok\' is not defined.\n\n3 errors'); 
  });

});
define('fusor-ember-cli/tests/unit/mixins/deployment-controller-mixin-test', ['ember', 'fusor-ember-cli/mixins/deployment-controller-mixin'], function (Ember, DeploymentControllerMixinMixin) {

  'use strict';

  module('DeploymentControllerMixinMixin');

  // Replace this with your real tests.
  test('it works', function () {
    var DeploymentControllerMixinObject = Ember['default'].Object.extend(DeploymentControllerMixinMixin['default']);
    var subject = DeploymentControllerMixinObject.create();
    ok(subject);
  });

});
define('fusor-ember-cli/tests/unit/mixins/deployment-controller-mixin-test.jshint', function () {

  'use strict';

  module('JSHint - unit/mixins');
  test('unit/mixins/deployment-controller-mixin-test.js should pass jshint', function() { 
    ok(false, 'unit/mixins/deployment-controller-mixin-test.js should pass jshint.\nunit/mixins/deployment-controller-mixin-test.js: line 4, col 1, \'module\' is not defined.\nunit/mixins/deployment-controller-mixin-test.js: line 7, col 1, \'test\' is not defined.\nunit/mixins/deployment-controller-mixin-test.js: line 10, col 3, \'ok\' is not defined.\n\n3 errors'); 
  });

});
define('fusor-ember-cli/tests/unit/mixins/deployment-new-satellite-route-mixin-test', ['ember', 'fusor-ember-cli/mixins/deployment-new-satellite-route-mixin'], function (Ember, DeploymentNewSatelliteRouteMixinMixin) {

  'use strict';

  module('DeploymentNewSatelliteRouteMixinMixin');

  // Replace this with your real tests.
  test('it works', function () {
    var DeploymentNewSatelliteRouteMixinObject = Ember['default'].Object.extend(DeploymentNewSatelliteRouteMixinMixin['default']);
    var subject = DeploymentNewSatelliteRouteMixinObject.create();
    ok(subject);
  });

});
define('fusor-ember-cli/tests/unit/mixins/deployment-new-satellite-route-mixin-test.jshint', function () {

  'use strict';

  module('JSHint - unit/mixins');
  test('unit/mixins/deployment-new-satellite-route-mixin-test.js should pass jshint', function() { 
    ok(false, 'unit/mixins/deployment-new-satellite-route-mixin-test.js should pass jshint.\nunit/mixins/deployment-new-satellite-route-mixin-test.js: line 4, col 1, \'module\' is not defined.\nunit/mixins/deployment-new-satellite-route-mixin-test.js: line 7, col 1, \'test\' is not defined.\nunit/mixins/deployment-new-satellite-route-mixin-test.js: line 10, col 3, \'ok\' is not defined.\n\n3 errors'); 
  });

});
define('fusor-ember-cli/tests/unit/mixins/deployment-route-mixin-test', ['ember', 'fusor-ember-cli/mixins/deployment-route-mixin'], function (Ember, DeploymentRouteMixinMixin) {

  'use strict';

  module('DeploymentRouteMixinMixin');

  // Replace this with your real tests.
  test('it works', function () {
    var DeploymentRouteMixinObject = Ember['default'].Object.extend(DeploymentRouteMixinMixin['default']);
    var subject = DeploymentRouteMixinObject.create();
    ok(subject);
  });

});
define('fusor-ember-cli/tests/unit/mixins/deployment-route-mixin-test.jshint', function () {

  'use strict';

  module('JSHint - unit/mixins');
  test('unit/mixins/deployment-route-mixin-test.js should pass jshint', function() { 
    ok(false, 'unit/mixins/deployment-route-mixin-test.js should pass jshint.\nunit/mixins/deployment-route-mixin-test.js: line 4, col 1, \'module\' is not defined.\nunit/mixins/deployment-route-mixin-test.js: line 7, col 1, \'test\' is not defined.\nunit/mixins/deployment-route-mixin-test.js: line 10, col 3, \'ok\' is not defined.\n\n3 errors'); 
  });

});
define('fusor-ember-cli/tests/unit/mixins/disable-tab-mixin-test', ['ember', 'fusor-ember-cli/mixins/disable-tab-mixin'], function (Ember, DisableTabMixinMixin) {

  'use strict';

  module('DisableTabMixinMixin');

  // Replace this with your real tests.
  test('it works', function () {
    var DisableTabMixinObject = Ember['default'].Object.extend(DisableTabMixinMixin['default']);
    var subject = DisableTabMixinObject.create();
    ok(subject);
  });

});
define('fusor-ember-cli/tests/unit/mixins/disable-tab-mixin-test.jshint', function () {

  'use strict';

  module('JSHint - unit/mixins');
  test('unit/mixins/disable-tab-mixin-test.js should pass jshint', function() { 
    ok(false, 'unit/mixins/disable-tab-mixin-test.js should pass jshint.\nunit/mixins/disable-tab-mixin-test.js: line 4, col 1, \'module\' is not defined.\nunit/mixins/disable-tab-mixin-test.js: line 7, col 1, \'test\' is not defined.\nunit/mixins/disable-tab-mixin-test.js: line 10, col 3, \'ok\' is not defined.\n\n3 errors'); 
  });

});
define('fusor-ember-cli/tests/unit/mixins/progress-bar-mixin-test', ['ember', 'fusor-ember-cli/mixins/progress-bar-mixin', 'qunit'], function (Ember, ProgressBarMixinMixin, qunit) {

  'use strict';

  qunit.module('ProgressBarMixinMixin');

  // Replace this with your real tests.
  qunit.test('it works', function (assert) {
    var ProgressBarMixinObject = Ember['default'].Object.extend(ProgressBarMixinMixin['default']);
    var subject = ProgressBarMixinObject.create();
    assert.ok(subject);
  });

});
define('fusor-ember-cli/tests/unit/mixins/progress-bar-mixin-test.jshint', function () {

  'use strict';

  module('JSHint - unit/mixins');
  test('unit/mixins/progress-bar-mixin-test.js should pass jshint', function() { 
    ok(true, 'unit/mixins/progress-bar-mixin-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/mixins/satellite-controller-mixin-test', ['ember', 'fusor-ember-cli/mixins/satellite-controller-mixin'], function (Ember, SatelliteControllerMixinMixin) {

  'use strict';

  module('SatelliteControllerMixinMixin');

  // Replace this with your real tests.
  test('it works', function () {
    var SatelliteControllerMixinObject = Ember['default'].Object.extend(SatelliteControllerMixinMixin['default']);
    var subject = SatelliteControllerMixinObject.create();
    ok(subject);
  });

});
define('fusor-ember-cli/tests/unit/mixins/satellite-controller-mixin-test.jshint', function () {

  'use strict';

  module('JSHint - unit/mixins');
  test('unit/mixins/satellite-controller-mixin-test.js should pass jshint', function() { 
    ok(false, 'unit/mixins/satellite-controller-mixin-test.js should pass jshint.\nunit/mixins/satellite-controller-mixin-test.js: line 4, col 1, \'module\' is not defined.\nunit/mixins/satellite-controller-mixin-test.js: line 7, col 1, \'test\' is not defined.\nunit/mixins/satellite-controller-mixin-test.js: line 10, col 3, \'ok\' is not defined.\n\n3 errors'); 
  });

});
define('fusor-ember-cli/tests/unit/mixins/save-hostname-mixin-test', ['ember', 'fusor-ember-cli/mixins/save-hostname-mixin', 'qunit'], function (Ember, SaveHostnameMixinMixin, qunit) {

  'use strict';

  qunit.module('SaveHostnameMixinMixin');

  // Replace this with your real tests.
  qunit.test('it works', function (assert) {
    var SaveHostnameMixinObject = Ember['default'].Object.extend(SaveHostnameMixinMixin['default']);
    var subject = SaveHostnameMixinObject.create();
    assert.ok(subject);
  });

});
define('fusor-ember-cli/tests/unit/mixins/save-hostname-mixin-test.jshint', function () {

  'use strict';

  module('JSHint - unit/mixins');
  test('unit/mixins/save-hostname-mixin-test.js should pass jshint', function() { 
    ok(true, 'unit/mixins/save-hostname-mixin-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/mixins/start-controller-mixin-test', ['ember', 'fusor-ember-cli/mixins/start-controller-mixin'], function (Ember, StartControllerMixinMixin) {

  'use strict';

  module('StartControllerMixinMixin');

  // Replace this with your real tests.
  test('it works', function () {
    var StartControllerMixinObject = Ember['default'].Object.extend(StartControllerMixinMixin['default']);
    var subject = StartControllerMixinObject.create();
    ok(subject);
  });

});
define('fusor-ember-cli/tests/unit/mixins/start-controller-mixin-test.jshint', function () {

  'use strict';

  module('JSHint - unit/mixins');
  test('unit/mixins/start-controller-mixin-test.js should pass jshint', function() { 
    ok(false, 'unit/mixins/start-controller-mixin-test.js should pass jshint.\nunit/mixins/start-controller-mixin-test.js: line 4, col 1, \'module\' is not defined.\nunit/mixins/start-controller-mixin-test.js: line 7, col 1, \'test\' is not defined.\nunit/mixins/start-controller-mixin-test.js: line 10, col 3, \'ok\' is not defined.\n\n3 errors'); 
  });

});
define('fusor-ember-cli/tests/unit/models/deployment-host-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('deployment-host', 'DeploymentHost', {
    // Specify the other units that are required for this test.
    needs: []
  });

  ember_qunit.test('it exists', function () {
    var model = this.subject();
    // var store = this.store();
    ok(!!model);
  });

});
define('fusor-ember-cli/tests/unit/models/deployment-host-test.jshint', function () {

  'use strict';

  module('JSHint - unit/models');
  test('unit/models/deployment-host-test.js should pass jshint', function() { 
    ok(false, 'unit/models/deployment-host-test.js should pass jshint.\nunit/models/deployment-host-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/models/deployment-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('deployment', 'Deployment', {
    // Specify the other units that are required for this test.
    needs: []
  });

  ember_qunit.test('it exists', function () {
    var model = this.subject();
    // var store = this.store();
    ok(!!model);
  });

});
define('fusor-ember-cli/tests/unit/models/deployment-test.jshint', function () {

  'use strict';

  module('JSHint - unit/models');
  test('unit/models/deployment-test.js should pass jshint', function() { 
    ok(false, 'unit/models/deployment-test.js should pass jshint.\nunit/models/deployment-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/models/discovered-host-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('discovered-host', 'DiscoveredHost', {
    // Specify the other units that are required for this test.
    needs: []
  });

  ember_qunit.test('it exists', function () {
    var model = this.subject();
    // var store = this.store();
    ok(!!model);
  });

});
define('fusor-ember-cli/tests/unit/models/discovered-host-test.jshint', function () {

  'use strict';

  module('JSHint - unit/models');
  test('unit/models/discovered-host-test.js should pass jshint', function() { 
    ok(false, 'unit/models/discovered-host-test.js should pass jshint.\nunit/models/discovered-host-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/models/environment-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('environment', 'Environment', {
    // Specify the other units that are required for this test.
    needs: []
  });

  ember_qunit.test('it exists', function () {
    var model = this.subject();
    // var store = this.store();
    ok(!!model);
  });

});
define('fusor-ember-cli/tests/unit/models/environment-test.jshint', function () {

  'use strict';

  module('JSHint - unit/models');
  test('unit/models/environment-test.js should pass jshint', function() { 
    ok(false, 'unit/models/environment-test.js should pass jshint.\nunit/models/environment-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/models/foreman-task-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('foreman-task', {
    // Specify the other units that are required for this test.
    needs: []
  });

  ember_qunit.test('it exists', function (assert) {
    var model = this.subject();
    // var store = this.store();
    assert.ok(!!model);
  });

});
define('fusor-ember-cli/tests/unit/models/foreman-task-test.jshint', function () {

  'use strict';

  module('JSHint - unit/models');
  test('unit/models/foreman-task-test.js should pass jshint', function() { 
    ok(true, 'unit/models/foreman-task-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/models/host-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('host', 'Host', {
    // Specify the other units that are required for this test.
    needs: []
  });

  ember_qunit.test('it exists', function () {
    var model = this.subject();
    // var store = this.store();
    ok(!!model);
  });

});
define('fusor-ember-cli/tests/unit/models/host-test.jshint', function () {

  'use strict';

  module('JSHint - unit/models');
  test('unit/models/host-test.js should pass jshint', function() { 
    ok(false, 'unit/models/host-test.js should pass jshint.\nunit/models/host-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/models/hostgroup-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('hostgroup', 'Hostgroup', {
    // Specify the other units that are required for this test.
    needs: []
  });

  ember_qunit.test('it exists', function () {
    var model = this.subject();
    // var store = this.store();
    ok(!!model);
  });

});
define('fusor-ember-cli/tests/unit/models/hostgroup-test.jshint', function () {

  'use strict';

  module('JSHint - unit/models');
  test('unit/models/hostgroup-test.js should pass jshint', function() { 
    ok(false, 'unit/models/hostgroup-test.js should pass jshint.\nunit/models/hostgroup-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/models/lifecycle-environment-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('environment', 'Environment', {
    // Specify the other units that are required for this test.
    needs: []
  });

  ember_qunit.test('it exists', function () {
    var model = this.subject();
    // var store = this.store();
    ok(!!model);
  });

});
define('fusor-ember-cli/tests/unit/models/lifecycle-environment-test.jshint', function () {

  'use strict';

  module('JSHint - unit/models');
  test('unit/models/lifecycle-environment-test.js should pass jshint', function() { 
    ok(false, 'unit/models/lifecycle-environment-test.js should pass jshint.\nunit/models/lifecycle-environment-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/models/location-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('location', 'Location', {
    // Specify the other units that are required for this test.
    needs: []
  });

  ember_qunit.test('it exists', function () {
    var model = this.subject();
    // var store = this.store();
    ok(!!model);
  });

});
define('fusor-ember-cli/tests/unit/models/location-test.jshint', function () {

  'use strict';

  module('JSHint - unit/models');
  test('unit/models/location-test.js should pass jshint', function() { 
    ok(false, 'unit/models/location-test.js should pass jshint.\nunit/models/location-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/models/organization-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('organization', 'Organization', {
    // Specify the other units that are required for this test.
    needs: []
  });

  ember_qunit.test('it exists', function () {
    var model = this.subject();
    // var store = this.store();
    ok(!!model);
  });

});
define('fusor-ember-cli/tests/unit/models/organization-test.jshint', function () {

  'use strict';

  module('JSHint - unit/models');
  test('unit/models/organization-test.js should pass jshint', function() { 
    ok(false, 'unit/models/organization-test.js should pass jshint.\nunit/models/organization-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/models/product-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('product', 'Product', {
    // Specify the other units that are required for this test.
    needs: []
  });

  ember_qunit.test('it exists', function () {
    var model = this.subject();
    // var store = this.store();
    ok(!!model);
  });

});
define('fusor-ember-cli/tests/unit/models/product-test.jshint', function () {

  'use strict';

  module('JSHint - unit/models');
  test('unit/models/product-test.js should pass jshint', function() { 
    ok(false, 'unit/models/product-test.js should pass jshint.\nunit/models/product-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/models/rhev-setup-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('rhev-setup', 'RhevSetup', {
    // Specify the other units that are required for this test.
    needs: []
  });

  ember_qunit.test('it exists', function () {
    var model = this.subject();
    // var store = this.store();
    ok(!!model);
  });

});
define('fusor-ember-cli/tests/unit/models/rhev-setup-test.jshint', function () {

  'use strict';

  module('JSHint - unit/models');
  test('unit/models/rhev-setup-test.js should pass jshint', function() { 
    ok(false, 'unit/models/rhev-setup-test.js should pass jshint.\nunit/models/rhev-setup-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/models/subnet-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('subnet', 'Subnet', {
    // Specify the other units that are required for this test.
    needs: []
  });

  ember_qunit.test('it exists', function () {
    var model = this.subject();
    // var store = this.store();
    ok(!!model);
  });

});
define('fusor-ember-cli/tests/unit/models/subnet-test.jshint', function () {

  'use strict';

  module('JSHint - unit/models');
  test('unit/models/subnet-test.js should pass jshint', function() { 
    ok(false, 'unit/models/subnet-test.js should pass jshint.\nunit/models/subnet-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/models/subscription-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('subscription', 'Subscription', {
    // Specify the other units that are required for this test.
    needs: []
  });

  ember_qunit.test('it exists', function () {
    var model = this.subject();
    // var store = this.store();
    ok(!!model);
  });

});
define('fusor-ember-cli/tests/unit/models/subscription-test.jshint', function () {

  'use strict';

  module('JSHint - unit/models');
  test('unit/models/subscription-test.js should pass jshint', function() { 
    ok(false, 'unit/models/subscription-test.js should pass jshint.\nunit/models/subscription-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/models/traffic-type-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('traffic-type', 'TrafficType', {
    // Specify the other units that are required for this test.
    needs: []
  });

  ember_qunit.test('it exists', function () {
    var model = this.subject();
    // var store = this.store();
    ok(!!model);
  });

});
define('fusor-ember-cli/tests/unit/models/traffic-type-test.jshint', function () {

  'use strict';

  module('JSHint - unit/models');
  test('unit/models/traffic-type-test.js should pass jshint', function() { 
    ok(false, 'unit/models/traffic-type-test.js should pass jshint.\nunit/models/traffic-type-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/models/user-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('user', 'User', {
    // Specify the other units that are required for this test.
    needs: []
  });

  ember_qunit.test('it exists', function () {
    var model = this.subject();
    // var store = this.store();
    ok(!!model);
  });

});
define('fusor-ember-cli/tests/unit/models/user-test.jshint', function () {

  'use strict';

  module('JSHint - unit/models');
  test('unit/models/user-test.js should pass jshint', function() { 
    ok(false, 'unit/models/user-test.js should pass jshint.\nunit/models/user-test.js: line 14, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/application-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:application', 'ApplicationRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/application-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/application-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/application-test.js should pass jshint.\nunit/routes/application-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/assign-nodes-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:assign-nodes', {});

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/assign-nodes-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/assign-nodes-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/assign-nodes-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/cloudforms-storage-domain-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:cloudforms-storage-domain', 'CloudformsStorageDomainRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/cloudforms-storage-domain-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/cloudforms-storage-domain-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/cloudforms-storage-domain-test.js should pass jshint.\nunit/routes/cloudforms-storage-domain-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/cloudforms-vm-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:cloudforms-vm', 'CloudformsVmRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/cloudforms-vm-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/cloudforms-vm-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/cloudforms-vm-test.js should pass jshint.\nunit/routes/cloudforms-vm-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/cloudforms/index-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:cloudforms/index', 'CloudformsIndexRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/cloudforms/index-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/cloudforms');
  test('unit/routes/cloudforms/index-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/cloudforms/index-test.js should pass jshint.\nunit/routes/cloudforms/index-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/configure-environment-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:configure-environment', 'ConfigureEnvironmentRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/configure-environment-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/configure-environment-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/configure-environment-test.js should pass jshint.\nunit/routes/configure-environment-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/configure-organization-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:configure-organization', 'ConfigureOrganizationRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/configure-organization-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/configure-organization-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/configure-organization-test.js should pass jshint.\nunit/routes/configure-organization-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/configure/new-organization-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:configure/new-organization', 'ConfigureNewOrganizationRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/configure/new-organization-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/configure');
  test('unit/routes/configure/new-organization-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/configure/new-organization-test.js should pass jshint.\nunit/routes/configure/new-organization-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/content-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:content', 'ContentRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/content-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/content-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/content-test.js should pass jshint.\nunit/routes/content-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/deployment-new-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:deployment-new', 'DeploymentNewRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/deployment-new-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/deployment-new-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/deployment-new-test.js should pass jshint.\nunit/routes/deployment-new-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/deployment-new/index-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:deployment-new/index', 'DeploymentNewIndexRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/deployment-new/index-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/deployment-new');
  test('unit/routes/deployment-new/index-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/deployment-new/index-test.js should pass jshint.\nunit/routes/deployment-new/index-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/deployment-new/satellite-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:deployment-new/satellite', 'DeploymentNewSatelliteRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/deployment-new/satellite-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/deployment-new');
  test('unit/routes/deployment-new/satellite-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/deployment-new/satellite-test.js should pass jshint.\nunit/routes/deployment-new/satellite-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/deployment-new/satellite/configure-environment-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:deployment-new/satellite/configure-environment', 'DeploymentNewSatelliteConfigureEnvironmentRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/deployment-new/satellite/configure-environment-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/deployment-new/satellite');
  test('unit/routes/deployment-new/satellite/configure-environment-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/deployment-new/satellite/configure-environment-test.js should pass jshint.\nunit/routes/deployment-new/satellite/configure-environment-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/deployment-new/satellite/configure-organization-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:deployment-new/satellite/configure-organization', 'DeploymentNewSatelliteConfigureOrganizationRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/deployment-new/satellite/configure-organization-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/deployment-new/satellite');
  test('unit/routes/deployment-new/satellite/configure-organization-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/deployment-new/satellite/configure-organization-test.js should pass jshint.\nunit/routes/deployment-new/satellite/configure-organization-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/deployment-new/satellite/index-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:deployment-new/satellite/index', 'DeploymentNewSatelliteIndexRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/deployment-new/satellite/index-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/deployment-new/satellite');
  test('unit/routes/deployment-new/satellite/index-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/deployment-new/satellite/index-test.js should pass jshint.\nunit/routes/deployment-new/satellite/index-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/deployment-new/start-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:deployment-new/start', 'DeploymentNewStartRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/deployment-new/start-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/deployment-new');
  test('unit/routes/deployment-new/start-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/deployment-new/start-test.js should pass jshint.\nunit/routes/deployment-new/start-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/deployment-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:deployment', 'DeploymentRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/deployment-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/deployment-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/deployment-test.js should pass jshint.\nunit/routes/deployment-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/deployment/index-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:deployment/index', 'DeploymentIndexRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/deployment/index-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/deployment');
  test('unit/routes/deployment/index-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/deployment/index-test.js should pass jshint.\nunit/routes/deployment/index-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/deployment/new-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:deployment/new', 'DeploymentNewRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/deployment/new-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/deployment');
  test('unit/routes/deployment/new-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/deployment/new-test.js should pass jshint.\nunit/routes/deployment/new-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/deployment/review-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:deployment/review', 'DeploymentReviewRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/deployment/review-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/deployment');
  test('unit/routes/deployment/review-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/deployment/review-test.js should pass jshint.\nunit/routes/deployment/review-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/deployment/satellite/configure/new-organization-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:deployment/satellite/configure/new-organization', 'DeploymentSatelliteConfigureNewOrganizationRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/deployment/satellite/configure/new-organization-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/deployment/satellite/configure');
  test('unit/routes/deployment/satellite/configure/new-organization-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/deployment/satellite/configure/new-organization-test.js should pass jshint.\nunit/routes/deployment/satellite/configure/new-organization-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/deployment/start-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:deployment/start', 'DeploymentStartRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/deployment/start-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/deployment');
  test('unit/routes/deployment/start-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/deployment/start-test.js should pass jshint.\nunit/routes/deployment/start-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/deployments-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:deployments', 'DeploymentsRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/deployments-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/deployments-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/deployments-test.js should pass jshint.\nunit/routes/deployments-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/discovered-host-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:discovered-host', 'DiscoveredHostRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/discovered-host-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/discovered-host-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/discovered-host-test.js should pass jshint.\nunit/routes/discovered-host-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/discovered-hosts-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:discovered-hosts', 'DiscoveredHostsRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/discovered-hosts-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/discovered-hosts-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/discovered-hosts-test.js should pass jshint.\nunit/routes/discovered-hosts-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/engine-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:engine', 'EngineRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/engine-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/engine-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/engine-test.js should pass jshint.\nunit/routes/engine-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/engine/discovered-host-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:engine/discovered-host', 'EngineDiscoveredHostRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/engine/discovered-host-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/engine');
  test('unit/routes/engine/discovered-host-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/engine/discovered-host-test.js should pass jshint.\nunit/routes/engine/discovered-host-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/engine/existing-host-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:engine/existing-host', 'EngineExistingHostRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/engine/existing-host-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/engine');
  test('unit/routes/engine/existing-host-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/engine/existing-host-test.js should pass jshint.\nunit/routes/engine/existing-host-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/engine/hypervisor-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:engine/hypervisor', 'EngineHypervisorRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/engine/hypervisor-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/engine');
  test('unit/routes/engine/hypervisor-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/engine/hypervisor-test.js should pass jshint.\nunit/routes/engine/hypervisor-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/engine/new-host-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:engine/new-host', 'EngineNewHostRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/engine/new-host-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/engine');
  test('unit/routes/engine/new-host-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/engine/new-host-test.js should pass jshint.\nunit/routes/engine/new-host-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/hostgroup-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:hostgroup', 'HostgroupRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/hostgroup-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/hostgroup-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/hostgroup-test.js should pass jshint.\nunit/routes/hostgroup-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/hostgroup/edit-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:hostgroup/edit', 'HostgroupEditRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/hostgroup/edit-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/hostgroup');
  test('unit/routes/hostgroup/edit-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/hostgroup/edit-test.js should pass jshint.\nunit/routes/hostgroup/edit-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/hostgroups-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:hostgroups', 'HostgroupsRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/hostgroups-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/hostgroups-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/hostgroups-test.js should pass jshint.\nunit/routes/hostgroups-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/hypervisor-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:hypervisor', 'HypervisorRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/hypervisor-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/hypervisor-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/hypervisor-test.js should pass jshint.\nunit/routes/hypervisor-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/hypervisor/discovered-host-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:hypervisor/discovered-host', 'HypervisorDiscoveredHostRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/hypervisor/discovered-host-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/hypervisor');
  test('unit/routes/hypervisor/discovered-host-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/hypervisor/discovered-host-test.js should pass jshint.\nunit/routes/hypervisor/discovered-host-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/hypervisor/existing-host-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:hypervisor/existing-host', 'HypervisorExistingHostRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/hypervisor/existing-host-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/hypervisor');
  test('unit/routes/hypervisor/existing-host-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/hypervisor/existing-host-test.js should pass jshint.\nunit/routes/hypervisor/existing-host-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/hypervisor/new-host-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:hypervisor/new-host', 'HypervisorNewHostRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/hypervisor/new-host-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/hypervisor');
  test('unit/routes/hypervisor/new-host-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/hypervisor/new-host-test.js should pass jshint.\nunit/routes/hypervisor/new-host-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/index-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:index', 'IndexRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/index-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/index-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/index-test.js should pass jshint.\nunit/routes/index-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/loggedin-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:loggedin', 'LoggedinRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/loggedin-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/loggedin-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/loggedin-test.js should pass jshint.\nunit/routes/loggedin-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/login-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:login', 'LoginRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/login-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/login-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/login-test.js should pass jshint.\nunit/routes/login-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/networking-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:networking', 'NetworkingRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/networking-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/networking-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/networking-test.js should pass jshint.\nunit/routes/networking-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/new-environment-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:new-environment', 'NewEnvironmentRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/new-environment-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/new-environment-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/new-environment-test.js should pass jshint.\nunit/routes/new-environment-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/new-organization-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:new-organization', 'NewOrganizationRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/new-organization-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/new-organization-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/new-organization-test.js should pass jshint.\nunit/routes/new-organization-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/openstack/index-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:openstack/index', 'OpenstackIndexRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/openstack/index-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/openstack');
  test('unit/routes/openstack/index-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/openstack/index-test.js should pass jshint.\nunit/routes/openstack/index-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/register-nodes-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:register-nodes', {});

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/register-nodes-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/register-nodes-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/register-nodes-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/review/index-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:review/index', 'ReviewIndexRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/review/index-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/review');
  test('unit/routes/review/index-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/review/index-test.js should pass jshint.\nunit/routes/review/index-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/review/installation-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:review/installation', 'ReviewInstallationRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/review/installation-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/review');
  test('unit/routes/review/installation-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/review/installation-test.js should pass jshint.\nunit/routes/review/installation-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/review/progress-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:review/progress', 'ReviewProgressRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/review/progress-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/review');
  test('unit/routes/review/progress-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/review/progress-test.js should pass jshint.\nunit/routes/review/progress-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/review/progress/details-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:review/progress/details', {});

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/review/progress/details-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/review/progress');
  test('unit/routes/review/progress/details-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/review/progress/details-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/review/progress/details/task-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:review/progress/details/task', {});

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/review/progress/details/task-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/review/progress/details');
  test('unit/routes/review/progress/details/task-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/review/progress/details/task-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/review/progress/details/task/index-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:review/progress/details/task/index', {});

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/review/progress/details/task/index-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/review/progress/details/task');
  test('unit/routes/review/progress/details/task/index-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/review/progress/details/task/index-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/review/progress/details/task/running-steps-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:review/progress/details/task/running-steps', {});

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/review/progress/details/task/running-steps-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/review/progress/details/task');
  test('unit/routes/review/progress/details/task/running-steps-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/review/progress/details/task/running-steps-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/review/progress/details/task/task-errors-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:review/progress/details/task/task-errors', {});

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/review/progress/details/task/task-errors-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/review/progress/details/task');
  test('unit/routes/review/progress/details/task/task-errors-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/review/progress/details/task/task-errors-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/review/progress/details/task/task-locks-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:review/progress/details/task/task-locks', {});

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/review/progress/details/task/task-locks-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/review/progress/details/task');
  test('unit/routes/review/progress/details/task/task-locks-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/review/progress/details/task/task-locks-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/review/progress/details/task/task-raw-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:review/progress/details/task/task-raw', {});

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/review/progress/details/task/task-raw-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/review/progress/details/task');
  test('unit/routes/review/progress/details/task/task-raw-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/review/progress/details/task/task-raw-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/review/progress/overview-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:review/progress/overview', {});

  ember_qunit.test('it exists', function (assert) {
    var route = this.subject();
    assert.ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/review/progress/overview-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/review/progress');
  test('unit/routes/review/progress/overview-test.js should pass jshint', function() { 
    ok(true, 'unit/routes/review/progress/overview-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/rhci-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:rhci', 'RhciRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/rhci-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/rhci-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/rhci-test.js should pass jshint.\nunit/routes/rhci-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/rhev-options-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:rhev-options', 'RhevOptionsRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/rhev-options-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/rhev-options-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/rhev-options-test.js should pass jshint.\nunit/routes/rhev-options-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/rhev-setup-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:rhev-setup', 'RhevSetupRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/rhev-setup-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/rhev-setup-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/rhev-setup-test.js should pass jshint.\nunit/routes/rhev-setup-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/rhev-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:rhev', 'RhevRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/rhev-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/rhev-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/rhev-test.js should pass jshint.\nunit/routes/rhev-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/rhev/engine-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:rhev/engine', 'RhevEngineRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/rhev/engine-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/rhev');
  test('unit/routes/rhev/engine-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/rhev/engine-test.js should pass jshint.\nunit/routes/rhev/engine-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/rhev/index-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:rhev/index', 'RhevIndexRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/rhev/index-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/rhev');
  test('unit/routes/rhev/index-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/rhev/index-test.js should pass jshint.\nunit/routes/rhev/index-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/satellite-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:satellite', 'SatelliteRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/satellite-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/satellite-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/satellite-test.js should pass jshint.\nunit/routes/satellite-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/satellite/configure-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:satellite/configure', 'SatelliteConfigureRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/satellite/configure-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/satellite');
  test('unit/routes/satellite/configure-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/satellite/configure-test.js should pass jshint.\nunit/routes/satellite/configure-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/satellite/index-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:satellite/index', 'SatelliteIndexRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/satellite/index-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/satellite');
  test('unit/routes/satellite/index-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/satellite/index-test.js should pass jshint.\nunit/routes/satellite/index-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/satellite/review-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:satellite/review', 'SatelliteReviewRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/satellite/review-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/satellite');
  test('unit/routes/satellite/review-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/satellite/review-test.js should pass jshint.\nunit/routes/satellite/review-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/satellite/subscriptions-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:subscriptions', 'SatelliteSubscriptionsRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/satellite/subscriptions-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/satellite');
  test('unit/routes/satellite/subscriptions-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/satellite/subscriptions-test.js should pass jshint.\nunit/routes/satellite/subscriptions-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/setpassword-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:setpassword', 'SetpasswordRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/setpassword-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/setpassword-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/setpassword-test.js should pass jshint.\nunit/routes/setpassword-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/single-deployment-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:single-deployment', 'SingleDeploymentRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/single-deployment-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/single-deployment-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/single-deployment-test.js should pass jshint.\nunit/routes/single-deployment-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/storage-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:storage', 'StorageRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/storage-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/storage-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/storage-test.js should pass jshint.\nunit/routes/storage-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/subscriptions/credentials-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:subscriptions/credentials', 'SubscriptionsCredentialsRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/subscriptions/credentials-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/subscriptions');
  test('unit/routes/subscriptions/credentials-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/subscriptions/credentials-test.js should pass jshint.\nunit/routes/subscriptions/credentials-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/subscriptions/index-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:subscriptions/index', 'SubscriptionsIndexRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/subscriptions/index-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/subscriptions');
  test('unit/routes/subscriptions/index-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/subscriptions/index-test.js should pass jshint.\nunit/routes/subscriptions/index-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/subscriptions/select-subscriptions-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:subscriptions/select-subscriptions', 'SubscriptionsSelectSubscriptionsRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/subscriptions/select-subscriptions-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/subscriptions');
  test('unit/routes/subscriptions/select-subscriptions-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/subscriptions/select-subscriptions-test.js should pass jshint.\nunit/routes/subscriptions/select-subscriptions-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/user-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:user', 'UserRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/user-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/user-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/user-test.js should pass jshint.\nunit/routes/user-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/user/edit-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:user/edit', 'UserEditRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/user/edit-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/user');
  test('unit/routes/user/edit-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/user/edit-test.js should pass jshint.\nunit/routes/user/edit-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/users-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:users', 'UsersRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/users-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/users-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/users-test.js should pass jshint.\nunit/routes/users-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/users/new-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:users/new', 'UsersNewRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/users/new-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes/users');
  test('unit/routes/users/new-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/users/new-test.js should pass jshint.\nunit/routes/users/new-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/routes/where-install-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('route:where-install', 'WhereInstallRoute', {});

  ember_qunit.test('it exists', function () {
    var route = this.subject();
    ok(route);
  });

  // Specify the other units that are required for this test.
  // needs: ['controller:foo']

});
define('fusor-ember-cli/tests/unit/routes/where-install-test.jshint', function () {

  'use strict';

  module('JSHint - unit/routes');
  test('unit/routes/where-install-test.js should pass jshint', function() { 
    ok(false, 'unit/routes/where-install-test.js should pass jshint.\nunit/routes/where-install-test.js: line 13, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/serializers/discovered-host-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('serializer:discovered-host', {});

  // Replace this with your real tests.
  ember_qunit.test('it exists', function (assert) {
    var serializer = this.subject();
    assert.ok(serializer);
  });

  // Specify the other units that are required for this test.
  // needs: ['serializer:foo']

});
define('fusor-ember-cli/tests/unit/serializers/discovered-host-test.jshint', function () {

  'use strict';

  module('JSHint - unit/serializers');
  test('unit/serializers/discovered-host-test.js should pass jshint', function() { 
    ok(true, 'unit/serializers/discovered-host-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/serializers/foreman-task-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForModel('foreman-task', {
    // Specify the other units that are required for this test.
    needs: ['serializer:foreman-task']
  });

  // Replace this with your real tests.
  ember_qunit.test('it serializes records', function (assert) {
    var record = this.subject();

    var serializedRecord = record.serialize();

    assert.ok(serializedRecord);
  });

});
define('fusor-ember-cli/tests/unit/serializers/foreman-task-test.jshint', function () {

  'use strict';

  module('JSHint - unit/serializers');
  test('unit/serializers/foreman-task-test.js should pass jshint', function() { 
    ok(true, 'unit/serializers/foreman-task-test.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/unit/views/application-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('view:application', 'ApplicationView');

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var view = this.subject();
    ok(view);
  });

});
define('fusor-ember-cli/tests/unit/views/application-test.jshint', function () {

  'use strict';

  module('JSHint - unit/views');
  test('unit/views/application-test.js should pass jshint', function() { 
    ok(false, 'unit/views/application-test.js should pass jshint.\nunit/views/application-test.js: line 11, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/views/configure-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('view:configure', 'ConfigureView');

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var view = this.subject();
    ok(view);
  });

});
define('fusor-ember-cli/tests/unit/views/configure-test.jshint', function () {

  'use strict';

  module('JSHint - unit/views');
  test('unit/views/configure-test.js should pass jshint', function() { 
    ok(false, 'unit/views/configure-test.js should pass jshint.\nunit/views/configure-test.js: line 11, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/views/organization-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('view:organization', 'OrganizationView');

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var view = this.subject();
    ok(view);
  });

});
define('fusor-ember-cli/tests/unit/views/organization-test.jshint', function () {

  'use strict';

  module('JSHint - unit/views');
  test('unit/views/organization-test.js should pass jshint', function() { 
    ok(false, 'unit/views/organization-test.js should pass jshint.\nunit/views/organization-test.js: line 11, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/unit/views/rhci-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('view:rhci', 'RhciView');

  // Replace this with your real tests.
  ember_qunit.test('it exists', function () {
    var view = this.subject();
    ok(view);
  });

});
define('fusor-ember-cli/tests/unit/views/rhci-test.jshint', function () {

  'use strict';

  module('JSHint - unit/views');
  test('unit/views/rhci-test.js should pass jshint', function() { 
    ok(false, 'unit/views/rhci-test.js should pass jshint.\nunit/views/rhci-test.js: line 11, col 3, \'ok\' is not defined.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/views/configure.jshint', function () {

  'use strict';

  module('JSHint - views');
  test('views/configure.js should pass jshint', function() { 
    ok(true, 'views/configure.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/tests/views/organization.jshint', function () {

  'use strict';

  module('JSHint - views');
  test('views/organization.js should pass jshint', function() { 
    ok(false, 'views/organization.js should pass jshint.\nviews/organization.js: line 18, col 25, \'event\' is defined but never used.\n\n1 error'); 
  });

});
define('fusor-ember-cli/tests/views/rhci.jshint', function () {

  'use strict';

  module('JSHint - views');
  test('views/rhci.js should pass jshint', function() { 
    ok(true, 'views/rhci.js should pass jshint.'); 
  });

});
define('fusor-ember-cli/torii-providers/foreman', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.Object.extend({

    // credentials as passed from torii.open
    open: function open(credentials) {
      return new Ember.RSVP.Promise(function (resolve, reject) {
        alert(credentials.username);
        exampleAsyncLogin(credentials.username, credentials.password,

        // callback function:
        function (error, response) {
          // the promise is resolved with the authorization
          Ember.run.bind(null, resolve, { sessionToken: response.token });
        });
      });
    }

  });

});
define('fusor-ember-cli/views/configure', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].View.extend({});

});
define('fusor-ember-cli/views/organization', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].View.extend({
    classNameBindings: ['color'],
    color: null,
    highlight: function highlight() {
      return this.get('color');
    },

    // mouseEnter: function(event) {
    //   this.set('color', 'yellow');
    // },

    // mouseLeave: function(event) {
    //   this.set('color', 'green');
    //   //alert("mouseLeave!");
    // },
    doubleClick: function doubleClick(event) {
      this.set('color', 'red');
      //alert("ClickableView was clicked!");
    } });

});
define('fusor-ember-cli/views/rhci', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].View.extend(Ember['default'].ViewTargetActionSupport, {});

	// classNameBindings: ['color'],
	// color: null,
	// highlight: function() {
	//   return this.get('color');
	// },

	// mouseEnter: function(event) {
	//   this.set('color', 'yellow');
	// },

	// mouseLeave: function(event) {
	//   this.set('color', 'green');
	//   //alert("mouseLeave!");
	// },
	// doubleClick: function(event) {
	//   this.set('color', 'red');
	//   //alert("ClickableView was clicked!");
	// },

	// didInsertElement: function(){
	//     this.$().hide().show('slow');
	// }

	// click: function() {
	//   this.triggerAction({
	//     action: 'showRHCIModal'
	//   }); // Sends the `save` action, along with the current context
	//       // to the current controller
	// },
	// doRhciModal: function() {
	//   // this.triggerAction({
	//   //   action: 'ddd'
	//   // });
	//   alert('DDD');
	// }.on('didInsertElement'),

});
/* jshint ignore:start */

/* jshint ignore:end */

/* jshint ignore:start */

define('fusor-ember-cli/config/environment', ['ember'], function(Ember) {
  return { 'default': {"modulePrefix":"fusor-ember-cli","environment":"development","baseURL":"/","locationType":"hash","EmberENV":{"FEATURES":{}},"contentSecurityPolicyHeader":"Disabled-Content-Security-Policy","APP":{"LOG_ACTIVE_GENERATION":true,"LOG_TRANSITIONS":true,"LOG_VIEW_LOOKUPS":true,"rootElement":"#ember-app","name":"fusor-ember-cli","version":"0.0.0.083e5831"},"contentSecurityPolicy":{"default-src":"'none'","script-src":"'self' 'unsafe-eval'","font-src":"'self'","connect-src":"'self'","img-src":"'self'","style-src":"'self'","media-src":"'self'"},"exportApplicationGlobal":true}};
});

if (runningTests) {
  require("fusor-ember-cli/tests/test-helper");
} else {
  require("fusor-ember-cli/app")["default"].create({"LOG_ACTIVE_GENERATION":true,"LOG_TRANSITIONS":true,"LOG_VIEW_LOOKUPS":true,"rootElement":"#ember-app","name":"fusor-ember-cli","version":"0.0.0.083e5831"});
}

/* jshint ignore:end */
//# sourceMappingURL=fusor-ember-cli.map